{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"27935b41f18f891911883c95432ccf63e3b35e3c","modified":1569684147514},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1568757378000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"f7b537dac8ff45373c9b4197f748c3c835d94709","modified":1569681680648},{"_id":"themes/hexo-theme-matery/README.md","hash":"fff89f24d40df6913bdde62794ef13f236b1145d","modified":1568757378000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1568757378000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"88be412fc21fd77cfe897f82f8a164b11e3afb00","modified":1568757378000},{"_id":"source/_data/friends.json","hash":"d89ab3aa1224b250d9c186884dab4d852418e41d","modified":1569573677836},{"_id":"source/_posts/.DS_Store","hash":"2e5c0d98785697d370ef9870bb7cbbcc1a3b5ad5","modified":1569685322927},{"_id":"source/categories/index.md","hash":"7cacbf714c18ba19428d92ea529349413d58668d","modified":1569572914947},{"_id":"source/contact/index.md","hash":"64e7b375ca5f476d75d58ac201dd9598aa0b3fb1","modified":1569573140626},{"_id":"source/about/index.md","hash":"68a2f5b8edb664c1a42ae82abbf79c15a93b6798","modified":1569582268118},{"_id":"source/friends/index.md","hash":"4250046aef5cab9f853cad693ba9e28cae2d22f7","modified":1569573579929},{"_id":"source/tags/index.md","hash":"442decc67f3555fefa49fb868d9e4cef23ebbf97","modified":1569573032506},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"b9723a627285d2d9cd3bada6b16d1863bca488e6","modified":1568757378000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"2593ecafa343b96d9fcec82873cb82ee949b5e50","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"ee639d0310867976b3e5fb9f92c215a17a433703","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"aef83631460e091af8130cf3f9614477ee24914f","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"dff72c3a6f3ec6022886e526e6c404e8a0e630bf","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"f133b497fb203a8e2f836fdfefc678e3d1ae2da2","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"57ab845a407baad6e6cc573b2c32b2dbcc972258","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"1c08e2257a756d7ce40eedfdb80e642fbd5215ed","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"10f20cf017af6f46c035e5f7080fa4b70a9dd239","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"f9662a96d0f497a3b2731472b8ad871c7cbdf13a","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"4305eeeb3434c24ba2493fa08d1f1bd9f2efa9aa","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1568757378000},{"_id":"source/_posts/csapp/2019-08-30-CSAPP-1-计算机系统漫游.md","hash":"bf64d778920cd76872101a5825d57326f025bbb0","modified":1569683216808},{"_id":"source/_posts/csapp/2019-09-14-CSAPP-2-信息的表示和处理.md","hash":"354e42a17012fb83ec4b6bb050542fd59312d106","modified":1569683235896},{"_id":"source/_posts/zookeeper/Docker搭建Zookeeper集群.md","hash":"0eace109ec2bb3aee8b5edc5feaa03e7376acfc9","modified":1569681680645},{"_id":"source/_posts/zookeeper/Zookeeper深度学习1-Paxos算法详解.md","hash":"3c8af084744307b5a804eb5fe249ac41da1890b8","modified":1569686138185},{"_id":"source/_posts/zookeeper/Zookeeper深度学习2-Zab协议详解.md","hash":"014471657cbc8617f34fc9ed21c692656f5d70a2","modified":1569686144066},{"_id":"source/_posts/zookeeper/Zookeeper深度学习3-源码分析Leader选举.md","hash":"f55c553bfd78b3612799b09977179ab34c8b04de","modified":1569682192328},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"2d9a44f6fbed4d117bbc403095d9a810cb05303c","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"c5cc0fe0f0bbc546dd43c0c6ffeca4f39ffe9943","modified":1569686248019},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"e4c5bf28ddc29519eee8debe79cce45bf279adeb","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"0abfb51dc80ad063fb2118bee28de6bb8d99ed4e","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"1f337fe1343f87fc958eded799a9ac93fc194e87","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"e253c813b3ee5ed924700a95133741802e58adc5","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"6583c00323d891a03343b6a621a0484a68d74f8a","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"f1b9dc969ea43c6e55ce633f2add15398e9f490a","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"31d2b2be6d8c0e88b0bd2e9aec949a8d5a28c644","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"5b423384b9c0fe77acc4247a8a85304022e5bd2a","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"d4114c22126704cc1754d6d28cb00aec020b428b","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"f06a29c00cd58fe8159e7b1e7a5ea8277b97f25b","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"30b51f344d6ab2856dfe2393e2a32556eb54bb10","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"3d61d4acde8d27a63072145130d2661df8c05df7","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"3dff4f6a73973b0b32f40604244255f3c2a5bb78","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"942609b9240d5c8c09b24562fc8fb31eabe1cae4","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"d8d1d958b3e4dd484d313cf5a361fbb5aa060156","modified":1569583035956},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"84a4fdfe476e0bae76b29dbf6c42b3b2af8b9d60","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"684450f0b42f89ab70370c5248b34e55b7adf6fc","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8eafddbd73fed80e85c66d49837c1a241b087258","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"bd0edf8dad95b2255890d59fb6d6ed6f2eab9c2f","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"babaa0cb32146870785449c70748721235e4eff0","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"cb7a0151cd20e90351e151c22bca9d4c3112f234","modified":1568757378000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"bda810cc135b52f834f1c1ccf52defccacace714","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"7cf10908303f541bc46e4e8e217b8db69895fa11","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"8282160fa4695fc3ab05a09dd35c11ead9159179","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"a2bc80cdc90e80c47e2b26d0ecb824e6bdc61026","modified":1569579576224},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"e63ce844b902ba3023147da99fbe9d3f522343aa","modified":1569579535240},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1568757378000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"c35f11b6ed5b067a8e53a24e8d5032065cac6738","modified":1569580385499},{"_id":"public/atom.xml","hash":"e489c87ecbb9c2ce70d50522a2d037d4cb9007fa","modified":1569686410661},{"_id":"public/search.xml","hash":"459d423b5c1bb81bed1b9622832b79471c27c9a4","modified":1569686410662},{"_id":"public/contact/index.html","hash":"9903272ad0673bf3de344e7f5478d087eef42d81","modified":1569686411345},{"_id":"public/categories/index.html","hash":"0ea990b6ad197c9c320042e37e9a32efd0523608","modified":1569686411346},{"_id":"public/about/index.html","hash":"16eb64b74d8f16660fd1ac2ffaea88c46acfb086","modified":1569686411898},{"_id":"public/friends/index.html","hash":"b01cb74ff07816b9b9cf60075fcb1a40e2106353","modified":1569686411939},{"_id":"public/tags/index.html","hash":"50de14709a03a82d49ae13881b7373ccf6ef8004","modified":1569686411939},{"_id":"public/2019/09/14/csapp/2019-09-14-csapp-2-xin-xi-de-biao-shi-he-chu-li/index.html","hash":"3174d1c5e5c872265e63b633ff57622da423de6d","modified":1569683999354},{"_id":"public/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-3-yuan-ma-fen-xi-leader-xuan-ju/index.html","hash":"374957ac6652c26626176e454fa75332e483a4b1","modified":1569686411949},{"_id":"public/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-2-zab-xie-yi-xiang-jie/index.html","hash":"228b8e97b2566f315dc8eaa0786d9951e3f35c1d","modified":1569686411949},{"_id":"public/2019/09/05/zookeeper/zookeeper-shen-du-xue-xi-1-paxos-suan-fa-xiang-jie/index.html","hash":"17c8a95f5540cbcb4d02f1fc0a50faa533753db8","modified":1569686411949},{"_id":"public/2019/08/30/csapp/2019-08-30-csapp-1-ji-suan-ji-xi-tong-man-you/index.html","hash":"414d037a60b80199db835bb2f81473a916ec3563","modified":1569683999354},{"_id":"public/2019/08/28/zookeeper/docker-da-jian-zookeeper-ji-qun/index.html","hash":"e056c7e6db8d878bb4402ddafef31b5fedc82417","modified":1569686411949},{"_id":"public/archives/index.html","hash":"202af64adebefb4285538bc7a267e6f9c88c762b","modified":1569686411949},{"_id":"public/archives/2019/index.html","hash":"986459aa0879419e2d26603b9a4d79440e59c326","modified":1569686411949},{"_id":"public/archives/2019/08/index.html","hash":"be64c3d28fbf6ced18fbba9421d080827e9e3d2e","modified":1569686411950},{"_id":"public/archives/2019/09/index.html","hash":"b21240ec89a12ae648a1c4756b721c350d41d91e","modified":1569686411950},{"_id":"public/categories/Zookeeper/index.html","hash":"3a98b6f1c07a83cdc2da56f273d8ae98fe3fe150","modified":1569686411950},{"_id":"public/categories/操作系统/index.html","hash":"62f62920f35b921c5eab6708b56166dc0d7bdc9f","modified":1569686411950},{"_id":"public/index.html","hash":"b3cc3db152e9a8736729bc39b3152b46ed662849","modified":1569686411950},{"_id":"public/tags/Zookeeper/index.html","hash":"6fddde11cd3661064571dd019aa5d550f70c4bf4","modified":1569686411950},{"_id":"public/tags/Docker/index.html","hash":"0b8ba7208ae71730056050964757ff500c4f370d","modified":1569686411950},{"_id":"public/tags/CSAPP/index.html","hash":"0ddb47b72d2a088ba7421478ac7e3b11a6554e22","modified":1569686411950},{"_id":"public/tags/Paxos/index.html","hash":"603d2023e0c53aaa236644d79b1f7f91cdf4964c","modified":1569686411951},{"_id":"public/tags/源码分析/index.html","hash":"afbf6d37e6929e8c054e23646bf7e0e29c9efebf","modified":1569686411951},{"_id":"public/tags/Zab/index.html","hash":"ee22e36e8418271e10d1f644497b6b66b6d65684","modified":1569686411951},{"_id":"public/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1569683999372},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1569683999373},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1569683999373},{"_id":"public/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1569683999373},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1569683999373},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1569683999373},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1569683999373},{"_id":"public/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1569683999373},{"_id":"public/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1569683999374},{"_id":"public/medias/reward/alipay.jpg","hash":"a2bc80cdc90e80c47e2b26d0ecb824e6bdc61026","modified":1569683999374},{"_id":"public/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1569683999374},{"_id":"public/medias/reward/wechat.png","hash":"e63ce844b902ba3023147da99fbe9d3f522343aa","modified":1569683999374},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1569683999374},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1569683999374},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1569683999374},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1569683999374},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1569683999375},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1569683999375},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1569683999375},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1569683999375},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1569683999375},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1569683999375},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1569683999375},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1569683999375},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1569683999375},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1569683999375},{"_id":"public/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1569683999393},{"_id":"public/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1569683999393},{"_id":"public/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1569683999394},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1569683999394},{"_id":"public/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1569683999394},{"_id":"public/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1569683999395},{"_id":"public/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1569683999395},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1569683999395},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1569683999395},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1569683999395},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1569683999396},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1569683999396},{"_id":"public/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1569683999396},{"_id":"public/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1569683999397},{"_id":"public/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1569683999397},{"_id":"public/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1569683999397},{"_id":"public/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1569683999397},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1569683999398},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1569683999398},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1569683999409},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1569683999409},{"_id":"public/js/matery.js","hash":"8282160fa4695fc3ab05a09dd35c11ead9159179","modified":1569683999409},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1569683999410},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1569683999410},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1569683999410},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1569683999410},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1569683999410},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1569683999410},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1569683999410},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1569683999410},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1569683999410},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1569683999411},{"_id":"public/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1569683999411},{"_id":"public/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1569683999411},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1569683999412},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1569683999412},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1569683999412},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1569683999430},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1569683999430},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1569683999431},{"_id":"public/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1569683999431},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1569683999449},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1569683999449},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1569683999451},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1569683999452},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1569683999452},{"_id":"public/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1569683999453},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1569683999481},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1569683999482},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1569683999482},{"_id":"public/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1569683999482},{"_id":"public/css/matery.css","hash":"7cf10908303f541bc46e4e8e217b8db69895fa11","modified":1569683999489},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1569683999505},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1569683999505},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1569683999522},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1569683999522},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1569683999526},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1569683999568},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1569683999568},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1569683999569},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1569683999593},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1569683999613},{"_id":"public/libs/materialize/materialize.min.css","hash":"580459a012f556fba86438953062013a94b201af","modified":1569683999617},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1569683999623},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1569683999626},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1569683999632},{"_id":"public/medias/avatar.jpg","hash":"c35f11b6ed5b067a8e53a24e8d5032065cac6738","modified":1569683999643},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1569683999669},{"_id":"source/_posts/csapp/.DS_Store","hash":"0e9f24f5a791442845c8ed1bded5cd8567dc4d36","modified":1569684376670},{"_id":"source/_posts/csapp/CSAPP-1-计算机系统漫游.md","hash":"bf64d778920cd76872101a5825d57326f025bbb0","modified":1569683216808},{"_id":"source/_posts/docker/.DS_Store","hash":"e4d95ae94db2e59133e5c4dd7886653182a70d01","modified":1569684165409},{"_id":"source/_posts/csapp/CSAPP-2-信息的表示和处理.md","hash":"2459ed9fe21c0058b225a88e1bb9aabcab8c46dc","modified":1569685007075},{"_id":"source/_posts/docker/Docker入门.md","hash":"f1fd914b8d3c16443123c4a97a65547b22d88014","modified":1569684279637},{"_id":"source/_posts/计算机网络/chapter2-应用层.md","hash":"046be25f05e199faca3ab6a84befc1c67a144320","modified":1569686045907},{"_id":"source/_posts/计算机网络/.DS_Store","hash":"e7ee0af4acd2180f6ed0e6fb59147f413d23bd9d","modified":1569686340095},{"_id":"source/_posts/计算机网络/chapter3-传输层.md","hash":"d201d369e8e5b37aa06ee104d7974b5efe965105","modified":1569686058452},{"_id":"source/_posts/计算机网络/chapter4-网络层.md","hash":"bc2caa7482217d5e0026e93308d8d00886b3fb7a","modified":1569686066437},{"_id":"source/_posts/计算机网络/chapter1-计算机网络和因特网.md","hash":"d6e822e16f44ced42a568eef198993a41d8651e6","modified":1569685372561},{"_id":"source/_posts/计算机网络/chapter5-链路层.md","hash":"56b2ce313c7d959eea428889ee74371c83134be3","modified":1569686075738},{"_id":"source/_posts/计算机网络/chapter6-网络安全.md","hash":"32d8676b3becc101ce24dd26b4fcd491b9b73d93","modified":1569686084288},{"_id":"source/_posts/java/.DS_Store","hash":"ae50079ff842e97cf7be2d98ad323d2f373cb715","modified":1569685292211},{"_id":"source/_posts/java/Java线程堆栈分析.md","hash":"07edfe79fdc3732930d7687def91a5ac7a2db82d","modified":1569684538582},{"_id":"source/_posts/java/MyBatis源码分析.md","hash":"ad5c965f3f8e7c969b6ce27a57f4c6d8e2dd2a5c","modified":1569684949253},{"_id":"public/2019/09/14/csapp/csapp-2-xin-xi-de-biao-shi-he-chu-li/index.html","hash":"4af2e78e0262bcb9dcc3fceb874408e83d5b5706","modified":1569686411958},{"_id":"public/2019/09/14/ji-suan-ji-wang-luo/chapter6-wang-luo-an-quan/index.html","hash":"24a1d736285253f6c503109b1242c295b2d3bb17","modified":1569686411959},{"_id":"public/2019/09/14/ji-suan-ji-wang-luo/chapter5-lian-lu-ceng/index.html","hash":"582af417cf7d94386923dd5e8a61722708026506","modified":1569686411959},{"_id":"public/2019/09/14/ji-suan-ji-wang-luo/chapter4-wang-luo-ceng/index.html","hash":"2840d65790714185501966e72fec93f8b33427b7","modified":1569686411959},{"_id":"public/2019/09/14/ji-suan-ji-wang-luo/chapter3-chuan-shu-ceng/index.html","hash":"dbceda458c60175e689459d93c4aa39cf6f46dbc","modified":1569686411959},{"_id":"public/2019/09/14/ji-suan-ji-wang-luo/chapter2-ying-yong-ceng/index.html","hash":"55b92beb4ad51caeca56f1280cf233921dfc1ef0","modified":1569686411959},{"_id":"public/2019/09/14/ji-suan-ji-wang-luo/chapter1-ji-suan-ji-wang-luo-he-yin-te-wang/index.html","hash":"d4a2ad1d63726bbc7be49d8e3c0b2df806853992","modified":1569686411959},{"_id":"public/2019/08/30/csapp/csapp-1-ji-suan-ji-xi-tong-man-you/index.html","hash":"8cb146be96e8ccf95bfcb26c944e0a4202eb662f","modified":1569686411960},{"_id":"public/2019/08/17/docker/docker-ru-men/index.html","hash":"286e3a7523b518ba1fb965d3db96989da9991c17","modified":1569686411960},{"_id":"public/2019/07/27/java/mybatis-yuan-ma-fen-xi/index.html","hash":"5cd1cd4bf70ac7cda3bc1da33081dedc1e1af1c6","modified":1569686411960},{"_id":"public/2017/12/26/java/java-xian-cheng-dui-zhan-fen-xi/index.html","hash":"1b3989153e02946be04621bb049d067e6f4eb417","modified":1569686411961},{"_id":"public/archives/page/2/index.html","hash":"2704a0ffec127b5cc7a0af63976cb929c485c90c","modified":1569686411961},{"_id":"public/archives/2017/index.html","hash":"a5c62d0fd3db08bf5fbb27da7e494d1850f469bd","modified":1569686411961},{"_id":"public/archives/2017/12/index.html","hash":"b799faf1ea8eb4deff0f89ffc802e880587a8463","modified":1569686411961},{"_id":"public/archives/2019/page/2/index.html","hash":"f6f0106120d4d428a284e17b8f773729b927da43","modified":1569686411961},{"_id":"public/archives/2019/07/index.html","hash":"5ce9be5ac1c6ac86f73ea17ee0338cef0d4a066d","modified":1569686411961},{"_id":"public/page/2/index.html","hash":"757c2c72629b77c70f6e4c182da3e232cecfcf6e","modified":1569686411961},{"_id":"public/categories/Docker/index.html","hash":"7264d407f47ba750d36325544fd2e2636c05a1a0","modified":1569686411961},{"_id":"public/categories/JAVA/index.html","hash":"c81dcaffc8c6f6593b2a084e6e3791a8a91883d4","modified":1569686411962},{"_id":"public/categories/源码阅读/index.html","hash":"19a1e48e83a38eb3c4fc58910ceb920761ec6911","modified":1569686411962},{"_id":"public/categories/计算机网络/index.html","hash":"53feeadf115d473e651af4d09056f47860566795","modified":1569686411962},{"_id":"public/tags/线程堆栈/index.html","hash":"2039fc250ef4b45e6103d41ef330caa4488312c4","modified":1569686411962},{"_id":"public/tags/Mybatis/index.html","hash":"9aa3578b7dc67885a2796726c5f4bb31ba0a3d96","modified":1569686411962},{"_id":"public/tags/网络层/index.html","hash":"64695d7e247ddc7c6ddb8eb7ff644c9497c51dbd","modified":1569686411962},{"_id":"public/tags/传输层/index.html","hash":"6dc4669481f7a12aaf5af0a76ee1444076452985","modified":1569686411962},{"_id":"public/tags/应用层/index.html","hash":"4f4cb0c73f03e6c7b89b51d378ef62515b3d70f6","modified":1569686411962},{"_id":"public/tags/因特网/index.html","hash":"8b677e0710a104da5c12e6273db60ef9a2469e3f","modified":1569686411962},{"_id":"public/tags/网络安全/index.html","hash":"0ec5873a1f53c954905d01259145565095521ff2","modified":1569686411962},{"_id":"public/tags/链路层/index.html","hash":"90c1abe796d6ef0b2729aea1ccd8e5a1838fbb3e","modified":1569686411962}],"Category":[{"name":"Zookeeper","_id":"ck13pbo3t0006c3o6aaurccdn"},{"name":"操作系统","_id":"ck13pbo57000ec3o6r5lyywa6"},{"name":"Docker","_id":"ck13pezb80001cno6x09h69p6"},{"name":"JAVA","_id":"ck13pk9od000ecno6wdgidez0"},{"name":"JVM","parent":"ck13pk9od000ecno6wdgidez0","_id":"ck13pk9oe000hcno6nc5a04mh"},{"name":"Mybatis","_id":"ck13ps6nj000lcno6tlvjxt43"},{"name":"源码","_id":"ck13pv7n8000ucno6qi8jzyiv"},{"name":"源码阅读","_id":"ck13pvdbo000xcno657o3k6o4"},{"name":"计算机网络","_id":"ck13qknjs0002veo6rzyszrdl"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"categories","date":"2019-09-27T08:26:32.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-09-27 16:26:32\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-09-27T08:28:34.947Z","path":"categories/index.html","comments":1,"_id":"ck13pbo130000c3o6nhypku8f","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2019-09-27T08:32:05.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-09-27 16:32:05\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2019-09-27T08:32:20.626Z","path":"contact/index.html","comments":1,"_id":"ck13pbo170001c3o61a5xm5u4","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2019-09-27T08:30:14.000Z","type":"about","layout":"about","_content":"\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-09-27 16:30:14\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n\n\n\n","updated":"2019-09-27T11:04:28.118Z","path":"about/index.html","comments":1,"_id":"ck13pbo180002c3o6sbe26lhw","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-09-27T08:39:16.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-09-27 16:39:16\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2019-09-27T08:39:39.929Z","path":"friends/index.html","comments":1,"_id":"ck13pbo1a0003c3o6rh1f5ioo","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-09-27T08:29:21.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-09-27 16:29:21\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-09-27T08:30:32.506Z","path":"tags/index.html","comments":1,"_id":"ck13pbo1b0004c3o6pktkazmz","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"Docker搭建Zookeeper集群","date":"2019-08-28T14:42:30.000Z","_content":"\n> 大家好，我是程序员小罗，这是我的技术学习笔记。\n\n\n## 起因\n\n由于最近在学习zookeeper的原理，所以需要在安装一个集群来实验一些特性加深理解。\n\n但是问题来了，我们作为个人学习者，要搭建集群又没有那么多机器，要么就是搭建伪集群，或者就是需要安装一个虚拟机软件（比如vmWare），装多个虚拟机。 这两种方法我之前都试过，都不太理想，一个需要改端口，一种需要安装很多虚拟机，而且换了电脑也不好迁移。每次都得搞重复的配置，实现是太令人烦恼了；\n\n\n\n## 目标\n\n\n\n综上，上述的痛点，都不是我们愿意做的。接下来，就要介绍今天我用的神器：`Docker` 。\n\n>  使用Docker 基本上不用我们装环境之类的配置，比如安装 jdk。现在我们直接可以从镜像仓库拉别人制作好的镜像，简直不要太方便，直接运行即可。\n\n\n\n**今天我要搭建的是一个由四台 zk 构成的 zk 集群，其中一台为 Leader，两台 Follower，一台 Observer。**\n\n`talk is cheap,show me your code`, 接着往下看吧！\n\n-----------------------------------\n\n## 实战\n\n\n\n不管你现在用的windows 还是linux 系统，首先你需要安装好Docker环境。 这里就不在叙述了，官网下载安装即可。\n\n如果对Docker 基本操作不熟悉的话，可以看我之前写的 [Docker入门（镜像、容器、仓库）](<https://www.jianshu.com/p/251e55d9f9b3>)\n\nPS: 本次所制作的镜像，可以直接保存到自己的私服，以后随时随地直接拉取运行即可。**一次制作，到处运行**。\n\n私服的搭建也可以看我之前写的Docker入门。\n\n\n\n### 获取镜像\n\n` docker pull zookeeper:3.4.11` 这里我选择了3.4.11 版本。\n\n\n\n### 设置docker固定ip\n\n\n\n因为我们要搭建的是集群环境，所以ip地址必须固定，因此需要自定义一种网络类型。\n\n\n\n#### 创建自定义网络类型，并且指定网段\n\n`sudo docker network create --subnet=192.168.0.0/24 staticnet`\n\n通过`docker network ls`可以查看到网络类型中多了一个 staticnet\n\n\n\n### 使用新的网络类型创建并启动容器\n\n```shell\nchong@L MINGW64 ~\n$ docker run --name zookeeper-1 --restart always --net staticnet --ip 192.168.0.10 -d zookeeper:3.4.11\n61a331b2584b6ef949e2183892c5a73a2e214b7071d4879993f7cbba41c836ed\n\n```\n\n\n\n通过`docker inspect`可以查看容器 ip为`192.168.0.10`，关闭容器并重启，发现容器ip并未发生改变。\n\n\n\n### 进入容器进行配置\n\n\n\n由于容器在后台运行，因此我们需要进入容器，有三种方式，有兴趣的可以看我之前写的 [Docker入门（镜像、容器、仓库）](<https://www.jianshu.com/p/251e55d9f9b3>)\n\n```shell\n$ docker exec -ti 61a bash   # 61a为容器id\n```\n\n\n\n登入后，我们只需要做2件事：\n\n1. **修改zoo.cfg**\n\n在 zoo.cfg 文件中添加 zk 集群节点列表\n\n```shell\nbash-4.4# vi /conf/zoo.cfg\nclientPort=2181\ndataDir=/data\ndataLogDir=/datalog\ntickTime=2000\ninitLimit=5\nsyncLimit=2\nmaxClientCnxns=60\nserver.1=192.168.0.10:2888:3888\nserver.2=192.168.0.11:2888:3888\nserver.3=192.168.0.12:2888:3888\nserver.4=192.168.0.13:2888:3888:observer\n\n```\n\n\n\n2. **创建** **myid** **文件**\n\n在一步的zoo.cfg文件中我们可以看到dataDir的路径，在/data 目录中创建表示当前主机编号的 myid 文件。该主机编号要与 zoo.cfg 文件中设置的编号一致。\n\n```shell\nbash-4.4# echo 1 > /data/myid\n```\n\n\n\n### 保存修改后的镜像\n\n因为我们上面对正在运行的容器做了三点修改，这也正是我们需要的集群配置，所以我们要将这个容器制作成镜像,如下操作：\n\n```shell\n$ docker commit -m \"create zk1\" -a \"coderluo\" 61a zookeeper-1:3.4.11\nsha256:455b27d32c83365790b7b6eff7d58021556858390d28d27b07aca206e83c507c\n\nchong@L MINGW64 ~\n$ docker images\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nzookeeper-1                  3.4.11              455b27d32c83        8 seconds ago       146MB\n39.108.186.135:5000/ubuntu   v1                  a2a15febcdf3        13 days ago         64.2MB\nzookeeper                    3.4.11              56d414270ae3        19 months ago       146MB\n\n```\n\n\n\n使用`docekr commit` 进行基于已有的镜像进行创建，我的上一篇Docker入门中也有写。然后通过`docker images` 查看到zookeeper-1 这个镜像已经存在了。\n\n到这里一台镜像已经制作好了，接下来就是一样的事情重复干几遍:\n\n- 进入容器\n- 修改myid\n- 保存修改制作为新镜像\n\n\n\n**查询容器id**\n\n```shell\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                          NAMES\n61a331b2584b        zookeeper:3.4.11    \"/docker-entrypoint.…\"   About an hour ago   Up 12 minutes       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-1\n\n```\n\n\n\n\n\n**进入容器执行修改(第2,3台都执行此操作)：**\n\n```shell\n$ docker exec -ti 61a bash\nbash-4.4# echo 2 > /data/myid\nbash-4.4# cat /data/myid\n2\nbash-4.4# exit\nexit\n\n```\n\n\n\n**创建新的镜像(第2,3台都执行此操作)：**\n\n```shell\n$ docker commit -m \"create zookeeper-2\" -a \"coderluo\" 61a zookeeper-2:3.4.11\nsha256:c775aff13fd3b2fc30066f6fc5f8a5ee429be3052b790c8e02cf74b5e4bf71e9\n```\n\n\n\n完成后，这里要注意，第四台主机因为我们要让他作为Observer，所以他需要在zoo.cfg中增加一行配置：\n\n `peerType=observer`\n\n![1](http://media.coderluo.top/img/1.png%3F1)\n\n \n\n然后在执行上面和第2,3台机器一样的操作。\n\n\n\n最后我们查看当前所有的镜像，不出意外的话下图展示的你也都有了：\n\n![2](http://media.coderluo.top/zk/2.png)\n\n\n\n到这里，今天的学习就要接近尾声了，最后一步\n\n\n\n### 依次启动4台zookeeper实例\n\n\n\n直接按照我下面的命令一次执行即可：\n\n```shell\nchong@L MINGW64 ~\n$  docker run --name zookeeper-1 --restart always --net staticnet --ip 192.168.0.10 -d zookeeper-1:3.4.11 #第一台\n35acd4f798c8154047f30af184145d8b4124ec8a4e8e4a549db0d333a1c33785\nchong@L MINGW64 ~\n$  docker run --name zookeeper-2 --restart always --net staticnet --ip 192.168.0.11 -d zookeeper-2:3.4.11 #第二台\n7ef30c809183dc223e42e891880ad8c85381fac11d15da5c0455400b915c77bb\n\nchong@L MINGW64 ~\n$  docker run --name zookeeper-3 --restart always --net staticnet --ip 192.168.0.12 -d zookeeper-3:3.4.11 #第三台\nf138451dd21ce5217eb6e4472116b3ffa32e9ea2afbcaae44ee4d633040299f9\nchong@L MINGW64 ~\n$  docker run --name zookeeper-4 --restart always --net staticnet --ip 192.168.0.13 -d zookeeper-4:3.4.11 #第四台\nc662d3438db74414c9b0178bc756b6cf96cd0458cbc226e8854da4a06337d656\n\n```\n\n\n\n查看运行状态：\n\n```shell\n$ docker ps -a\nCONTAINER ID        IMAGE                COMMAND                  CREATED              STATUS              PORTS                          NAMES\nc662d3438db7        zookeeper-4:3.4.11   \"/docker-entrypoint.…\"   6 seconds ago        Up 4 seconds        2181/tcp, 2888/tcp, 3888/tcp   zookeeper-4\nf138451dd21c        zookeeper-3:3.4.11   \"/docker-entrypoint.…\"   24 seconds ago       Up 23 seconds       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-3\n7ef30c809183        zookeeper-2:3.4.11   \"/docker-entrypoint.…\"   41 seconds ago       Up 39 seconds       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-2\n35acd4f798c8        zookeeper-1:3.4.11   \"/docker-entrypoint.…\"   About a minute ago   Up About a minute   2181/tcp, 2888/tcp, 3888/tcp   zookeeper-1\n\n```\n\n\n\n## 总结\n\n\n\n至此我们今天要搭建的四台zk实例组成的集群已经搞定了，有没有感觉到有了Docker 简直是神奇啊，只有亲身体会下才能感觉他的便利。\n\n\n\n欢迎在留言区讨论，今天就到这里啦，可以愉快的学习第zk的底层原理了。\n\nDocker 入门基础知识，可以看我整理的这篇文章：\n\n[Docker入门（镜像、容器、仓库)](https://www.jianshu.com/p/251e55d9f9b3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/zookeeper/Docker搭建Zookeeper集群.md","raw":"---\ntitle: Docker搭建Zookeeper集群\ntags:\n  - Zookeeper\n  - Docker\ndate: 2019-08-28 22:42:30\ncategories: Zookeeper\n---\n\n> 大家好，我是程序员小罗，这是我的技术学习笔记。\n\n\n## 起因\n\n由于最近在学习zookeeper的原理，所以需要在安装一个集群来实验一些特性加深理解。\n\n但是问题来了，我们作为个人学习者，要搭建集群又没有那么多机器，要么就是搭建伪集群，或者就是需要安装一个虚拟机软件（比如vmWare），装多个虚拟机。 这两种方法我之前都试过，都不太理想，一个需要改端口，一种需要安装很多虚拟机，而且换了电脑也不好迁移。每次都得搞重复的配置，实现是太令人烦恼了；\n\n\n\n## 目标\n\n\n\n综上，上述的痛点，都不是我们愿意做的。接下来，就要介绍今天我用的神器：`Docker` 。\n\n>  使用Docker 基本上不用我们装环境之类的配置，比如安装 jdk。现在我们直接可以从镜像仓库拉别人制作好的镜像，简直不要太方便，直接运行即可。\n\n\n\n**今天我要搭建的是一个由四台 zk 构成的 zk 集群，其中一台为 Leader，两台 Follower，一台 Observer。**\n\n`talk is cheap,show me your code`, 接着往下看吧！\n\n-----------------------------------\n\n## 实战\n\n\n\n不管你现在用的windows 还是linux 系统，首先你需要安装好Docker环境。 这里就不在叙述了，官网下载安装即可。\n\n如果对Docker 基本操作不熟悉的话，可以看我之前写的 [Docker入门（镜像、容器、仓库）](<https://www.jianshu.com/p/251e55d9f9b3>)\n\nPS: 本次所制作的镜像，可以直接保存到自己的私服，以后随时随地直接拉取运行即可。**一次制作，到处运行**。\n\n私服的搭建也可以看我之前写的Docker入门。\n\n\n\n### 获取镜像\n\n` docker pull zookeeper:3.4.11` 这里我选择了3.4.11 版本。\n\n\n\n### 设置docker固定ip\n\n\n\n因为我们要搭建的是集群环境，所以ip地址必须固定，因此需要自定义一种网络类型。\n\n\n\n#### 创建自定义网络类型，并且指定网段\n\n`sudo docker network create --subnet=192.168.0.0/24 staticnet`\n\n通过`docker network ls`可以查看到网络类型中多了一个 staticnet\n\n\n\n### 使用新的网络类型创建并启动容器\n\n```shell\nchong@L MINGW64 ~\n$ docker run --name zookeeper-1 --restart always --net staticnet --ip 192.168.0.10 -d zookeeper:3.4.11\n61a331b2584b6ef949e2183892c5a73a2e214b7071d4879993f7cbba41c836ed\n\n```\n\n\n\n通过`docker inspect`可以查看容器 ip为`192.168.0.10`，关闭容器并重启，发现容器ip并未发生改变。\n\n\n\n### 进入容器进行配置\n\n\n\n由于容器在后台运行，因此我们需要进入容器，有三种方式，有兴趣的可以看我之前写的 [Docker入门（镜像、容器、仓库）](<https://www.jianshu.com/p/251e55d9f9b3>)\n\n```shell\n$ docker exec -ti 61a bash   # 61a为容器id\n```\n\n\n\n登入后，我们只需要做2件事：\n\n1. **修改zoo.cfg**\n\n在 zoo.cfg 文件中添加 zk 集群节点列表\n\n```shell\nbash-4.4# vi /conf/zoo.cfg\nclientPort=2181\ndataDir=/data\ndataLogDir=/datalog\ntickTime=2000\ninitLimit=5\nsyncLimit=2\nmaxClientCnxns=60\nserver.1=192.168.0.10:2888:3888\nserver.2=192.168.0.11:2888:3888\nserver.3=192.168.0.12:2888:3888\nserver.4=192.168.0.13:2888:3888:observer\n\n```\n\n\n\n2. **创建** **myid** **文件**\n\n在一步的zoo.cfg文件中我们可以看到dataDir的路径，在/data 目录中创建表示当前主机编号的 myid 文件。该主机编号要与 zoo.cfg 文件中设置的编号一致。\n\n```shell\nbash-4.4# echo 1 > /data/myid\n```\n\n\n\n### 保存修改后的镜像\n\n因为我们上面对正在运行的容器做了三点修改，这也正是我们需要的集群配置，所以我们要将这个容器制作成镜像,如下操作：\n\n```shell\n$ docker commit -m \"create zk1\" -a \"coderluo\" 61a zookeeper-1:3.4.11\nsha256:455b27d32c83365790b7b6eff7d58021556858390d28d27b07aca206e83c507c\n\nchong@L MINGW64 ~\n$ docker images\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nzookeeper-1                  3.4.11              455b27d32c83        8 seconds ago       146MB\n39.108.186.135:5000/ubuntu   v1                  a2a15febcdf3        13 days ago         64.2MB\nzookeeper                    3.4.11              56d414270ae3        19 months ago       146MB\n\n```\n\n\n\n使用`docekr commit` 进行基于已有的镜像进行创建，我的上一篇Docker入门中也有写。然后通过`docker images` 查看到zookeeper-1 这个镜像已经存在了。\n\n到这里一台镜像已经制作好了，接下来就是一样的事情重复干几遍:\n\n- 进入容器\n- 修改myid\n- 保存修改制作为新镜像\n\n\n\n**查询容器id**\n\n```shell\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                          NAMES\n61a331b2584b        zookeeper:3.4.11    \"/docker-entrypoint.…\"   About an hour ago   Up 12 minutes       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-1\n\n```\n\n\n\n\n\n**进入容器执行修改(第2,3台都执行此操作)：**\n\n```shell\n$ docker exec -ti 61a bash\nbash-4.4# echo 2 > /data/myid\nbash-4.4# cat /data/myid\n2\nbash-4.4# exit\nexit\n\n```\n\n\n\n**创建新的镜像(第2,3台都执行此操作)：**\n\n```shell\n$ docker commit -m \"create zookeeper-2\" -a \"coderluo\" 61a zookeeper-2:3.4.11\nsha256:c775aff13fd3b2fc30066f6fc5f8a5ee429be3052b790c8e02cf74b5e4bf71e9\n```\n\n\n\n完成后，这里要注意，第四台主机因为我们要让他作为Observer，所以他需要在zoo.cfg中增加一行配置：\n\n `peerType=observer`\n\n![1](http://media.coderluo.top/img/1.png%3F1)\n\n \n\n然后在执行上面和第2,3台机器一样的操作。\n\n\n\n最后我们查看当前所有的镜像，不出意外的话下图展示的你也都有了：\n\n![2](http://media.coderluo.top/zk/2.png)\n\n\n\n到这里，今天的学习就要接近尾声了，最后一步\n\n\n\n### 依次启动4台zookeeper实例\n\n\n\n直接按照我下面的命令一次执行即可：\n\n```shell\nchong@L MINGW64 ~\n$  docker run --name zookeeper-1 --restart always --net staticnet --ip 192.168.0.10 -d zookeeper-1:3.4.11 #第一台\n35acd4f798c8154047f30af184145d8b4124ec8a4e8e4a549db0d333a1c33785\nchong@L MINGW64 ~\n$  docker run --name zookeeper-2 --restart always --net staticnet --ip 192.168.0.11 -d zookeeper-2:3.4.11 #第二台\n7ef30c809183dc223e42e891880ad8c85381fac11d15da5c0455400b915c77bb\n\nchong@L MINGW64 ~\n$  docker run --name zookeeper-3 --restart always --net staticnet --ip 192.168.0.12 -d zookeeper-3:3.4.11 #第三台\nf138451dd21ce5217eb6e4472116b3ffa32e9ea2afbcaae44ee4d633040299f9\nchong@L MINGW64 ~\n$  docker run --name zookeeper-4 --restart always --net staticnet --ip 192.168.0.13 -d zookeeper-4:3.4.11 #第四台\nc662d3438db74414c9b0178bc756b6cf96cd0458cbc226e8854da4a06337d656\n\n```\n\n\n\n查看运行状态：\n\n```shell\n$ docker ps -a\nCONTAINER ID        IMAGE                COMMAND                  CREATED              STATUS              PORTS                          NAMES\nc662d3438db7        zookeeper-4:3.4.11   \"/docker-entrypoint.…\"   6 seconds ago        Up 4 seconds        2181/tcp, 2888/tcp, 3888/tcp   zookeeper-4\nf138451dd21c        zookeeper-3:3.4.11   \"/docker-entrypoint.…\"   24 seconds ago       Up 23 seconds       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-3\n7ef30c809183        zookeeper-2:3.4.11   \"/docker-entrypoint.…\"   41 seconds ago       Up 39 seconds       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-2\n35acd4f798c8        zookeeper-1:3.4.11   \"/docker-entrypoint.…\"   About a minute ago   Up About a minute   2181/tcp, 2888/tcp, 3888/tcp   zookeeper-1\n\n```\n\n\n\n## 总结\n\n\n\n至此我们今天要搭建的四台zk实例组成的集群已经搞定了，有没有感觉到有了Docker 简直是神奇啊，只有亲身体会下才能感觉他的便利。\n\n\n\n欢迎在留言区讨论，今天就到这里啦，可以愉快的学习第zk的底层原理了。\n\nDocker 入门基础知识，可以看我整理的这篇文章：\n\n[Docker入门（镜像、容器、仓库)](https://www.jianshu.com/p/251e55d9f9b3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"zookeeper/Docker搭建Zookeeper集群","published":1,"updated":"2019-09-28T14:41:20.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck13pbo3i0005c3o6jdkazqaz","content":"<blockquote>\n<p>大家好，我是程序员小罗，这是我的技术学习笔记。</p>\n</blockquote>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>由于最近在学习zookeeper的原理，所以需要在安装一个集群来实验一些特性加深理解。</p>\n<p>但是问题来了，我们作为个人学习者，要搭建集群又没有那么多机器，要么就是搭建伪集群，或者就是需要安装一个虚拟机软件（比如vmWare），装多个虚拟机。 这两种方法我之前都试过，都不太理想，一个需要改端口，一种需要安装很多虚拟机，而且换了电脑也不好迁移。每次都得搞重复的配置，实现是太令人烦恼了；</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>综上，上述的痛点，都不是我们愿意做的。接下来，就要介绍今天我用的神器：<code>Docker</code> 。</p>\n<blockquote>\n<p> 使用Docker 基本上不用我们装环境之类的配置，比如安装 jdk。现在我们直接可以从镜像仓库拉别人制作好的镜像，简直不要太方便，直接运行即可。</p>\n</blockquote>\n<p><strong>今天我要搭建的是一个由四台 zk 构成的 zk 集群，其中一台为 Leader，两台 Follower，一台 Observer。</strong></p>\n<p><code>talk is cheap,show me your code</code>, 接着往下看吧！</p>\n<hr>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>不管你现在用的windows 还是linux 系统，首先你需要安装好Docker环境。 这里就不在叙述了，官网下载安装即可。</p>\n<p>如果对Docker 基本操作不熟悉的话，可以看我之前写的 <a href=\"https://www.jianshu.com/p/251e55d9f9b3\" target=\"_blank\" rel=\"noopener\">Docker入门（镜像、容器、仓库）</a></p>\n<p>PS: 本次所制作的镜像，可以直接保存到自己的私服，以后随时随地直接拉取运行即可。<strong>一次制作，到处运行</strong>。</p>\n<p>私服的搭建也可以看我之前写的Docker入门。</p>\n<h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><p><code>docker pull zookeeper:3.4.11</code> 这里我选择了3.4.11 版本。</p>\n<h3 id=\"设置docker固定ip\"><a href=\"#设置docker固定ip\" class=\"headerlink\" title=\"设置docker固定ip\"></a>设置docker固定ip</h3><p>因为我们要搭建的是集群环境，所以ip地址必须固定，因此需要自定义一种网络类型。</p>\n<h4 id=\"创建自定义网络类型，并且指定网段\"><a href=\"#创建自定义网络类型，并且指定网段\" class=\"headerlink\" title=\"创建自定义网络类型，并且指定网段\"></a>创建自定义网络类型，并且指定网段</h4><p><code>sudo docker network create --subnet=192.168.0.0/24 staticnet</code></p>\n<p>通过<code>docker network ls</code>可以查看到网络类型中多了一个 staticnet</p>\n<h3 id=\"使用新的网络类型创建并启动容器\"><a href=\"#使用新的网络类型创建并启动容器\" class=\"headerlink\" title=\"使用新的网络类型创建并启动容器\"></a>使用新的网络类型创建并启动容器</h3><pre class=\" language-shell\"><code class=\"language-shell\">chong@L MINGW64 ~\n$ docker run --name zookeeper-1 --restart always --net staticnet --ip 192.168.0.10 -d zookeeper:3.4.11\n61a331b2584b6ef949e2183892c5a73a2e214b7071d4879993f7cbba41c836ed\n</code></pre>\n<p>通过<code>docker inspect</code>可以查看容器 ip为<code>192.168.0.10</code>，关闭容器并重启，发现容器ip并未发生改变。</p>\n<h3 id=\"进入容器进行配置\"><a href=\"#进入容器进行配置\" class=\"headerlink\" title=\"进入容器进行配置\"></a>进入容器进行配置</h3><p>由于容器在后台运行，因此我们需要进入容器，有三种方式，有兴趣的可以看我之前写的 <a href=\"https://www.jianshu.com/p/251e55d9f9b3\" target=\"_blank\" rel=\"noopener\">Docker入门（镜像、容器、仓库）</a></p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker exec -ti 61a bash   # 61a为容器id</code></pre>\n<p>登入后，我们只需要做2件事：</p>\n<ol>\n<li><strong>修改zoo.cfg</strong></li>\n</ol>\n<p>在 zoo.cfg 文件中添加 zk 集群节点列表</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">bash-4.4# vi /conf/zoo.cfg\nclientPort=2181\ndataDir=/data\ndataLogDir=/datalog\ntickTime=2000\ninitLimit=5\nsyncLimit=2\nmaxClientCnxns=60\nserver.1=192.168.0.10:2888:3888\nserver.2=192.168.0.11:2888:3888\nserver.3=192.168.0.12:2888:3888\nserver.4=192.168.0.13:2888:3888:observer\n</code></pre>\n<ol start=\"2\">\n<li><strong>创建</strong> <strong>myid</strong> <strong>文件</strong></li>\n</ol>\n<p>在一步的zoo.cfg文件中我们可以看到dataDir的路径，在/data 目录中创建表示当前主机编号的 myid 文件。该主机编号要与 zoo.cfg 文件中设置的编号一致。</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">bash-4.4# echo 1 > /data/myid</code></pre>\n<h3 id=\"保存修改后的镜像\"><a href=\"#保存修改后的镜像\" class=\"headerlink\" title=\"保存修改后的镜像\"></a>保存修改后的镜像</h3><p>因为我们上面对正在运行的容器做了三点修改，这也正是我们需要的集群配置，所以我们要将这个容器制作成镜像,如下操作：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker commit -m \"create zk1\" -a \"coderluo\" 61a zookeeper-1:3.4.11\nsha256:455b27d32c83365790b7b6eff7d58021556858390d28d27b07aca206e83c507c\n\nchong@L MINGW64 ~\n$ docker images\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nzookeeper-1                  3.4.11              455b27d32c83        8 seconds ago       146MB\n39.108.186.135:5000/ubuntu   v1                  a2a15febcdf3        13 days ago         64.2MB\nzookeeper                    3.4.11              56d414270ae3        19 months ago       146MB\n</code></pre>\n<p>使用<code>docekr commit</code> 进行基于已有的镜像进行创建，我的上一篇Docker入门中也有写。然后通过<code>docker images</code> 查看到zookeeper-1 这个镜像已经存在了。</p>\n<p>到这里一台镜像已经制作好了，接下来就是一样的事情重复干几遍:</p>\n<ul>\n<li>进入容器</li>\n<li>修改myid</li>\n<li>保存修改制作为新镜像</li>\n</ul>\n<p><strong>查询容器id</strong></p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                          NAMES\n61a331b2584b        zookeeper:3.4.11    \"/docker-entrypoint.…\"   About an hour ago   Up 12 minutes       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-1\n</code></pre>\n<p><strong>进入容器执行修改(第2,3台都执行此操作)：</strong></p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker exec -ti 61a bash\nbash-4.4# echo 2 > /data/myid\nbash-4.4# cat /data/myid\n2\nbash-4.4# exit\nexit\n</code></pre>\n<p><strong>创建新的镜像(第2,3台都执行此操作)：</strong></p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker commit -m \"create zookeeper-2\" -a \"coderluo\" 61a zookeeper-2:3.4.11\nsha256:c775aff13fd3b2fc30066f6fc5f8a5ee429be3052b790c8e02cf74b5e4bf71e9</code></pre>\n<p>完成后，这里要注意，第四台主机因为我们要让他作为Observer，所以他需要在zoo.cfg中增加一行配置：</p>\n<p> <code>peerType=observer</code></p>\n<p><img src=\"http://media.coderluo.top/img/1.png%3F1\" alt=\"1\"></p>\n<p>然后在执行上面和第2,3台机器一样的操作。</p>\n<p>最后我们查看当前所有的镜像，不出意外的话下图展示的你也都有了：</p>\n<p><img src=\"http://media.coderluo.top/zk/2.png\" alt=\"2\"></p>\n<p>到这里，今天的学习就要接近尾声了，最后一步</p>\n<h3 id=\"依次启动4台zookeeper实例\"><a href=\"#依次启动4台zookeeper实例\" class=\"headerlink\" title=\"依次启动4台zookeeper实例\"></a>依次启动4台zookeeper实例</h3><p>直接按照我下面的命令一次执行即可：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">chong@L MINGW64 ~\n$  docker run --name zookeeper-1 --restart always --net staticnet --ip 192.168.0.10 -d zookeeper-1:3.4.11 #第一台\n35acd4f798c8154047f30af184145d8b4124ec8a4e8e4a549db0d333a1c33785\nchong@L MINGW64 ~\n$  docker run --name zookeeper-2 --restart always --net staticnet --ip 192.168.0.11 -d zookeeper-2:3.4.11 #第二台\n7ef30c809183dc223e42e891880ad8c85381fac11d15da5c0455400b915c77bb\n\nchong@L MINGW64 ~\n$  docker run --name zookeeper-3 --restart always --net staticnet --ip 192.168.0.12 -d zookeeper-3:3.4.11 #第三台\nf138451dd21ce5217eb6e4472116b3ffa32e9ea2afbcaae44ee4d633040299f9\nchong@L MINGW64 ~\n$  docker run --name zookeeper-4 --restart always --net staticnet --ip 192.168.0.13 -d zookeeper-4:3.4.11 #第四台\nc662d3438db74414c9b0178bc756b6cf96cd0458cbc226e8854da4a06337d656\n</code></pre>\n<p>查看运行状态：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker ps -a\nCONTAINER ID        IMAGE                COMMAND                  CREATED              STATUS              PORTS                          NAMES\nc662d3438db7        zookeeper-4:3.4.11   \"/docker-entrypoint.…\"   6 seconds ago        Up 4 seconds        2181/tcp, 2888/tcp, 3888/tcp   zookeeper-4\nf138451dd21c        zookeeper-3:3.4.11   \"/docker-entrypoint.…\"   24 seconds ago       Up 23 seconds       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-3\n7ef30c809183        zookeeper-2:3.4.11   \"/docker-entrypoint.…\"   41 seconds ago       Up 39 seconds       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-2\n35acd4f798c8        zookeeper-1:3.4.11   \"/docker-entrypoint.…\"   About a minute ago   Up About a minute   2181/tcp, 2888/tcp, 3888/tcp   zookeeper-1\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此我们今天要搭建的四台zk实例组成的集群已经搞定了，有没有感觉到有了Docker 简直是神奇啊，只有亲身体会下才能感觉他的便利。</p>\n<p>欢迎在留言区讨论，今天就到这里啦，可以愉快的学习第zk的底层原理了。</p>\n<p>Docker 入门基础知识，可以看我整理的这篇文章：</p>\n<p><a href=\"https://www.jianshu.com/p/251e55d9f9b3\" target=\"_blank\" rel=\"noopener\">Docker入门（镜像、容器、仓库)</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>大家好，我是程序员小罗，这是我的技术学习笔记。</p>\n</blockquote>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>由于最近在学习zookeeper的原理，所以需要在安装一个集群来实验一些特性加深理解。</p>\n<p>但是问题来了，我们作为个人学习者，要搭建集群又没有那么多机器，要么就是搭建伪集群，或者就是需要安装一个虚拟机软件（比如vmWare），装多个虚拟机。 这两种方法我之前都试过，都不太理想，一个需要改端口，一种需要安装很多虚拟机，而且换了电脑也不好迁移。每次都得搞重复的配置，实现是太令人烦恼了；</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>综上，上述的痛点，都不是我们愿意做的。接下来，就要介绍今天我用的神器：<code>Docker</code> 。</p>\n<blockquote>\n<p> 使用Docker 基本上不用我们装环境之类的配置，比如安装 jdk。现在我们直接可以从镜像仓库拉别人制作好的镜像，简直不要太方便，直接运行即可。</p>\n</blockquote>\n<p><strong>今天我要搭建的是一个由四台 zk 构成的 zk 集群，其中一台为 Leader，两台 Follower，一台 Observer。</strong></p>\n<p><code>talk is cheap,show me your code</code>, 接着往下看吧！</p>\n<hr>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>不管你现在用的windows 还是linux 系统，首先你需要安装好Docker环境。 这里就不在叙述了，官网下载安装即可。</p>\n<p>如果对Docker 基本操作不熟悉的话，可以看我之前写的 <a href=\"https://www.jianshu.com/p/251e55d9f9b3\" target=\"_blank\" rel=\"noopener\">Docker入门（镜像、容器、仓库）</a></p>\n<p>PS: 本次所制作的镜像，可以直接保存到自己的私服，以后随时随地直接拉取运行即可。<strong>一次制作，到处运行</strong>。</p>\n<p>私服的搭建也可以看我之前写的Docker入门。</p>\n<h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><p><code>docker pull zookeeper:3.4.11</code> 这里我选择了3.4.11 版本。</p>\n<h3 id=\"设置docker固定ip\"><a href=\"#设置docker固定ip\" class=\"headerlink\" title=\"设置docker固定ip\"></a>设置docker固定ip</h3><p>因为我们要搭建的是集群环境，所以ip地址必须固定，因此需要自定义一种网络类型。</p>\n<h4 id=\"创建自定义网络类型，并且指定网段\"><a href=\"#创建自定义网络类型，并且指定网段\" class=\"headerlink\" title=\"创建自定义网络类型，并且指定网段\"></a>创建自定义网络类型，并且指定网段</h4><p><code>sudo docker network create --subnet=192.168.0.0/24 staticnet</code></p>\n<p>通过<code>docker network ls</code>可以查看到网络类型中多了一个 staticnet</p>\n<h3 id=\"使用新的网络类型创建并启动容器\"><a href=\"#使用新的网络类型创建并启动容器\" class=\"headerlink\" title=\"使用新的网络类型创建并启动容器\"></a>使用新的网络类型创建并启动容器</h3><pre><code class=\"shell\">chong@L MINGW64 ~\n$ docker run --name zookeeper-1 --restart always --net staticnet --ip 192.168.0.10 -d zookeeper:3.4.11\n61a331b2584b6ef949e2183892c5a73a2e214b7071d4879993f7cbba41c836ed\n</code></pre>\n<p>通过<code>docker inspect</code>可以查看容器 ip为<code>192.168.0.10</code>，关闭容器并重启，发现容器ip并未发生改变。</p>\n<h3 id=\"进入容器进行配置\"><a href=\"#进入容器进行配置\" class=\"headerlink\" title=\"进入容器进行配置\"></a>进入容器进行配置</h3><p>由于容器在后台运行，因此我们需要进入容器，有三种方式，有兴趣的可以看我之前写的 <a href=\"https://www.jianshu.com/p/251e55d9f9b3\" target=\"_blank\" rel=\"noopener\">Docker入门（镜像、容器、仓库）</a></p>\n<pre><code class=\"shell\">$ docker exec -ti 61a bash   # 61a为容器id</code></pre>\n<p>登入后，我们只需要做2件事：</p>\n<ol>\n<li><strong>修改zoo.cfg</strong></li>\n</ol>\n<p>在 zoo.cfg 文件中添加 zk 集群节点列表</p>\n<pre><code class=\"shell\">bash-4.4# vi /conf/zoo.cfg\nclientPort=2181\ndataDir=/data\ndataLogDir=/datalog\ntickTime=2000\ninitLimit=5\nsyncLimit=2\nmaxClientCnxns=60\nserver.1=192.168.0.10:2888:3888\nserver.2=192.168.0.11:2888:3888\nserver.3=192.168.0.12:2888:3888\nserver.4=192.168.0.13:2888:3888:observer\n</code></pre>\n<ol start=\"2\">\n<li><strong>创建</strong> <strong>myid</strong> <strong>文件</strong></li>\n</ol>\n<p>在一步的zoo.cfg文件中我们可以看到dataDir的路径，在/data 目录中创建表示当前主机编号的 myid 文件。该主机编号要与 zoo.cfg 文件中设置的编号一致。</p>\n<pre><code class=\"shell\">bash-4.4# echo 1 &gt; /data/myid</code></pre>\n<h3 id=\"保存修改后的镜像\"><a href=\"#保存修改后的镜像\" class=\"headerlink\" title=\"保存修改后的镜像\"></a>保存修改后的镜像</h3><p>因为我们上面对正在运行的容器做了三点修改，这也正是我们需要的集群配置，所以我们要将这个容器制作成镜像,如下操作：</p>\n<pre><code class=\"shell\">$ docker commit -m &quot;create zk1&quot; -a &quot;coderluo&quot; 61a zookeeper-1:3.4.11\nsha256:455b27d32c83365790b7b6eff7d58021556858390d28d27b07aca206e83c507c\n\nchong@L MINGW64 ~\n$ docker images\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nzookeeper-1                  3.4.11              455b27d32c83        8 seconds ago       146MB\n39.108.186.135:5000/ubuntu   v1                  a2a15febcdf3        13 days ago         64.2MB\nzookeeper                    3.4.11              56d414270ae3        19 months ago       146MB\n</code></pre>\n<p>使用<code>docekr commit</code> 进行基于已有的镜像进行创建，我的上一篇Docker入门中也有写。然后通过<code>docker images</code> 查看到zookeeper-1 这个镜像已经存在了。</p>\n<p>到这里一台镜像已经制作好了，接下来就是一样的事情重复干几遍:</p>\n<ul>\n<li>进入容器</li>\n<li>修改myid</li>\n<li>保存修改制作为新镜像</li>\n</ul>\n<p><strong>查询容器id</strong></p>\n<pre><code class=\"shell\">$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                          NAMES\n61a331b2584b        zookeeper:3.4.11    &quot;/docker-entrypoint.…&quot;   About an hour ago   Up 12 minutes       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-1\n</code></pre>\n<p><strong>进入容器执行修改(第2,3台都执行此操作)：</strong></p>\n<pre><code class=\"shell\">$ docker exec -ti 61a bash\nbash-4.4# echo 2 &gt; /data/myid\nbash-4.4# cat /data/myid\n2\nbash-4.4# exit\nexit\n</code></pre>\n<p><strong>创建新的镜像(第2,3台都执行此操作)：</strong></p>\n<pre><code class=\"shell\">$ docker commit -m &quot;create zookeeper-2&quot; -a &quot;coderluo&quot; 61a zookeeper-2:3.4.11\nsha256:c775aff13fd3b2fc30066f6fc5f8a5ee429be3052b790c8e02cf74b5e4bf71e9</code></pre>\n<p>完成后，这里要注意，第四台主机因为我们要让他作为Observer，所以他需要在zoo.cfg中增加一行配置：</p>\n<p> <code>peerType=observer</code></p>\n<p><img src=\"http://media.coderluo.top/img/1.png%3F1\" alt=\"1\"></p>\n<p>然后在执行上面和第2,3台机器一样的操作。</p>\n<p>最后我们查看当前所有的镜像，不出意外的话下图展示的你也都有了：</p>\n<p><img src=\"http://media.coderluo.top/zk/2.png\" alt=\"2\"></p>\n<p>到这里，今天的学习就要接近尾声了，最后一步</p>\n<h3 id=\"依次启动4台zookeeper实例\"><a href=\"#依次启动4台zookeeper实例\" class=\"headerlink\" title=\"依次启动4台zookeeper实例\"></a>依次启动4台zookeeper实例</h3><p>直接按照我下面的命令一次执行即可：</p>\n<pre><code class=\"shell\">chong@L MINGW64 ~\n$  docker run --name zookeeper-1 --restart always --net staticnet --ip 192.168.0.10 -d zookeeper-1:3.4.11 #第一台\n35acd4f798c8154047f30af184145d8b4124ec8a4e8e4a549db0d333a1c33785\nchong@L MINGW64 ~\n$  docker run --name zookeeper-2 --restart always --net staticnet --ip 192.168.0.11 -d zookeeper-2:3.4.11 #第二台\n7ef30c809183dc223e42e891880ad8c85381fac11d15da5c0455400b915c77bb\n\nchong@L MINGW64 ~\n$  docker run --name zookeeper-3 --restart always --net staticnet --ip 192.168.0.12 -d zookeeper-3:3.4.11 #第三台\nf138451dd21ce5217eb6e4472116b3ffa32e9ea2afbcaae44ee4d633040299f9\nchong@L MINGW64 ~\n$  docker run --name zookeeper-4 --restart always --net staticnet --ip 192.168.0.13 -d zookeeper-4:3.4.11 #第四台\nc662d3438db74414c9b0178bc756b6cf96cd0458cbc226e8854da4a06337d656\n</code></pre>\n<p>查看运行状态：</p>\n<pre><code class=\"shell\">$ docker ps -a\nCONTAINER ID        IMAGE                COMMAND                  CREATED              STATUS              PORTS                          NAMES\nc662d3438db7        zookeeper-4:3.4.11   &quot;/docker-entrypoint.…&quot;   6 seconds ago        Up 4 seconds        2181/tcp, 2888/tcp, 3888/tcp   zookeeper-4\nf138451dd21c        zookeeper-3:3.4.11   &quot;/docker-entrypoint.…&quot;   24 seconds ago       Up 23 seconds       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-3\n7ef30c809183        zookeeper-2:3.4.11   &quot;/docker-entrypoint.…&quot;   41 seconds ago       Up 39 seconds       2181/tcp, 2888/tcp, 3888/tcp   zookeeper-2\n35acd4f798c8        zookeeper-1:3.4.11   &quot;/docker-entrypoint.…&quot;   About a minute ago   Up About a minute   2181/tcp, 2888/tcp, 3888/tcp   zookeeper-1\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此我们今天要搭建的四台zk实例组成的集群已经搞定了，有没有感觉到有了Docker 简直是神奇啊，只有亲身体会下才能感觉他的便利。</p>\n<p>欢迎在留言区讨论，今天就到这里啦，可以愉快的学习第zk的底层原理了。</p>\n<p>Docker 入门基础知识，可以看我整理的这篇文章：</p>\n<p><a href=\"https://www.jianshu.com/p/251e55d9f9b3\" target=\"_blank\" rel=\"noopener\">Docker入门（镜像、容器、仓库)</a></p>\n"},{"title":"Zookeeper深度学习1-Paxos算法详解","date":"2019-09-05T11:45:25.000Z","img":"http://media.coderluo.top/img/20190928015012.png","_content":"\n\n\n*本片文章将开启对分布式协调服务zk的学习，目前规划是从理论基础开始逐步到源码解析，深入学习这个在分布式系统中起着至关作用的组件。*\n\n对于 zk 理论的学习，最重要也是最难的知识点就是 Paxos 算法。所以我们首先学习 Paxos 算法。\n\n-------------\n\n## 算法简介\n\n>Paxos 算法是莱斯利·兰伯特(Leslie Lamport)1990 年提出的一种基于消息传递的、具有高 容错性的一致性算法。Google Chubby 的作者 Mike Burrows 说过，世上只有一种一致性算法， 那就是 Paxos，所有其他一致性算法都是 Paxos 算法的不完整版。Paxos 算法是一种公认的晦 涩难懂的算法，并且工程实现上也具有很大难度。较有名的 Paxos 工程实现有 Google Chubby、 ZAB、微信的 PhxPaxos 等\n\nPaxos 算法是用于解决什么问题的呢? Paxos 算法要解决的问题是，在分布式系统中如何 就某个决议达成一致。\n\n## Paxos与拜占庭将军问题\n\n\n\n> 拜占庭将军问题是由 Paxos 算法作者莱斯利·兰伯特提出的点对点通信中的基本问题。该 问题要说明的含义是，<font color='red'>在不可靠信道上试图通过消息传递的方式达到一致性是不可能的</font>。所 以，Paxos 算法的前提是<font color='red'>不存在拜占庭将军问题</font>，即信道是安全的、可靠的，集群节点间传 递的消息是不会被篡改的。\n\n一般情况下，分布式系统中各个节点间采用两种通讯模型:**共享内存(Shared Memory)**、**消息传递(Messages Passing)**。而 Paxos 是基于消息传递通讯模型的。\n\n## 算法描述\n\n### 三种角色\n\n在 Paxos 算法中有三种角色，分别具有三种不同的行为。但很多时候，一个进程可能同 时充当着多种角色。 \n\n- Proposer:提案者，提出提案（Proposal）；\n- Acceptor:表决者；\n- Learner:学习者(同步者，即Proposer决议形成，将所有形成的决议发送给Learners)\n\n### Paxos算法一致性\n\nPaxos 算法的一致性主要体现在以下几点:\n\n- 每个提案者在提出提案时都会首先获取到一个具有全局唯一性的、递增的提案编号N，即在整个集群中是唯一的编号 N，然后将该编号赋予其要提出的提案。\n- 每个表决者在accept某提案后，会将该提案的编号N记录在本地，这样每个表决者中保存的已经被 accept 的提案中会存在一个编号最大的提案，其编号假设为 maxN。每个表决者仅会 accept 编号大于自己本地 maxN 的提案。\n- 在众多提案中最终只能有一个提案被选定。\n- 一旦一个提案被选定，则其它服务器会主动同步(Learn)该提案到本地。\n- 没有提案被提出则不会有提案被选定。\n\n\n\n### Paxos算法流程\n\n\n\nPaxos 算法的执行过程划分为两个阶段:**准备阶段 prepare** 与**接受阶段 accept**。Ps:Learn阶段之前决议已经形成。\n\n由于Paxos算法是晦涩难懂的，这里我将以自己的理解来做整个描述，虽然可能在严谨性上会差强人意，但是可读性会提高，希望可以给大家更轻松的阅读体验。\n\n#### A、Prepare阶段\n\n\n\n1. 提案者(Proposer)准备提交一个编号为 N 的提议，于是其首先向所有表决者(Acceptor)发 送 prepare(N)请求，用于试探集群是否支持该编号的提议。 如果这里不好理解我们可以试图理解为提议者拿着钞票去贿赂“表决者（Accept）”\n2. 每个表决者（Acceptor）都保存者当前贿赂自己的最大金额数，即（maxN），当每个表决者接收到贿赂自己的提议时，会比较贿赂金额与maxN的值。有以下几种情况：\n   1. 若 N 小于 maxN，则说明该提议已过时（钱少不接受），当前表决者采取不回应或回应 Error 的方 式来拒绝该 prepare 请求；\n   2. 若 N 大于 maxN，则说明该提议是可以接受的（毕竟谁给的钱多听谁的），当前表决者会首先将该 N（当前贿赂金额） 记录下来， 并将其曾经已经 accept 的编号最大的提案 Proposal(myid,maxN,value)反馈给提案者， 以向提案者展示自己支持的提案意愿。其中第一个参数 myid 表示表决者 Acceptor 的标识 id，第二个参数表示其曾接受的提案的最大编号 maxN（前任领导贿赂的金额），第三个参数表示该 提案的真正内容 value（前任领导提议的内容）。当然，若当前表决者还未曾 accept 过任何提议，则会将 Proposal(myid,null,null)反馈给提案者。\n   3. 在 prepare 阶段 N 不可能等于 maxN。这是由 N 的生成机制决定的。要获得 N 的值， 其必定会在原来数值的基础上采用同步锁方式增一。 \n\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7ee1de1blj30qo0hg757.jpg)\n\n\n\n> 这里需要说明下，为什么在表决者（Acceptor）判断贿赂金额大于当前保存的最大金额时会将前任已经保存的金额和提案内容返回给提案者，这是因为提案者（Proposer），在收到表决者的答复后，需要判断谁是最有钱的提案者，便推举它为领袖 (修改自己的提案)。\n\n#### B、Accept阶段\n\n1. 当提案者(Proposer)发出 prepare(N)后，若收到了超过半数的表决者(Accepter)的反馈， 那么该提案者就会将其真正的提案 Proposal(myid,N,value)发送给所有的表决者。\n2. 当表决者(Acceptor)接收到提案者发送的 Proposal(myid,N,value)提案后，会再次拿出自己 曾经 accept 过的提议中的最大编号 maxN，或曾经记录下的 prepare 的最大编号，让 N 与它们进行比较，若 N **大于等于**这两个编号，则当前表决者 accept 该提案，并反馈给 提案者。若 N 小于这两个编号，则表决者采取不回应或回应 Error 的方式来拒绝该提议。\n3. 若提案者没有接收到超过半数的表决者的 accept 反馈（中间有别人以更多的金额贿赂了它），则有两种可能的结果产生。一 是放弃该提案，不再提出；二是重新进入 prepare 阶段，递增提案号，重新提出 prepare 请求。\n4. 若提案者接收到的反馈数量超过了半数，则其会向外广播两类信息：\n   1. 向曾 accept 其提案的表决者发送“可执行数据同步信号”，即让它们执行其曾接收到的提案；\n   2. 向未曾向其发送 accept 反馈的表决者发送“提案 + 可执行数据同步信号”，即让 它们接受到该提案后马上执行。\n\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7ee1h8hxej30j80ihmym.jpg)\n\n\n\n上述的过程中，如果某一个提议收到了大多数的表决者（Acceptor）的响应后（提案者（Proposal）中的N必须大于当前maxN才会响应），则提案通过，向所有表决者以及leaner发送同步数据，达成数据一致性。\n\n\n\n当然上面只是简单的描述，真是的算法场景更复杂，所有提议者，决策者身份信息都是交叉的，如果提议者、接受者的数量是4个,5个。。。但是你按照上面的思路进行推演，最终会发现最终是唯一一个提议获取多数票而胜出，从而其他提议者和决策者同步此提议。\n\n## 活锁问题\n\n\n\n上面的流程可能会引发活锁问题，那么什么是活锁呢？  \n\n> 活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试—失败—尝试—失败的过程。处于活锁的实体是在不断的改变状态，活锁有可能自行解开。\n\n\n\n那么上面的行为是怎么会引发活锁呢？接下来我们一起来分析下：\n\n在整个选举过程中，每个人谁先来谁后到，“接受者”什么时间能够接到“提议者”的信息，是完全不可控的；\n\n假设，第一个提案者A（Proposal）已经成功过了prepare阶段，准备向Acceptors广播发送Accept时，有一个更有钱土豪提案者B也向决议者（Acceptors）广播了prepare请求并在A的accept请求到之前发送给了决议者，这时毫无疑问，决议者会接收该请求，并记录在册。这时候，A的accept请求姗姗来迟，决议者对比此proposal的贿赂金额已经小于当前记录的prepare最大编号，因此不响应给提议者A，则提议者A收到的响应为过半，此提案废弃。这时它又用大于Proposer A的贿赂金额重新发起 preapre广播请求，这时提议者B的accept请求还没有到达决议者（Acceptors），因此Acceptor也接受了该prepare请求，将其记录在案，在之后提议者B发出的accept请求到达，决议者发现贿赂金额已经小于当前prepare的最大贿赂金额，因此拒绝响应，这样就会形成活锁问题。\n\n\n\n## 总结\n\n本篇文章故事讲到这里就基本上结束了，下面我们来总结一下，其实Paxos算法主要包括两个阶段：\n\n1. prepare阶段，这个阶段主要是准备一个编号为N的提案，首先向所有决议者（Acceptor）发送prepare请求，用于试探是否支持该编号的提议。\n2. accept阶段，当一阶段提议收到了超过半数的响应，则开始正式下发提案内容proposal，如果过半则提案提交成功，广播给所有learner。\n\n注意：编号（贿赂金额）很重要，无论在哪个阶段，编号（贿赂金额）小的，都会被鄙视（被拒绝）；\n\n\n\n今天的分享就到这里了，这也是我学习Paxos算法过程中的一些心得，希望对初学者有些启发。\n\n后续我们对继续深入学习Zookeeper之**Zab协议（Paxos算法的工业实现）**，今天提到的活锁问题，也会得到相应的解决，敬请期待。\n\n系列文章：\n- [Zookeeper深度学习2-Zab协议详解](http://coderluo.top/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-2-zab-xie-yi-xiang-jie/)\n- [Zookeeper深度学习3-源码分析-Leader选举](http://coderluo.top/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-3-yuan-ma-fen-xi-leader-xuan-ju/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/zookeeper/Zookeeper深度学习1-Paxos算法详解.md","raw":"---\ntitle: 'Zookeeper深度学习1-Paxos算法详解'\ntags:\n  - Paxos\n  - Zookeeper\ndate: 2019-09-05 19:45:25\ncategories: Zookeeper\nimg: http://media.coderluo.top/img/20190928015012.png\n---\n\n\n\n*本片文章将开启对分布式协调服务zk的学习，目前规划是从理论基础开始逐步到源码解析，深入学习这个在分布式系统中起着至关作用的组件。*\n\n对于 zk 理论的学习，最重要也是最难的知识点就是 Paxos 算法。所以我们首先学习 Paxos 算法。\n\n-------------\n\n## 算法简介\n\n>Paxos 算法是莱斯利·兰伯特(Leslie Lamport)1990 年提出的一种基于消息传递的、具有高 容错性的一致性算法。Google Chubby 的作者 Mike Burrows 说过，世上只有一种一致性算法， 那就是 Paxos，所有其他一致性算法都是 Paxos 算法的不完整版。Paxos 算法是一种公认的晦 涩难懂的算法，并且工程实现上也具有很大难度。较有名的 Paxos 工程实现有 Google Chubby、 ZAB、微信的 PhxPaxos 等\n\nPaxos 算法是用于解决什么问题的呢? Paxos 算法要解决的问题是，在分布式系统中如何 就某个决议达成一致。\n\n## Paxos与拜占庭将军问题\n\n\n\n> 拜占庭将军问题是由 Paxos 算法作者莱斯利·兰伯特提出的点对点通信中的基本问题。该 问题要说明的含义是，<font color='red'>在不可靠信道上试图通过消息传递的方式达到一致性是不可能的</font>。所 以，Paxos 算法的前提是<font color='red'>不存在拜占庭将军问题</font>，即信道是安全的、可靠的，集群节点间传 递的消息是不会被篡改的。\n\n一般情况下，分布式系统中各个节点间采用两种通讯模型:**共享内存(Shared Memory)**、**消息传递(Messages Passing)**。而 Paxos 是基于消息传递通讯模型的。\n\n## 算法描述\n\n### 三种角色\n\n在 Paxos 算法中有三种角色，分别具有三种不同的行为。但很多时候，一个进程可能同 时充当着多种角色。 \n\n- Proposer:提案者，提出提案（Proposal）；\n- Acceptor:表决者；\n- Learner:学习者(同步者，即Proposer决议形成，将所有形成的决议发送给Learners)\n\n### Paxos算法一致性\n\nPaxos 算法的一致性主要体现在以下几点:\n\n- 每个提案者在提出提案时都会首先获取到一个具有全局唯一性的、递增的提案编号N，即在整个集群中是唯一的编号 N，然后将该编号赋予其要提出的提案。\n- 每个表决者在accept某提案后，会将该提案的编号N记录在本地，这样每个表决者中保存的已经被 accept 的提案中会存在一个编号最大的提案，其编号假设为 maxN。每个表决者仅会 accept 编号大于自己本地 maxN 的提案。\n- 在众多提案中最终只能有一个提案被选定。\n- 一旦一个提案被选定，则其它服务器会主动同步(Learn)该提案到本地。\n- 没有提案被提出则不会有提案被选定。\n\n\n\n### Paxos算法流程\n\n\n\nPaxos 算法的执行过程划分为两个阶段:**准备阶段 prepare** 与**接受阶段 accept**。Ps:Learn阶段之前决议已经形成。\n\n由于Paxos算法是晦涩难懂的，这里我将以自己的理解来做整个描述，虽然可能在严谨性上会差强人意，但是可读性会提高，希望可以给大家更轻松的阅读体验。\n\n#### A、Prepare阶段\n\n\n\n1. 提案者(Proposer)准备提交一个编号为 N 的提议，于是其首先向所有表决者(Acceptor)发 送 prepare(N)请求，用于试探集群是否支持该编号的提议。 如果这里不好理解我们可以试图理解为提议者拿着钞票去贿赂“表决者（Accept）”\n2. 每个表决者（Acceptor）都保存者当前贿赂自己的最大金额数，即（maxN），当每个表决者接收到贿赂自己的提议时，会比较贿赂金额与maxN的值。有以下几种情况：\n   1. 若 N 小于 maxN，则说明该提议已过时（钱少不接受），当前表决者采取不回应或回应 Error 的方 式来拒绝该 prepare 请求；\n   2. 若 N 大于 maxN，则说明该提议是可以接受的（毕竟谁给的钱多听谁的），当前表决者会首先将该 N（当前贿赂金额） 记录下来， 并将其曾经已经 accept 的编号最大的提案 Proposal(myid,maxN,value)反馈给提案者， 以向提案者展示自己支持的提案意愿。其中第一个参数 myid 表示表决者 Acceptor 的标识 id，第二个参数表示其曾接受的提案的最大编号 maxN（前任领导贿赂的金额），第三个参数表示该 提案的真正内容 value（前任领导提议的内容）。当然，若当前表决者还未曾 accept 过任何提议，则会将 Proposal(myid,null,null)反馈给提案者。\n   3. 在 prepare 阶段 N 不可能等于 maxN。这是由 N 的生成机制决定的。要获得 N 的值， 其必定会在原来数值的基础上采用同步锁方式增一。 \n\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7ee1de1blj30qo0hg757.jpg)\n\n\n\n> 这里需要说明下，为什么在表决者（Acceptor）判断贿赂金额大于当前保存的最大金额时会将前任已经保存的金额和提案内容返回给提案者，这是因为提案者（Proposer），在收到表决者的答复后，需要判断谁是最有钱的提案者，便推举它为领袖 (修改自己的提案)。\n\n#### B、Accept阶段\n\n1. 当提案者(Proposer)发出 prepare(N)后，若收到了超过半数的表决者(Accepter)的反馈， 那么该提案者就会将其真正的提案 Proposal(myid,N,value)发送给所有的表决者。\n2. 当表决者(Acceptor)接收到提案者发送的 Proposal(myid,N,value)提案后，会再次拿出自己 曾经 accept 过的提议中的最大编号 maxN，或曾经记录下的 prepare 的最大编号，让 N 与它们进行比较，若 N **大于等于**这两个编号，则当前表决者 accept 该提案，并反馈给 提案者。若 N 小于这两个编号，则表决者采取不回应或回应 Error 的方式来拒绝该提议。\n3. 若提案者没有接收到超过半数的表决者的 accept 反馈（中间有别人以更多的金额贿赂了它），则有两种可能的结果产生。一 是放弃该提案，不再提出；二是重新进入 prepare 阶段，递增提案号，重新提出 prepare 请求。\n4. 若提案者接收到的反馈数量超过了半数，则其会向外广播两类信息：\n   1. 向曾 accept 其提案的表决者发送“可执行数据同步信号”，即让它们执行其曾接收到的提案；\n   2. 向未曾向其发送 accept 反馈的表决者发送“提案 + 可执行数据同步信号”，即让 它们接受到该提案后马上执行。\n\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7ee1h8hxej30j80ihmym.jpg)\n\n\n\n上述的过程中，如果某一个提议收到了大多数的表决者（Acceptor）的响应后（提案者（Proposal）中的N必须大于当前maxN才会响应），则提案通过，向所有表决者以及leaner发送同步数据，达成数据一致性。\n\n\n\n当然上面只是简单的描述，真是的算法场景更复杂，所有提议者，决策者身份信息都是交叉的，如果提议者、接受者的数量是4个,5个。。。但是你按照上面的思路进行推演，最终会发现最终是唯一一个提议获取多数票而胜出，从而其他提议者和决策者同步此提议。\n\n## 活锁问题\n\n\n\n上面的流程可能会引发活锁问题，那么什么是活锁呢？  \n\n> 活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试—失败—尝试—失败的过程。处于活锁的实体是在不断的改变状态，活锁有可能自行解开。\n\n\n\n那么上面的行为是怎么会引发活锁呢？接下来我们一起来分析下：\n\n在整个选举过程中，每个人谁先来谁后到，“接受者”什么时间能够接到“提议者”的信息，是完全不可控的；\n\n假设，第一个提案者A（Proposal）已经成功过了prepare阶段，准备向Acceptors广播发送Accept时，有一个更有钱土豪提案者B也向决议者（Acceptors）广播了prepare请求并在A的accept请求到之前发送给了决议者，这时毫无疑问，决议者会接收该请求，并记录在册。这时候，A的accept请求姗姗来迟，决议者对比此proposal的贿赂金额已经小于当前记录的prepare最大编号，因此不响应给提议者A，则提议者A收到的响应为过半，此提案废弃。这时它又用大于Proposer A的贿赂金额重新发起 preapre广播请求，这时提议者B的accept请求还没有到达决议者（Acceptors），因此Acceptor也接受了该prepare请求，将其记录在案，在之后提议者B发出的accept请求到达，决议者发现贿赂金额已经小于当前prepare的最大贿赂金额，因此拒绝响应，这样就会形成活锁问题。\n\n\n\n## 总结\n\n本篇文章故事讲到这里就基本上结束了，下面我们来总结一下，其实Paxos算法主要包括两个阶段：\n\n1. prepare阶段，这个阶段主要是准备一个编号为N的提案，首先向所有决议者（Acceptor）发送prepare请求，用于试探是否支持该编号的提议。\n2. accept阶段，当一阶段提议收到了超过半数的响应，则开始正式下发提案内容proposal，如果过半则提案提交成功，广播给所有learner。\n\n注意：编号（贿赂金额）很重要，无论在哪个阶段，编号（贿赂金额）小的，都会被鄙视（被拒绝）；\n\n\n\n今天的分享就到这里了，这也是我学习Paxos算法过程中的一些心得，希望对初学者有些启发。\n\n后续我们对继续深入学习Zookeeper之**Zab协议（Paxos算法的工业实现）**，今天提到的活锁问题，也会得到相应的解决，敬请期待。\n\n系列文章：\n- [Zookeeper深度学习2-Zab协议详解](http://coderluo.top/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-2-zab-xie-yi-xiang-jie/)\n- [Zookeeper深度学习3-源码分析-Leader选举](http://coderluo.top/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-3-yuan-ma-fen-xi-leader-xuan-ju/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"zookeeper/Zookeeper深度学习1-Paxos算法详解","published":1,"updated":"2019-09-28T15:55:38.185Z","_id":"ck13pbo58000gc3o63vtkrs2v","comments":1,"layout":"post","photos":[],"link":"","content":"<p><em>本片文章将开启对分布式协调服务zk的学习，目前规划是从理论基础开始逐步到源码解析，深入学习这个在分布式系统中起着至关作用的组件。</em></p>\n<p>对于 zk 理论的学习，最重要也是最难的知识点就是 Paxos 算法。所以我们首先学习 Paxos 算法。</p>\n<hr>\n<h2 id=\"算法简介\"><a href=\"#算法简介\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h2><blockquote>\n<p>Paxos 算法是莱斯利·兰伯特(Leslie Lamport)1990 年提出的一种基于消息传递的、具有高 容错性的一致性算法。Google Chubby 的作者 Mike Burrows 说过，世上只有一种一致性算法， 那就是 Paxos，所有其他一致性算法都是 Paxos 算法的不完整版。Paxos 算法是一种公认的晦 涩难懂的算法，并且工程实现上也具有很大难度。较有名的 Paxos 工程实现有 Google Chubby、 ZAB、微信的 PhxPaxos 等</p>\n</blockquote>\n<p>Paxos 算法是用于解决什么问题的呢? Paxos 算法要解决的问题是，在分布式系统中如何 就某个决议达成一致。</p>\n<h2 id=\"Paxos与拜占庭将军问题\"><a href=\"#Paxos与拜占庭将军问题\" class=\"headerlink\" title=\"Paxos与拜占庭将军问题\"></a>Paxos与拜占庭将军问题</h2><blockquote>\n<p>拜占庭将军问题是由 Paxos 算法作者莱斯利·兰伯特提出的点对点通信中的基本问题。该 问题要说明的含义是，<font color=\"red\">在不可靠信道上试图通过消息传递的方式达到一致性是不可能的</font>。所 以，Paxos 算法的前提是<font color=\"red\">不存在拜占庭将军问题</font>，即信道是安全的、可靠的，集群节点间传 递的消息是不会被篡改的。</p>\n</blockquote>\n<p>一般情况下，分布式系统中各个节点间采用两种通讯模型:<strong>共享内存(Shared Memory)</strong>、<strong>消息传递(Messages Passing)</strong>。而 Paxos 是基于消息传递通讯模型的。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><h3 id=\"三种角色\"><a href=\"#三种角色\" class=\"headerlink\" title=\"三种角色\"></a>三种角色</h3><p>在 Paxos 算法中有三种角色，分别具有三种不同的行为。但很多时候，一个进程可能同 时充当着多种角色。 </p>\n<ul>\n<li>Proposer:提案者，提出提案（Proposal）；</li>\n<li>Acceptor:表决者；</li>\n<li>Learner:学习者(同步者，即Proposer决议形成，将所有形成的决议发送给Learners)</li>\n</ul>\n<h3 id=\"Paxos算法一致性\"><a href=\"#Paxos算法一致性\" class=\"headerlink\" title=\"Paxos算法一致性\"></a>Paxos算法一致性</h3><p>Paxos 算法的一致性主要体现在以下几点:</p>\n<ul>\n<li>每个提案者在提出提案时都会首先获取到一个具有全局唯一性的、递增的提案编号N，即在整个集群中是唯一的编号 N，然后将该编号赋予其要提出的提案。</li>\n<li>每个表决者在accept某提案后，会将该提案的编号N记录在本地，这样每个表决者中保存的已经被 accept 的提案中会存在一个编号最大的提案，其编号假设为 maxN。每个表决者仅会 accept 编号大于自己本地 maxN 的提案。</li>\n<li>在众多提案中最终只能有一个提案被选定。</li>\n<li>一旦一个提案被选定，则其它服务器会主动同步(Learn)该提案到本地。</li>\n<li>没有提案被提出则不会有提案被选定。</li>\n</ul>\n<h3 id=\"Paxos算法流程\"><a href=\"#Paxos算法流程\" class=\"headerlink\" title=\"Paxos算法流程\"></a>Paxos算法流程</h3><p>Paxos 算法的执行过程划分为两个阶段:<strong>准备阶段 prepare</strong> 与<strong>接受阶段 accept</strong>。Ps:Learn阶段之前决议已经形成。</p>\n<p>由于Paxos算法是晦涩难懂的，这里我将以自己的理解来做整个描述，虽然可能在严谨性上会差强人意，但是可读性会提高，希望可以给大家更轻松的阅读体验。</p>\n<h4 id=\"A、Prepare阶段\"><a href=\"#A、Prepare阶段\" class=\"headerlink\" title=\"A、Prepare阶段\"></a>A、Prepare阶段</h4><ol>\n<li>提案者(Proposer)准备提交一个编号为 N 的提议，于是其首先向所有表决者(Acceptor)发 送 prepare(N)请求，用于试探集群是否支持该编号的提议。 如果这里不好理解我们可以试图理解为提议者拿着钞票去贿赂“表决者（Accept）”</li>\n<li>每个表决者（Acceptor）都保存者当前贿赂自己的最大金额数，即（maxN），当每个表决者接收到贿赂自己的提议时，会比较贿赂金额与maxN的值。有以下几种情况：<ol>\n<li>若 N 小于 maxN，则说明该提议已过时（钱少不接受），当前表决者采取不回应或回应 Error 的方 式来拒绝该 prepare 请求；</li>\n<li>若 N 大于 maxN，则说明该提议是可以接受的（毕竟谁给的钱多听谁的），当前表决者会首先将该 N（当前贿赂金额） 记录下来， 并将其曾经已经 accept 的编号最大的提案 Proposal(myid,maxN,value)反馈给提案者， 以向提案者展示自己支持的提案意愿。其中第一个参数 myid 表示表决者 Acceptor 的标识 id，第二个参数表示其曾接受的提案的最大编号 maxN（前任领导贿赂的金额），第三个参数表示该 提案的真正内容 value（前任领导提议的内容）。当然，若当前表决者还未曾 accept 过任何提议，则会将 Proposal(myid,null,null)反馈给提案者。</li>\n<li>在 prepare 阶段 N 不可能等于 maxN。这是由 N 的生成机制决定的。要获得 N 的值， 其必定会在原来数值的基础上采用同步锁方式增一。 </li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7ee1de1blj30qo0hg757.jpg\" alt=\"\"></p>\n<blockquote>\n<p>这里需要说明下，为什么在表决者（Acceptor）判断贿赂金额大于当前保存的最大金额时会将前任已经保存的金额和提案内容返回给提案者，这是因为提案者（Proposer），在收到表决者的答复后，需要判断谁是最有钱的提案者，便推举它为领袖 (修改自己的提案)。</p>\n</blockquote>\n<h4 id=\"B、Accept阶段\"><a href=\"#B、Accept阶段\" class=\"headerlink\" title=\"B、Accept阶段\"></a>B、Accept阶段</h4><ol>\n<li>当提案者(Proposer)发出 prepare(N)后，若收到了超过半数的表决者(Accepter)的反馈， 那么该提案者就会将其真正的提案 Proposal(myid,N,value)发送给所有的表决者。</li>\n<li>当表决者(Acceptor)接收到提案者发送的 Proposal(myid,N,value)提案后，会再次拿出自己 曾经 accept 过的提议中的最大编号 maxN，或曾经记录下的 prepare 的最大编号，让 N 与它们进行比较，若 N <strong>大于等于</strong>这两个编号，则当前表决者 accept 该提案，并反馈给 提案者。若 N 小于这两个编号，则表决者采取不回应或回应 Error 的方式来拒绝该提议。</li>\n<li>若提案者没有接收到超过半数的表决者的 accept 反馈（中间有别人以更多的金额贿赂了它），则有两种可能的结果产生。一 是放弃该提案，不再提出；二是重新进入 prepare 阶段，递增提案号，重新提出 prepare 请求。</li>\n<li>若提案者接收到的反馈数量超过了半数，则其会向外广播两类信息：<ol>\n<li>向曾 accept 其提案的表决者发送“可执行数据同步信号”，即让它们执行其曾接收到的提案；</li>\n<li>向未曾向其发送 accept 反馈的表决者发送“提案 + 可执行数据同步信号”，即让 它们接受到该提案后马上执行。</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7ee1h8hxej30j80ihmym.jpg\" alt=\"\"></p>\n<p>上述的过程中，如果某一个提议收到了大多数的表决者（Acceptor）的响应后（提案者（Proposal）中的N必须大于当前maxN才会响应），则提案通过，向所有表决者以及leaner发送同步数据，达成数据一致性。</p>\n<p>当然上面只是简单的描述，真是的算法场景更复杂，所有提议者，决策者身份信息都是交叉的，如果提议者、接受者的数量是4个,5个。。。但是你按照上面的思路进行推演，最终会发现最终是唯一一个提议获取多数票而胜出，从而其他提议者和决策者同步此提议。</p>\n<h2 id=\"活锁问题\"><a href=\"#活锁问题\" class=\"headerlink\" title=\"活锁问题\"></a>活锁问题</h2><p>上面的流程可能会引发活锁问题，那么什么是活锁呢？  </p>\n<blockquote>\n<p>活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试—失败—尝试—失败的过程。处于活锁的实体是在不断的改变状态，活锁有可能自行解开。</p>\n</blockquote>\n<p>那么上面的行为是怎么会引发活锁呢？接下来我们一起来分析下：</p>\n<p>在整个选举过程中，每个人谁先来谁后到，“接受者”什么时间能够接到“提议者”的信息，是完全不可控的；</p>\n<p>假设，第一个提案者A（Proposal）已经成功过了prepare阶段，准备向Acceptors广播发送Accept时，有一个更有钱土豪提案者B也向决议者（Acceptors）广播了prepare请求并在A的accept请求到之前发送给了决议者，这时毫无疑问，决议者会接收该请求，并记录在册。这时候，A的accept请求姗姗来迟，决议者对比此proposal的贿赂金额已经小于当前记录的prepare最大编号，因此不响应给提议者A，则提议者A收到的响应为过半，此提案废弃。这时它又用大于Proposer A的贿赂金额重新发起 preapre广播请求，这时提议者B的accept请求还没有到达决议者（Acceptors），因此Acceptor也接受了该prepare请求，将其记录在案，在之后提议者B发出的accept请求到达，决议者发现贿赂金额已经小于当前prepare的最大贿赂金额，因此拒绝响应，这样就会形成活锁问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章故事讲到这里就基本上结束了，下面我们来总结一下，其实Paxos算法主要包括两个阶段：</p>\n<ol>\n<li>prepare阶段，这个阶段主要是准备一个编号为N的提案，首先向所有决议者（Acceptor）发送prepare请求，用于试探是否支持该编号的提议。</li>\n<li>accept阶段，当一阶段提议收到了超过半数的响应，则开始正式下发提案内容proposal，如果过半则提案提交成功，广播给所有learner。</li>\n</ol>\n<p>注意：编号（贿赂金额）很重要，无论在哪个阶段，编号（贿赂金额）小的，都会被鄙视（被拒绝）；</p>\n<p>今天的分享就到这里了，这也是我学习Paxos算法过程中的一些心得，希望对初学者有些启发。</p>\n<p>后续我们对继续深入学习Zookeeper之<strong>Zab协议（Paxos算法的工业实现）</strong>，今天提到的活锁问题，也会得到相应的解决，敬请期待。</p>\n<p>系列文章：</p>\n<ul>\n<li><a href=\"http://coderluo.top/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-2-zab-xie-yi-xiang-jie/\">Zookeeper深度学习2-Zab协议详解</a></li>\n<li><a href=\"http://coderluo.top/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-3-yuan-ma-fen-xi-leader-xuan-ju/\">Zookeeper深度学习3-源码分析-Leader选举</a></li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><em>本片文章将开启对分布式协调服务zk的学习，目前规划是从理论基础开始逐步到源码解析，深入学习这个在分布式系统中起着至关作用的组件。</em></p>\n<p>对于 zk 理论的学习，最重要也是最难的知识点就是 Paxos 算法。所以我们首先学习 Paxos 算法。</p>\n<hr>\n<h2 id=\"算法简介\"><a href=\"#算法简介\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h2><blockquote>\n<p>Paxos 算法是莱斯利·兰伯特(Leslie Lamport)1990 年提出的一种基于消息传递的、具有高 容错性的一致性算法。Google Chubby 的作者 Mike Burrows 说过，世上只有一种一致性算法， 那就是 Paxos，所有其他一致性算法都是 Paxos 算法的不完整版。Paxos 算法是一种公认的晦 涩难懂的算法，并且工程实现上也具有很大难度。较有名的 Paxos 工程实现有 Google Chubby、 ZAB、微信的 PhxPaxos 等</p>\n</blockquote>\n<p>Paxos 算法是用于解决什么问题的呢? Paxos 算法要解决的问题是，在分布式系统中如何 就某个决议达成一致。</p>\n<h2 id=\"Paxos与拜占庭将军问题\"><a href=\"#Paxos与拜占庭将军问题\" class=\"headerlink\" title=\"Paxos与拜占庭将军问题\"></a>Paxos与拜占庭将军问题</h2><blockquote>\n<p>拜占庭将军问题是由 Paxos 算法作者莱斯利·兰伯特提出的点对点通信中的基本问题。该 问题要说明的含义是，<font color=\"red\">在不可靠信道上试图通过消息传递的方式达到一致性是不可能的</font>。所 以，Paxos 算法的前提是<font color=\"red\">不存在拜占庭将军问题</font>，即信道是安全的、可靠的，集群节点间传 递的消息是不会被篡改的。</p>\n</blockquote>\n<p>一般情况下，分布式系统中各个节点间采用两种通讯模型:<strong>共享内存(Shared Memory)</strong>、<strong>消息传递(Messages Passing)</strong>。而 Paxos 是基于消息传递通讯模型的。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><h3 id=\"三种角色\"><a href=\"#三种角色\" class=\"headerlink\" title=\"三种角色\"></a>三种角色</h3><p>在 Paxos 算法中有三种角色，分别具有三种不同的行为。但很多时候，一个进程可能同 时充当着多种角色。 </p>\n<ul>\n<li>Proposer:提案者，提出提案（Proposal）；</li>\n<li>Acceptor:表决者；</li>\n<li>Learner:学习者(同步者，即Proposer决议形成，将所有形成的决议发送给Learners)</li>\n</ul>\n<h3 id=\"Paxos算法一致性\"><a href=\"#Paxos算法一致性\" class=\"headerlink\" title=\"Paxos算法一致性\"></a>Paxos算法一致性</h3><p>Paxos 算法的一致性主要体现在以下几点:</p>\n<ul>\n<li>每个提案者在提出提案时都会首先获取到一个具有全局唯一性的、递增的提案编号N，即在整个集群中是唯一的编号 N，然后将该编号赋予其要提出的提案。</li>\n<li>每个表决者在accept某提案后，会将该提案的编号N记录在本地，这样每个表决者中保存的已经被 accept 的提案中会存在一个编号最大的提案，其编号假设为 maxN。每个表决者仅会 accept 编号大于自己本地 maxN 的提案。</li>\n<li>在众多提案中最终只能有一个提案被选定。</li>\n<li>一旦一个提案被选定，则其它服务器会主动同步(Learn)该提案到本地。</li>\n<li>没有提案被提出则不会有提案被选定。</li>\n</ul>\n<h3 id=\"Paxos算法流程\"><a href=\"#Paxos算法流程\" class=\"headerlink\" title=\"Paxos算法流程\"></a>Paxos算法流程</h3><p>Paxos 算法的执行过程划分为两个阶段:<strong>准备阶段 prepare</strong> 与<strong>接受阶段 accept</strong>。Ps:Learn阶段之前决议已经形成。</p>\n<p>由于Paxos算法是晦涩难懂的，这里我将以自己的理解来做整个描述，虽然可能在严谨性上会差强人意，但是可读性会提高，希望可以给大家更轻松的阅读体验。</p>\n<h4 id=\"A、Prepare阶段\"><a href=\"#A、Prepare阶段\" class=\"headerlink\" title=\"A、Prepare阶段\"></a>A、Prepare阶段</h4><ol>\n<li>提案者(Proposer)准备提交一个编号为 N 的提议，于是其首先向所有表决者(Acceptor)发 送 prepare(N)请求，用于试探集群是否支持该编号的提议。 如果这里不好理解我们可以试图理解为提议者拿着钞票去贿赂“表决者（Accept）”</li>\n<li>每个表决者（Acceptor）都保存者当前贿赂自己的最大金额数，即（maxN），当每个表决者接收到贿赂自己的提议时，会比较贿赂金额与maxN的值。有以下几种情况：<ol>\n<li>若 N 小于 maxN，则说明该提议已过时（钱少不接受），当前表决者采取不回应或回应 Error 的方 式来拒绝该 prepare 请求；</li>\n<li>若 N 大于 maxN，则说明该提议是可以接受的（毕竟谁给的钱多听谁的），当前表决者会首先将该 N（当前贿赂金额） 记录下来， 并将其曾经已经 accept 的编号最大的提案 Proposal(myid,maxN,value)反馈给提案者， 以向提案者展示自己支持的提案意愿。其中第一个参数 myid 表示表决者 Acceptor 的标识 id，第二个参数表示其曾接受的提案的最大编号 maxN（前任领导贿赂的金额），第三个参数表示该 提案的真正内容 value（前任领导提议的内容）。当然，若当前表决者还未曾 accept 过任何提议，则会将 Proposal(myid,null,null)反馈给提案者。</li>\n<li>在 prepare 阶段 N 不可能等于 maxN。这是由 N 的生成机制决定的。要获得 N 的值， 其必定会在原来数值的基础上采用同步锁方式增一。 </li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7ee1de1blj30qo0hg757.jpg\" alt></p>\n<blockquote>\n<p>这里需要说明下，为什么在表决者（Acceptor）判断贿赂金额大于当前保存的最大金额时会将前任已经保存的金额和提案内容返回给提案者，这是因为提案者（Proposer），在收到表决者的答复后，需要判断谁是最有钱的提案者，便推举它为领袖 (修改自己的提案)。</p>\n</blockquote>\n<h4 id=\"B、Accept阶段\"><a href=\"#B、Accept阶段\" class=\"headerlink\" title=\"B、Accept阶段\"></a>B、Accept阶段</h4><ol>\n<li>当提案者(Proposer)发出 prepare(N)后，若收到了超过半数的表决者(Accepter)的反馈， 那么该提案者就会将其真正的提案 Proposal(myid,N,value)发送给所有的表决者。</li>\n<li>当表决者(Acceptor)接收到提案者发送的 Proposal(myid,N,value)提案后，会再次拿出自己 曾经 accept 过的提议中的最大编号 maxN，或曾经记录下的 prepare 的最大编号，让 N 与它们进行比较，若 N <strong>大于等于</strong>这两个编号，则当前表决者 accept 该提案，并反馈给 提案者。若 N 小于这两个编号，则表决者采取不回应或回应 Error 的方式来拒绝该提议。</li>\n<li>若提案者没有接收到超过半数的表决者的 accept 反馈（中间有别人以更多的金额贿赂了它），则有两种可能的结果产生。一 是放弃该提案，不再提出；二是重新进入 prepare 阶段，递增提案号，重新提出 prepare 请求。</li>\n<li>若提案者接收到的反馈数量超过了半数，则其会向外广播两类信息：<ol>\n<li>向曾 accept 其提案的表决者发送“可执行数据同步信号”，即让它们执行其曾接收到的提案；</li>\n<li>向未曾向其发送 accept 反馈的表决者发送“提案 + 可执行数据同步信号”，即让 它们接受到该提案后马上执行。</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7ee1h8hxej30j80ihmym.jpg\" alt></p>\n<p>上述的过程中，如果某一个提议收到了大多数的表决者（Acceptor）的响应后（提案者（Proposal）中的N必须大于当前maxN才会响应），则提案通过，向所有表决者以及leaner发送同步数据，达成数据一致性。</p>\n<p>当然上面只是简单的描述，真是的算法场景更复杂，所有提议者，决策者身份信息都是交叉的，如果提议者、接受者的数量是4个,5个。。。但是你按照上面的思路进行推演，最终会发现最终是唯一一个提议获取多数票而胜出，从而其他提议者和决策者同步此提议。</p>\n<h2 id=\"活锁问题\"><a href=\"#活锁问题\" class=\"headerlink\" title=\"活锁问题\"></a>活锁问题</h2><p>上面的流程可能会引发活锁问题，那么什么是活锁呢？  </p>\n<blockquote>\n<p>活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试—失败—尝试—失败的过程。处于活锁的实体是在不断的改变状态，活锁有可能自行解开。</p>\n</blockquote>\n<p>那么上面的行为是怎么会引发活锁呢？接下来我们一起来分析下：</p>\n<p>在整个选举过程中，每个人谁先来谁后到，“接受者”什么时间能够接到“提议者”的信息，是完全不可控的；</p>\n<p>假设，第一个提案者A（Proposal）已经成功过了prepare阶段，准备向Acceptors广播发送Accept时，有一个更有钱土豪提案者B也向决议者（Acceptors）广播了prepare请求并在A的accept请求到之前发送给了决议者，这时毫无疑问，决议者会接收该请求，并记录在册。这时候，A的accept请求姗姗来迟，决议者对比此proposal的贿赂金额已经小于当前记录的prepare最大编号，因此不响应给提议者A，则提议者A收到的响应为过半，此提案废弃。这时它又用大于Proposer A的贿赂金额重新发起 preapre广播请求，这时提议者B的accept请求还没有到达决议者（Acceptors），因此Acceptor也接受了该prepare请求，将其记录在案，在之后提议者B发出的accept请求到达，决议者发现贿赂金额已经小于当前prepare的最大贿赂金额，因此拒绝响应，这样就会形成活锁问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章故事讲到这里就基本上结束了，下面我们来总结一下，其实Paxos算法主要包括两个阶段：</p>\n<ol>\n<li>prepare阶段，这个阶段主要是准备一个编号为N的提案，首先向所有决议者（Acceptor）发送prepare请求，用于试探是否支持该编号的提议。</li>\n<li>accept阶段，当一阶段提议收到了超过半数的响应，则开始正式下发提案内容proposal，如果过半则提案提交成功，广播给所有learner。</li>\n</ol>\n<p>注意：编号（贿赂金额）很重要，无论在哪个阶段，编号（贿赂金额）小的，都会被鄙视（被拒绝）；</p>\n<p>今天的分享就到这里了，这也是我学习Paxos算法过程中的一些心得，希望对初学者有些启发。</p>\n<p>后续我们对继续深入学习Zookeeper之<strong>Zab协议（Paxos算法的工业实现）</strong>，今天提到的活锁问题，也会得到相应的解决，敬请期待。</p>\n<p>系列文章：</p>\n<ul>\n<li><a href=\"http://coderluo.top/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-2-zab-xie-yi-xiang-jie/\">Zookeeper深度学习2-Zab协议详解</a></li>\n<li><a href=\"http://coderluo.top/2019/09/08/zookeeper/zookeeper-shen-du-xue-xi-3-yuan-ma-fen-xi-leader-xuan-ju/\">Zookeeper深度学习3-源码分析-Leader选举</a></li>\n</ul>\n"},{"title":"Zookeeper深度学习3-源码分析-Leader选举","date":"2019-09-08T14:48:16.000Z","author":"coderluo","cover":true,"img":"http://media.coderluo.top/img/%E5%B0%81%E9%9D%A2.jpg","_content":"\n\n> 前两篇文章已经对Zookeeper是什么,能做什么,以及Paxos算法和底层使用的Zab协议做了详细的描述（如果你还不了解Paxos算法和Zab协议建议先到文稿末尾查看前两篇再来学习本篇文章）,相信大家一定都有了自己的理解,那么本文就开始真正走进Zookeeper底层源码的学习。俗话说授人以鱼不如授人以渔，今天我们就来分析下Zookeeper非常重要的一个环节--**Leader选举**。\n\n\n\n\n\n## 一、前言\n\n\n\n### 1. 基本概念\n\n- SID：服务器ID，用来标示ZooKeeper集群中的机器，每台机器不能重复，和myid的值一致\n- ZXID：事务ID\n- Vote: 选票，具体的数据结构后面有\n- Quorum：过半机器数\n- logicalclock：逻辑时钟（选举轮次），zk服务器Leader选举的轮次\n\n**服务器类型：**\n\n在zk中，引入了Leader、Follwer和Observer三种角色。zk集群中的所有机器通过一个Leader选举过程来选定一台被称为Leader的机器，Leader服务器为客户端提供读和写服务。Follower和Observer都能够提供读服务，唯一的区别在于，Observer机器不参与Leader选举过程，也不参与写操作的过半写成功策略。因此，Observer存在的意义是：在不影响写性能的情况下提升集群的读性能。\n\n**服务器状态：**\n\n+ LOOKING：Leader选举阶段；\n+ FOLLOWING：Follower服务器和Leader保持同步状态；\n+ LEADING：Leader服务器作为主进程领导状态；\n+ OBSERVING：观察者状态，表明当前服务器是Observer，不参与投票；\n\n选举的目的就是选择出合适的Leader机器，由Leader机器决定事务性的Proposal处理过程，实现类两阶段提交协议（具体是ZAB协议）。\n\n\n\n\n\n\n\n## 二、启动选举主流程\n\n\n\n在zk服务器集群启动过程中，经QuorumPeerMain中，不光会创建ZooKeeperServer对象，同时会生成**QuorumPeer**对象，代表了ZooKeeper集群中的一台机器。在整个机器运行期间，负责维护该机器的运行状态，同时会根据情况发起Leader选举。\n\nQuorumPeer是一个独立的线程，维护着zk机器的状态。\n\n![](http://media.coderluo.top/img/1.png)\n\n本次主要介绍的是选举相关的内容，之后的行文都是从startLeaderElection中衍生出来的。\n\n### 1. QuorumPeer维护集群机器状态\n\n\n\nQuorumPeer的职责就是不断地检测当前的zk机器的状态，执行对应的逻辑，简单来说，就是根据服务所处的不同状态执行不同的逻辑。为了避免篇幅过长，影响阅读体验，删除了一部分逻辑后，代码如下：\n\n![](http://media.coderluo.top/img/2.png)\n\n\n\n当机器处于**LOOKING**状态时，QuorumPeer会进行选举，但是具体的逻辑并不是由QuorumPeer来负责的，整体的投票过程独立出来了，从逻辑执行的角度看，整个过程设计到两个主要的环节：\n\n- 与其他的zk集群机器通信的过程\n- 实现具体的选举算法\n\nQuorumPeer中默认使用的选举算法是FastLeaderElection。\n\n## 三、 选举过程中的整体架构\n\n\n\nzk提拱多种选举算法 不过之前版本的都废弃掉了，一般默认使用FastLeaderElection 也就是在配置文件中设置 electorArg=3。在集群启动的过程中，QuorumPeer会根据配置实现不同的选举策略：\n\n![](http://media.coderluo.top/img/3.png)\n\n  \n\n### 1. QuorumCnxManager\n\n如果ClientCnxn是zk客户端中处理IO请求的管理器，QuorumCnxManager是zk集群间负责选举过程中网络IO的管理器，在每台服务器启动的时候，都会启动一个QuorumCnxManager，用来维持各台服务器之间的网络通信。\n\n![](http://media.coderluo.top/img/4.png)\n\n\n\n**QuorumCnxManager**、 **Listener**、 **SendWorker**、 **RecvWorker** 的分工很明确 准确的说 QuorumCnxManager这个类的职责也很明确，就是负责监听端口 发消息 读消息 其中：\n\n- Listener 监听连接，维护与其他服务器的连接；\n- SendWorker 负责根据Listener保存的连接信息 向对应的server发送（投票）信息；\n- RecvWorker 获取其他server的（投票）信息 并存入队列；\n\n\n\n对于每一台zk机器，都需要建立一个TCP的端口监听，在QuorumCnxManager中交给Listener来处理，使用的是Socket的阻塞式IO（默认监听的端口是3888，是在config文件里面设置的）。在两两相互连接的过程中，**为了避免两台机器之间重复地创建TCP连接**，zk制定了连接的规则：**只允许SID打的服务器主动和其他服务器建立连接**。实现的方式也比较简单，在receiveConnection中，服务器会对比与自己建立连接的服务器的SID，判断是否接受请求，如果自己的SID更大，那么会断开连接，然后自己主动去和远程服务器建立连接。这段逻辑是由Listener来做的，且Listener独立线程。核心代码如下：\n\n![](http://media.coderluo.top/img/5.png) \n\n\n\nQuorumCnxManager这里只负责与其他server的信息交换 但不负责信息的生成与处理 数据的处理就要交给对应的选举算法进行处理了。\n\n以上内容主要是建立各台zk服务器之间的连接通信过程，具体的选举策略zk抽象成了Election，主要分析的是**FastLeaderElection**方式（选举算法的核心部分）：\n\n![](http://media.coderluo.top/img/6.png)\n\n\n\n## 四、正式选举（FastLeaderElection选举算法）\n\n\n\n上面QuorumPeer在一直循环的检测当前主机的状态，如果是Looking状态，就会进行新一轮的选举，通过：\n\n `setCurrentVote(makeLEStrategy().lookForLeader()); `\n\n也就是FastLeaderElection的lookForLeader来进行leader选择,实现代码不多，不过有些地方还是不好理解的。。。\n\n\n\n> talk is cheap, show me code!\n\n\n\n接下来，我们将org.apache.zookeeper.server.quorum.FastLeaderElection#lookForLeader 方法中的逻辑分为5个步骤来理解，这样我认为比直接看一整段代码效果好，如果你觉得这样看比较碎片，可以打开源码对照我们这里梳理的流程，在整体梳理几遍（看源码一定得多啃几遍，一遍基本上搞下不来）。\n\n\n\n### 1. 创建选举对象，做选举前的初始化工作\n\n\n\n![leader-1](http://media.coderluo.top/img/leader-1.png)\n\n\n\n### 2. 将自己作为新的Leader投出去（我选我）\n\n\n\n![](http://media.coderluo.top/img/leader-2.png)\n\n\n\n这里需要注意的是更新选票时获取的epoch是当前Server的epech，即上一轮leader的epoch；\n\n着重看一下sendNotifications方法，这里是将当前机器的选票发送给所有参与投票的机器，不包括Observer：\n\n![](http://media.coderluo.top/img/leader-3.png)\n\n\n\n\n\n### 3. 验证当前自己的选票与大家的选票谁更适合做Leader\n\n![](http://media.coderluo.top/img/leader-4.png)\n\n\n\n这里有一些点还是比较难以理解的，不过都已经标注了详细的注释，相信仔细看两遍一定可以理解的。\n\n这里的 recvqueue 就是所有收到其它服务器投票后的票箱（带头结点的单向链表），recvqueue.poll 即取出第一票，这里我们看下poll方法做的操作：\n\n![](http://media.coderluo.top/img/leader-5.png)\n\n\n\n一目了然，就是将链表头的next指针指向自己，即删除头节点，然后将head 指向之前头节点的next，也就是下一个元素，返回第一个元素的值，将当前第一个元素置为null，也就是新的头节点。\n\n\n\n### 4. 判断本轮选举中否应该结束了\n\n\n\n![](http://media.coderluo.top/img/leader-6.png)\n\n\n\n到了这一步，开始遍历当前服务器收到的选票中是否已经有过半的参与者选择了当前服务器的选票（经过上面的步骤，当前服务器选票已经修改为最合适的），我们一起看下 `org.apache.zookeeper.server.quorum.FastLeaderElection#termPredicate` 方法:\n\n![](http://media.coderluo.top/img/leader-7.png)\n\n\n\n如果当前选票没有过半，直接break继续取下一票进行判断，这个很好理解。\n\n可是问题来了，如果已经过半了，后面的这个步骤为什么还要取下一票在和当前选票比看谁更适合呢？ \n\n我们一起来看下面的代码：\n\n![](http://media.coderluo.top/img/leader-8.png)\n\n\n\n我初次看的时候也是难以理解，为什么取出下一票后判断比当前选票更合适后要在将选票放回去，然后break呢？\n\n上面的代码我已经写了注释，这个while 循环的目的是要遍历完票箱防止有比当前更合适的选票， 如果 n==null 则说明没有找到任何比当前“过半选票更合适的选票”，进行收尾工作，修改当前主机状态：\n\n```java\nproposedLeader == self.getId()) ?\n        ServerState.LEADING: learningState()\n```\n\n然后清空队列，返回最终选票。\n\n\n\n如果剩下的选票中有比自己更合适的则将其放回票箱，重新走一遍前面的流程，修改当前选票广播。\n\n说明：票箱也就是当前接收选票的容器 recvset，本质是一个HashMap，key为投票者的serverId，所以收到多次投票也只是更新选票而已，设计很是巧妙呀！\n\n\n\n### 5. 无需选举的情况\n\n\n\n![](http://media.coderluo.top/img/leader-9.png)\n\n\n\n最后这块的代码虽然不多，可是却是最难理解的，上面的注释中分析了为什么选举过程中可以收到通知发送者状态为FOLLOWING, LEADING, OBSERVING 的情况，结合注释还得仔细的看几遍，其实就是为了处理下面这三种情况下的选举状态：\n\n1. 新的Server(非Observer)加入到正常运行的集群\n2. 当Leader挂了，并不是所有follower都同时能够感知到leader挂了，先感知到的server会发送通知给其它server，但由于其它server还未感知到，所以它们发送给这个server的通知状态就是FOLLOWING\n3. 本轮选举中其它Server已经选举出了新的leader，但还没有通知到当前server，这些已经知道leader选举完毕的server向该server发送的通知就是LEADING或FOLLOWING\n\n\n\n## 五、总结\n\n\n\n以上就是zk的默认选举流程，按照ZAB协议的两种状态分析：\n\n- 初始化的时候，处于同一轮次进行投票直到投票选择出一个Leader\n- 崩溃恢复阶段：\n  1. Leader服务器挂了，那么经历的和初始化流程类似的过程，选择Leader\n  2. Follower服务器挂了，那么自己在执行选举的过程中，会收到其他服务器给的Leader选票信息（对应上文无需选举情况中的分支代码），也可以确定Leader所属\n\n\n\n> 本篇文章主要介绍了Zk leader选举过程中的代码逻辑，包括机器宕机重启以及集群初始化时QuorumPeer 都会检测到机器的状态为LOOKING，然后调用 FastLeaderElection 的 lookForLeader 方法进行 leader选举。 这块的代码虽然不多，可是理解起来还是有一定的难读的，建议大家结合本文多度几遍，加深印象。\n\n\n\n\n\n## 推荐阅读\n\n- [初探|Zookeeper基础之Paxos算法详解（一）](http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483685&idx=2&sn=11c01a7b93de8a31528a5f36be754a7f&chksm=9f999c08a8ee151ec8678cdd588be7d45637890f90ee44dd52b3d15d2b621fadacd81c0da3ca&scene=21#wechat_redirect)\n- [Zookeeper实现之Zab协议详解(二)](http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483685&idx=1&sn=1315bf46d6bf5be74b8f6006ddd2a7d2&chksm=9f999c08a8ee151e0f26e2d4332716385a63a70089947e49dcb2113be7e33d5f58b80e67b39b&scene=21#wechat_redirect)\n\n\n\n如果您对于源码的阅读有疑问，可以公众号给我留言，每条留言**都**将得到**认真**回复，一起探讨学习。\n\n后续持续推出Java、分布式、微服务、数据库等系列的文章，欢迎大家关注我的公众号，一起交流。\n\n\n\n![](https://oscimg.oschina.net/oscnet/2ce2160547f3619832c8ae314d478077cdb.jpg)\n\n","source":"_posts/zookeeper/Zookeeper深度学习3-源码分析Leader选举.md","raw":"---\ntitle: 'Zookeeper深度学习3-源码分析-Leader选举'\ntags:\n  - 源码分析\n  - Zookeeper\ndate: 2019-09-08 22:48:16\ncategories: Zookeeper\nauthor: coderluo\ncover: true\nimg: http://media.coderluo.top/img/%E5%B0%81%E9%9D%A2.jpg\n\n---\n\n\n> 前两篇文章已经对Zookeeper是什么,能做什么,以及Paxos算法和底层使用的Zab协议做了详细的描述（如果你还不了解Paxos算法和Zab协议建议先到文稿末尾查看前两篇再来学习本篇文章）,相信大家一定都有了自己的理解,那么本文就开始真正走进Zookeeper底层源码的学习。俗话说授人以鱼不如授人以渔，今天我们就来分析下Zookeeper非常重要的一个环节--**Leader选举**。\n\n\n\n\n\n## 一、前言\n\n\n\n### 1. 基本概念\n\n- SID：服务器ID，用来标示ZooKeeper集群中的机器，每台机器不能重复，和myid的值一致\n- ZXID：事务ID\n- Vote: 选票，具体的数据结构后面有\n- Quorum：过半机器数\n- logicalclock：逻辑时钟（选举轮次），zk服务器Leader选举的轮次\n\n**服务器类型：**\n\n在zk中，引入了Leader、Follwer和Observer三种角色。zk集群中的所有机器通过一个Leader选举过程来选定一台被称为Leader的机器，Leader服务器为客户端提供读和写服务。Follower和Observer都能够提供读服务，唯一的区别在于，Observer机器不参与Leader选举过程，也不参与写操作的过半写成功策略。因此，Observer存在的意义是：在不影响写性能的情况下提升集群的读性能。\n\n**服务器状态：**\n\n+ LOOKING：Leader选举阶段；\n+ FOLLOWING：Follower服务器和Leader保持同步状态；\n+ LEADING：Leader服务器作为主进程领导状态；\n+ OBSERVING：观察者状态，表明当前服务器是Observer，不参与投票；\n\n选举的目的就是选择出合适的Leader机器，由Leader机器决定事务性的Proposal处理过程，实现类两阶段提交协议（具体是ZAB协议）。\n\n\n\n\n\n\n\n## 二、启动选举主流程\n\n\n\n在zk服务器集群启动过程中，经QuorumPeerMain中，不光会创建ZooKeeperServer对象，同时会生成**QuorumPeer**对象，代表了ZooKeeper集群中的一台机器。在整个机器运行期间，负责维护该机器的运行状态，同时会根据情况发起Leader选举。\n\nQuorumPeer是一个独立的线程，维护着zk机器的状态。\n\n![](http://media.coderluo.top/img/1.png)\n\n本次主要介绍的是选举相关的内容，之后的行文都是从startLeaderElection中衍生出来的。\n\n### 1. QuorumPeer维护集群机器状态\n\n\n\nQuorumPeer的职责就是不断地检测当前的zk机器的状态，执行对应的逻辑，简单来说，就是根据服务所处的不同状态执行不同的逻辑。为了避免篇幅过长，影响阅读体验，删除了一部分逻辑后，代码如下：\n\n![](http://media.coderluo.top/img/2.png)\n\n\n\n当机器处于**LOOKING**状态时，QuorumPeer会进行选举，但是具体的逻辑并不是由QuorumPeer来负责的，整体的投票过程独立出来了，从逻辑执行的角度看，整个过程设计到两个主要的环节：\n\n- 与其他的zk集群机器通信的过程\n- 实现具体的选举算法\n\nQuorumPeer中默认使用的选举算法是FastLeaderElection。\n\n## 三、 选举过程中的整体架构\n\n\n\nzk提拱多种选举算法 不过之前版本的都废弃掉了，一般默认使用FastLeaderElection 也就是在配置文件中设置 electorArg=3。在集群启动的过程中，QuorumPeer会根据配置实现不同的选举策略：\n\n![](http://media.coderluo.top/img/3.png)\n\n  \n\n### 1. QuorumCnxManager\n\n如果ClientCnxn是zk客户端中处理IO请求的管理器，QuorumCnxManager是zk集群间负责选举过程中网络IO的管理器，在每台服务器启动的时候，都会启动一个QuorumCnxManager，用来维持各台服务器之间的网络通信。\n\n![](http://media.coderluo.top/img/4.png)\n\n\n\n**QuorumCnxManager**、 **Listener**、 **SendWorker**、 **RecvWorker** 的分工很明确 准确的说 QuorumCnxManager这个类的职责也很明确，就是负责监听端口 发消息 读消息 其中：\n\n- Listener 监听连接，维护与其他服务器的连接；\n- SendWorker 负责根据Listener保存的连接信息 向对应的server发送（投票）信息；\n- RecvWorker 获取其他server的（投票）信息 并存入队列；\n\n\n\n对于每一台zk机器，都需要建立一个TCP的端口监听，在QuorumCnxManager中交给Listener来处理，使用的是Socket的阻塞式IO（默认监听的端口是3888，是在config文件里面设置的）。在两两相互连接的过程中，**为了避免两台机器之间重复地创建TCP连接**，zk制定了连接的规则：**只允许SID打的服务器主动和其他服务器建立连接**。实现的方式也比较简单，在receiveConnection中，服务器会对比与自己建立连接的服务器的SID，判断是否接受请求，如果自己的SID更大，那么会断开连接，然后自己主动去和远程服务器建立连接。这段逻辑是由Listener来做的，且Listener独立线程。核心代码如下：\n\n![](http://media.coderluo.top/img/5.png) \n\n\n\nQuorumCnxManager这里只负责与其他server的信息交换 但不负责信息的生成与处理 数据的处理就要交给对应的选举算法进行处理了。\n\n以上内容主要是建立各台zk服务器之间的连接通信过程，具体的选举策略zk抽象成了Election，主要分析的是**FastLeaderElection**方式（选举算法的核心部分）：\n\n![](http://media.coderluo.top/img/6.png)\n\n\n\n## 四、正式选举（FastLeaderElection选举算法）\n\n\n\n上面QuorumPeer在一直循环的检测当前主机的状态，如果是Looking状态，就会进行新一轮的选举，通过：\n\n `setCurrentVote(makeLEStrategy().lookForLeader()); `\n\n也就是FastLeaderElection的lookForLeader来进行leader选择,实现代码不多，不过有些地方还是不好理解的。。。\n\n\n\n> talk is cheap, show me code!\n\n\n\n接下来，我们将org.apache.zookeeper.server.quorum.FastLeaderElection#lookForLeader 方法中的逻辑分为5个步骤来理解，这样我认为比直接看一整段代码效果好，如果你觉得这样看比较碎片，可以打开源码对照我们这里梳理的流程，在整体梳理几遍（看源码一定得多啃几遍，一遍基本上搞下不来）。\n\n\n\n### 1. 创建选举对象，做选举前的初始化工作\n\n\n\n![leader-1](http://media.coderluo.top/img/leader-1.png)\n\n\n\n### 2. 将自己作为新的Leader投出去（我选我）\n\n\n\n![](http://media.coderluo.top/img/leader-2.png)\n\n\n\n这里需要注意的是更新选票时获取的epoch是当前Server的epech，即上一轮leader的epoch；\n\n着重看一下sendNotifications方法，这里是将当前机器的选票发送给所有参与投票的机器，不包括Observer：\n\n![](http://media.coderluo.top/img/leader-3.png)\n\n\n\n\n\n### 3. 验证当前自己的选票与大家的选票谁更适合做Leader\n\n![](http://media.coderluo.top/img/leader-4.png)\n\n\n\n这里有一些点还是比较难以理解的，不过都已经标注了详细的注释，相信仔细看两遍一定可以理解的。\n\n这里的 recvqueue 就是所有收到其它服务器投票后的票箱（带头结点的单向链表），recvqueue.poll 即取出第一票，这里我们看下poll方法做的操作：\n\n![](http://media.coderluo.top/img/leader-5.png)\n\n\n\n一目了然，就是将链表头的next指针指向自己，即删除头节点，然后将head 指向之前头节点的next，也就是下一个元素，返回第一个元素的值，将当前第一个元素置为null，也就是新的头节点。\n\n\n\n### 4. 判断本轮选举中否应该结束了\n\n\n\n![](http://media.coderluo.top/img/leader-6.png)\n\n\n\n到了这一步，开始遍历当前服务器收到的选票中是否已经有过半的参与者选择了当前服务器的选票（经过上面的步骤，当前服务器选票已经修改为最合适的），我们一起看下 `org.apache.zookeeper.server.quorum.FastLeaderElection#termPredicate` 方法:\n\n![](http://media.coderluo.top/img/leader-7.png)\n\n\n\n如果当前选票没有过半，直接break继续取下一票进行判断，这个很好理解。\n\n可是问题来了，如果已经过半了，后面的这个步骤为什么还要取下一票在和当前选票比看谁更适合呢？ \n\n我们一起来看下面的代码：\n\n![](http://media.coderluo.top/img/leader-8.png)\n\n\n\n我初次看的时候也是难以理解，为什么取出下一票后判断比当前选票更合适后要在将选票放回去，然后break呢？\n\n上面的代码我已经写了注释，这个while 循环的目的是要遍历完票箱防止有比当前更合适的选票， 如果 n==null 则说明没有找到任何比当前“过半选票更合适的选票”，进行收尾工作，修改当前主机状态：\n\n```java\nproposedLeader == self.getId()) ?\n        ServerState.LEADING: learningState()\n```\n\n然后清空队列，返回最终选票。\n\n\n\n如果剩下的选票中有比自己更合适的则将其放回票箱，重新走一遍前面的流程，修改当前选票广播。\n\n说明：票箱也就是当前接收选票的容器 recvset，本质是一个HashMap，key为投票者的serverId，所以收到多次投票也只是更新选票而已，设计很是巧妙呀！\n\n\n\n### 5. 无需选举的情况\n\n\n\n![](http://media.coderluo.top/img/leader-9.png)\n\n\n\n最后这块的代码虽然不多，可是却是最难理解的，上面的注释中分析了为什么选举过程中可以收到通知发送者状态为FOLLOWING, LEADING, OBSERVING 的情况，结合注释还得仔细的看几遍，其实就是为了处理下面这三种情况下的选举状态：\n\n1. 新的Server(非Observer)加入到正常运行的集群\n2. 当Leader挂了，并不是所有follower都同时能够感知到leader挂了，先感知到的server会发送通知给其它server，但由于其它server还未感知到，所以它们发送给这个server的通知状态就是FOLLOWING\n3. 本轮选举中其它Server已经选举出了新的leader，但还没有通知到当前server，这些已经知道leader选举完毕的server向该server发送的通知就是LEADING或FOLLOWING\n\n\n\n## 五、总结\n\n\n\n以上就是zk的默认选举流程，按照ZAB协议的两种状态分析：\n\n- 初始化的时候，处于同一轮次进行投票直到投票选择出一个Leader\n- 崩溃恢复阶段：\n  1. Leader服务器挂了，那么经历的和初始化流程类似的过程，选择Leader\n  2. Follower服务器挂了，那么自己在执行选举的过程中，会收到其他服务器给的Leader选票信息（对应上文无需选举情况中的分支代码），也可以确定Leader所属\n\n\n\n> 本篇文章主要介绍了Zk leader选举过程中的代码逻辑，包括机器宕机重启以及集群初始化时QuorumPeer 都会检测到机器的状态为LOOKING，然后调用 FastLeaderElection 的 lookForLeader 方法进行 leader选举。 这块的代码虽然不多，可是理解起来还是有一定的难读的，建议大家结合本文多度几遍，加深印象。\n\n\n\n\n\n## 推荐阅读\n\n- [初探|Zookeeper基础之Paxos算法详解（一）](http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483685&idx=2&sn=11c01a7b93de8a31528a5f36be754a7f&chksm=9f999c08a8ee151ec8678cdd588be7d45637890f90ee44dd52b3d15d2b621fadacd81c0da3ca&scene=21#wechat_redirect)\n- [Zookeeper实现之Zab协议详解(二)](http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483685&idx=1&sn=1315bf46d6bf5be74b8f6006ddd2a7d2&chksm=9f999c08a8ee151e0f26e2d4332716385a63a70089947e49dcb2113be7e33d5f58b80e67b39b&scene=21#wechat_redirect)\n\n\n\n如果您对于源码的阅读有疑问，可以公众号给我留言，每条留言**都**将得到**认真**回复，一起探讨学习。\n\n后续持续推出Java、分布式、微服务、数据库等系列的文章，欢迎大家关注我的公众号，一起交流。\n\n\n\n![](https://oscimg.oschina.net/oscnet/2ce2160547f3619832c8ae314d478077cdb.jpg)\n\n","slug":"zookeeper/Zookeeper深度学习3-源码分析Leader选举","published":1,"updated":"2019-09-28T15:55:47.460Z","_id":"ck13pbo5d000hc3o669j70yuh","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>前两篇文章已经对Zookeeper是什么,能做什么,以及Paxos算法和底层使用的Zab协议做了详细的描述（如果你还不了解Paxos算法和Zab协议建议先到文稿末尾查看前两篇再来学习本篇文章）,相信大家一定都有了自己的理解,那么本文就开始真正走进Zookeeper底层源码的学习。俗话说授人以鱼不如授人以渔，今天我们就来分析下Zookeeper非常重要的一个环节–<strong>Leader选举</strong>。</p>\n</blockquote>\n<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. 基本概念</h3><ul>\n<li>SID：服务器ID，用来标示ZooKeeper集群中的机器，每台机器不能重复，和myid的值一致</li>\n<li>ZXID：事务ID</li>\n<li>Vote: 选票，具体的数据结构后面有</li>\n<li>Quorum：过半机器数</li>\n<li>logicalclock：逻辑时钟（选举轮次），zk服务器Leader选举的轮次</li>\n</ul>\n<p><strong>服务器类型：</strong></p>\n<p>在zk中，引入了Leader、Follwer和Observer三种角色。zk集群中的所有机器通过一个Leader选举过程来选定一台被称为Leader的机器，Leader服务器为客户端提供读和写服务。Follower和Observer都能够提供读服务，唯一的区别在于，Observer机器不参与Leader选举过程，也不参与写操作的过半写成功策略。因此，Observer存在的意义是：在不影响写性能的情况下提升集群的读性能。</p>\n<p><strong>服务器状态：</strong></p>\n<ul>\n<li>LOOKING：Leader选举阶段；</li>\n<li>FOLLOWING：Follower服务器和Leader保持同步状态；</li>\n<li>LEADING：Leader服务器作为主进程领导状态；</li>\n<li>OBSERVING：观察者状态，表明当前服务器是Observer，不参与投票；</li>\n</ul>\n<p>选举的目的就是选择出合适的Leader机器，由Leader机器决定事务性的Proposal处理过程，实现类两阶段提交协议（具体是ZAB协议）。</p>\n<h2 id=\"二、启动选举主流程\"><a href=\"#二、启动选举主流程\" class=\"headerlink\" title=\"二、启动选举主流程\"></a>二、启动选举主流程</h2><p>在zk服务器集群启动过程中，经QuorumPeerMain中，不光会创建ZooKeeperServer对象，同时会生成<strong>QuorumPeer</strong>对象，代表了ZooKeeper集群中的一台机器。在整个机器运行期间，负责维护该机器的运行状态，同时会根据情况发起Leader选举。</p>\n<p>QuorumPeer是一个独立的线程，维护着zk机器的状态。</p>\n<p><img src=\"http://media.coderluo.top/img/1.png\" alt=\"\"></p>\n<p>本次主要介绍的是选举相关的内容，之后的行文都是从startLeaderElection中衍生出来的。</p>\n<h3 id=\"1-QuorumPeer维护集群机器状态\"><a href=\"#1-QuorumPeer维护集群机器状态\" class=\"headerlink\" title=\"1. QuorumPeer维护集群机器状态\"></a>1. QuorumPeer维护集群机器状态</h3><p>QuorumPeer的职责就是不断地检测当前的zk机器的状态，执行对应的逻辑，简单来说，就是根据服务所处的不同状态执行不同的逻辑。为了避免篇幅过长，影响阅读体验，删除了一部分逻辑后，代码如下：</p>\n<p><img src=\"http://media.coderluo.top/img/2.png\" alt=\"\"></p>\n<p>当机器处于<strong>LOOKING</strong>状态时，QuorumPeer会进行选举，但是具体的逻辑并不是由QuorumPeer来负责的，整体的投票过程独立出来了，从逻辑执行的角度看，整个过程设计到两个主要的环节：</p>\n<ul>\n<li>与其他的zk集群机器通信的过程</li>\n<li>实现具体的选举算法</li>\n</ul>\n<p>QuorumPeer中默认使用的选举算法是FastLeaderElection。</p>\n<h2 id=\"三、-选举过程中的整体架构\"><a href=\"#三、-选举过程中的整体架构\" class=\"headerlink\" title=\"三、 选举过程中的整体架构\"></a>三、 选举过程中的整体架构</h2><p>zk提拱多种选举算法 不过之前版本的都废弃掉了，一般默认使用FastLeaderElection 也就是在配置文件中设置 electorArg=3。在集群启动的过程中，QuorumPeer会根据配置实现不同的选举策略：</p>\n<p><img src=\"http://media.coderluo.top/img/3.png\" alt=\"\"></p>\n<h3 id=\"1-QuorumCnxManager\"><a href=\"#1-QuorumCnxManager\" class=\"headerlink\" title=\"1. QuorumCnxManager\"></a>1. QuorumCnxManager</h3><p>如果ClientCnxn是zk客户端中处理IO请求的管理器，QuorumCnxManager是zk集群间负责选举过程中网络IO的管理器，在每台服务器启动的时候，都会启动一个QuorumCnxManager，用来维持各台服务器之间的网络通信。</p>\n<p><img src=\"http://media.coderluo.top/img/4.png\" alt=\"\"></p>\n<p><strong>QuorumCnxManager</strong>、 <strong>Listener</strong>、 <strong>SendWorker</strong>、 <strong>RecvWorker</strong> 的分工很明确 准确的说 QuorumCnxManager这个类的职责也很明确，就是负责监听端口 发消息 读消息 其中：</p>\n<ul>\n<li>Listener 监听连接，维护与其他服务器的连接；</li>\n<li>SendWorker 负责根据Listener保存的连接信息 向对应的server发送（投票）信息；</li>\n<li>RecvWorker 获取其他server的（投票）信息 并存入队列；</li>\n</ul>\n<p>对于每一台zk机器，都需要建立一个TCP的端口监听，在QuorumCnxManager中交给Listener来处理，使用的是Socket的阻塞式IO（默认监听的端口是3888，是在config文件里面设置的）。在两两相互连接的过程中，<strong>为了避免两台机器之间重复地创建TCP连接</strong>，zk制定了连接的规则：<strong>只允许SID打的服务器主动和其他服务器建立连接</strong>。实现的方式也比较简单，在receiveConnection中，服务器会对比与自己建立连接的服务器的SID，判断是否接受请求，如果自己的SID更大，那么会断开连接，然后自己主动去和远程服务器建立连接。这段逻辑是由Listener来做的，且Listener独立线程。核心代码如下：</p>\n<p><img src=\"http://media.coderluo.top/img/5.png\" alt=\"\"> </p>\n<p>QuorumCnxManager这里只负责与其他server的信息交换 但不负责信息的生成与处理 数据的处理就要交给对应的选举算法进行处理了。</p>\n<p>以上内容主要是建立各台zk服务器之间的连接通信过程，具体的选举策略zk抽象成了Election，主要分析的是<strong>FastLeaderElection</strong>方式（选举算法的核心部分）：</p>\n<p><img src=\"http://media.coderluo.top/img/6.png\" alt=\"\"></p>\n<h2 id=\"四、正式选举（FastLeaderElection选举算法）\"><a href=\"#四、正式选举（FastLeaderElection选举算法）\" class=\"headerlink\" title=\"四、正式选举（FastLeaderElection选举算法）\"></a>四、正式选举（FastLeaderElection选举算法）</h2><p>上面QuorumPeer在一直循环的检测当前主机的状态，如果是Looking状态，就会进行新一轮的选举，通过：</p>\n<p> <code>setCurrentVote(makeLEStrategy().lookForLeader());</code></p>\n<p>也就是FastLeaderElection的lookForLeader来进行leader选择,实现代码不多，不过有些地方还是不好理解的。。。</p>\n<blockquote>\n<p>talk is cheap, show me code!</p>\n</blockquote>\n<p>接下来，我们将org.apache.zookeeper.server.quorum.FastLeaderElection#lookForLeader 方法中的逻辑分为5个步骤来理解，这样我认为比直接看一整段代码效果好，如果你觉得这样看比较碎片，可以打开源码对照我们这里梳理的流程，在整体梳理几遍（看源码一定得多啃几遍，一遍基本上搞下不来）。</p>\n<h3 id=\"1-创建选举对象，做选举前的初始化工作\"><a href=\"#1-创建选举对象，做选举前的初始化工作\" class=\"headerlink\" title=\"1. 创建选举对象，做选举前的初始化工作\"></a>1. 创建选举对象，做选举前的初始化工作</h3><p><img src=\"http://media.coderluo.top/img/leader-1.png\" alt=\"leader-1\"></p>\n<h3 id=\"2-将自己作为新的Leader投出去（我选我）\"><a href=\"#2-将自己作为新的Leader投出去（我选我）\" class=\"headerlink\" title=\"2. 将自己作为新的Leader投出去（我选我）\"></a>2. 将自己作为新的Leader投出去（我选我）</h3><p><img src=\"http://media.coderluo.top/img/leader-2.png\" alt=\"\"></p>\n<p>这里需要注意的是更新选票时获取的epoch是当前Server的epech，即上一轮leader的epoch；</p>\n<p>着重看一下sendNotifications方法，这里是将当前机器的选票发送给所有参与投票的机器，不包括Observer：</p>\n<p><img src=\"http://media.coderluo.top/img/leader-3.png\" alt=\"\"></p>\n<h3 id=\"3-验证当前自己的选票与大家的选票谁更适合做Leader\"><a href=\"#3-验证当前自己的选票与大家的选票谁更适合做Leader\" class=\"headerlink\" title=\"3. 验证当前自己的选票与大家的选票谁更适合做Leader\"></a>3. 验证当前自己的选票与大家的选票谁更适合做Leader</h3><p><img src=\"http://media.coderluo.top/img/leader-4.png\" alt=\"\"></p>\n<p>这里有一些点还是比较难以理解的，不过都已经标注了详细的注释，相信仔细看两遍一定可以理解的。</p>\n<p>这里的 recvqueue 就是所有收到其它服务器投票后的票箱（带头结点的单向链表），recvqueue.poll 即取出第一票，这里我们看下poll方法做的操作：</p>\n<p><img src=\"http://media.coderluo.top/img/leader-5.png\" alt=\"\"></p>\n<p>一目了然，就是将链表头的next指针指向自己，即删除头节点，然后将head 指向之前头节点的next，也就是下一个元素，返回第一个元素的值，将当前第一个元素置为null，也就是新的头节点。</p>\n<h3 id=\"4-判断本轮选举中否应该结束了\"><a href=\"#4-判断本轮选举中否应该结束了\" class=\"headerlink\" title=\"4. 判断本轮选举中否应该结束了\"></a>4. 判断本轮选举中否应该结束了</h3><p><img src=\"http://media.coderluo.top/img/leader-6.png\" alt=\"\"></p>\n<p>到了这一步，开始遍历当前服务器收到的选票中是否已经有过半的参与者选择了当前服务器的选票（经过上面的步骤，当前服务器选票已经修改为最合适的），我们一起看下 <code>org.apache.zookeeper.server.quorum.FastLeaderElection#termPredicate</code> 方法:</p>\n<p><img src=\"http://media.coderluo.top/img/leader-7.png\" alt=\"\"></p>\n<p>如果当前选票没有过半，直接break继续取下一票进行判断，这个很好理解。</p>\n<p>可是问题来了，如果已经过半了，后面的这个步骤为什么还要取下一票在和当前选票比看谁更适合呢？ </p>\n<p>我们一起来看下面的代码：</p>\n<p><img src=\"http://media.coderluo.top/img/leader-8.png\" alt=\"\"></p>\n<p>我初次看的时候也是难以理解，为什么取出下一票后判断比当前选票更合适后要在将选票放回去，然后break呢？</p>\n<p>上面的代码我已经写了注释，这个while 循环的目的是要遍历完票箱防止有比当前更合适的选票， 如果 n==null 则说明没有找到任何比当前“过半选票更合适的选票”，进行收尾工作，修改当前主机状态：</p>\n<pre class=\" language-java\"><code class=\"language-java\">proposedLeader <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n        ServerState<span class=\"token punctuation\">.</span>LEADING<span class=\"token operator\">:</span> <span class=\"token function\">learningState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>然后清空队列，返回最终选票。</p>\n<p>如果剩下的选票中有比自己更合适的则将其放回票箱，重新走一遍前面的流程，修改当前选票广播。</p>\n<p>说明：票箱也就是当前接收选票的容器 recvset，本质是一个HashMap，key为投票者的serverId，所以收到多次投票也只是更新选票而已，设计很是巧妙呀！</p>\n<h3 id=\"5-无需选举的情况\"><a href=\"#5-无需选举的情况\" class=\"headerlink\" title=\"5. 无需选举的情况\"></a>5. 无需选举的情况</h3><p><img src=\"http://media.coderluo.top/img/leader-9.png\" alt=\"\"></p>\n<p>最后这块的代码虽然不多，可是却是最难理解的，上面的注释中分析了为什么选举过程中可以收到通知发送者状态为FOLLOWING, LEADING, OBSERVING 的情况，结合注释还得仔细的看几遍，其实就是为了处理下面这三种情况下的选举状态：</p>\n<ol>\n<li>新的Server(非Observer)加入到正常运行的集群</li>\n<li>当Leader挂了，并不是所有follower都同时能够感知到leader挂了，先感知到的server会发送通知给其它server，但由于其它server还未感知到，所以它们发送给这个server的通知状态就是FOLLOWING</li>\n<li>本轮选举中其它Server已经选举出了新的leader，但还没有通知到当前server，这些已经知道leader选举完毕的server向该server发送的通知就是LEADING或FOLLOWING</li>\n</ol>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>以上就是zk的默认选举流程，按照ZAB协议的两种状态分析：</p>\n<ul>\n<li>初始化的时候，处于同一轮次进行投票直到投票选择出一个Leader</li>\n<li>崩溃恢复阶段：<ol>\n<li>Leader服务器挂了，那么经历的和初始化流程类似的过程，选择Leader</li>\n<li>Follower服务器挂了，那么自己在执行选举的过程中，会收到其他服务器给的Leader选票信息（对应上文无需选举情况中的分支代码），也可以确定Leader所属</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>本篇文章主要介绍了Zk leader选举过程中的代码逻辑，包括机器宕机重启以及集群初始化时QuorumPeer 都会检测到机器的状态为LOOKING，然后调用 FastLeaderElection 的 lookForLeader 方法进行 leader选举。 这块的代码虽然不多，可是理解起来还是有一定的难读的，建议大家结合本文多度几遍，加深印象。</p>\n</blockquote>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&amp;mid=2247483685&amp;idx=2&amp;sn=11c01a7b93de8a31528a5f36be754a7f&amp;chksm=9f999c08a8ee151ec8678cdd588be7d45637890f90ee44dd52b3d15d2b621fadacd81c0da3ca&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">初探|Zookeeper基础之Paxos算法详解（一）</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&amp;mid=2247483685&amp;idx=1&amp;sn=1315bf46d6bf5be74b8f6006ddd2a7d2&amp;chksm=9f999c08a8ee151e0f26e2d4332716385a63a70089947e49dcb2113be7e33d5f58b80e67b39b&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">Zookeeper实现之Zab协议详解(二)</a></li>\n</ul>\n<p>如果您对于源码的阅读有疑问，可以公众号给我留言，每条留言<strong>都</strong>将得到<strong>认真</strong>回复，一起探讨学习。</p>\n<p>后续持续推出Java、分布式、微服务、数据库等系列的文章，欢迎大家关注我的公众号，一起交流。</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/2ce2160547f3619832c8ae314d478077cdb.jpg\" alt=\"\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>前两篇文章已经对Zookeeper是什么,能做什么,以及Paxos算法和底层使用的Zab协议做了详细的描述（如果你还不了解Paxos算法和Zab协议建议先到文稿末尾查看前两篇再来学习本篇文章）,相信大家一定都有了自己的理解,那么本文就开始真正走进Zookeeper底层源码的学习。俗话说授人以鱼不如授人以渔，今天我们就来分析下Zookeeper非常重要的一个环节–<strong>Leader选举</strong>。</p>\n</blockquote>\n<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. 基本概念</h3><ul>\n<li>SID：服务器ID，用来标示ZooKeeper集群中的机器，每台机器不能重复，和myid的值一致</li>\n<li>ZXID：事务ID</li>\n<li>Vote: 选票，具体的数据结构后面有</li>\n<li>Quorum：过半机器数</li>\n<li>logicalclock：逻辑时钟（选举轮次），zk服务器Leader选举的轮次</li>\n</ul>\n<p><strong>服务器类型：</strong></p>\n<p>在zk中，引入了Leader、Follwer和Observer三种角色。zk集群中的所有机器通过一个Leader选举过程来选定一台被称为Leader的机器，Leader服务器为客户端提供读和写服务。Follower和Observer都能够提供读服务，唯一的区别在于，Observer机器不参与Leader选举过程，也不参与写操作的过半写成功策略。因此，Observer存在的意义是：在不影响写性能的情况下提升集群的读性能。</p>\n<p><strong>服务器状态：</strong></p>\n<ul>\n<li>LOOKING：Leader选举阶段；</li>\n<li>FOLLOWING：Follower服务器和Leader保持同步状态；</li>\n<li>LEADING：Leader服务器作为主进程领导状态；</li>\n<li>OBSERVING：观察者状态，表明当前服务器是Observer，不参与投票；</li>\n</ul>\n<p>选举的目的就是选择出合适的Leader机器，由Leader机器决定事务性的Proposal处理过程，实现类两阶段提交协议（具体是ZAB协议）。</p>\n<h2 id=\"二、启动选举主流程\"><a href=\"#二、启动选举主流程\" class=\"headerlink\" title=\"二、启动选举主流程\"></a>二、启动选举主流程</h2><p>在zk服务器集群启动过程中，经QuorumPeerMain中，不光会创建ZooKeeperServer对象，同时会生成<strong>QuorumPeer</strong>对象，代表了ZooKeeper集群中的一台机器。在整个机器运行期间，负责维护该机器的运行状态，同时会根据情况发起Leader选举。</p>\n<p>QuorumPeer是一个独立的线程，维护着zk机器的状态。</p>\n<p><img src=\"http://media.coderluo.top/img/1.png\" alt></p>\n<p>本次主要介绍的是选举相关的内容，之后的行文都是从startLeaderElection中衍生出来的。</p>\n<h3 id=\"1-QuorumPeer维护集群机器状态\"><a href=\"#1-QuorumPeer维护集群机器状态\" class=\"headerlink\" title=\"1. QuorumPeer维护集群机器状态\"></a>1. QuorumPeer维护集群机器状态</h3><p>QuorumPeer的职责就是不断地检测当前的zk机器的状态，执行对应的逻辑，简单来说，就是根据服务所处的不同状态执行不同的逻辑。为了避免篇幅过长，影响阅读体验，删除了一部分逻辑后，代码如下：</p>\n<p><img src=\"http://media.coderluo.top/img/2.png\" alt></p>\n<p>当机器处于<strong>LOOKING</strong>状态时，QuorumPeer会进行选举，但是具体的逻辑并不是由QuorumPeer来负责的，整体的投票过程独立出来了，从逻辑执行的角度看，整个过程设计到两个主要的环节：</p>\n<ul>\n<li>与其他的zk集群机器通信的过程</li>\n<li>实现具体的选举算法</li>\n</ul>\n<p>QuorumPeer中默认使用的选举算法是FastLeaderElection。</p>\n<h2 id=\"三、-选举过程中的整体架构\"><a href=\"#三、-选举过程中的整体架构\" class=\"headerlink\" title=\"三、 选举过程中的整体架构\"></a>三、 选举过程中的整体架构</h2><p>zk提拱多种选举算法 不过之前版本的都废弃掉了，一般默认使用FastLeaderElection 也就是在配置文件中设置 electorArg=3。在集群启动的过程中，QuorumPeer会根据配置实现不同的选举策略：</p>\n<p><img src=\"http://media.coderluo.top/img/3.png\" alt></p>\n<h3 id=\"1-QuorumCnxManager\"><a href=\"#1-QuorumCnxManager\" class=\"headerlink\" title=\"1. QuorumCnxManager\"></a>1. QuorumCnxManager</h3><p>如果ClientCnxn是zk客户端中处理IO请求的管理器，QuorumCnxManager是zk集群间负责选举过程中网络IO的管理器，在每台服务器启动的时候，都会启动一个QuorumCnxManager，用来维持各台服务器之间的网络通信。</p>\n<p><img src=\"http://media.coderluo.top/img/4.png\" alt></p>\n<p><strong>QuorumCnxManager</strong>、 <strong>Listener</strong>、 <strong>SendWorker</strong>、 <strong>RecvWorker</strong> 的分工很明确 准确的说 QuorumCnxManager这个类的职责也很明确，就是负责监听端口 发消息 读消息 其中：</p>\n<ul>\n<li>Listener 监听连接，维护与其他服务器的连接；</li>\n<li>SendWorker 负责根据Listener保存的连接信息 向对应的server发送（投票）信息；</li>\n<li>RecvWorker 获取其他server的（投票）信息 并存入队列；</li>\n</ul>\n<p>对于每一台zk机器，都需要建立一个TCP的端口监听，在QuorumCnxManager中交给Listener来处理，使用的是Socket的阻塞式IO（默认监听的端口是3888，是在config文件里面设置的）。在两两相互连接的过程中，<strong>为了避免两台机器之间重复地创建TCP连接</strong>，zk制定了连接的规则：<strong>只允许SID打的服务器主动和其他服务器建立连接</strong>。实现的方式也比较简单，在receiveConnection中，服务器会对比与自己建立连接的服务器的SID，判断是否接受请求，如果自己的SID更大，那么会断开连接，然后自己主动去和远程服务器建立连接。这段逻辑是由Listener来做的，且Listener独立线程。核心代码如下：</p>\n<p><img src=\"http://media.coderluo.top/img/5.png\" alt> </p>\n<p>QuorumCnxManager这里只负责与其他server的信息交换 但不负责信息的生成与处理 数据的处理就要交给对应的选举算法进行处理了。</p>\n<p>以上内容主要是建立各台zk服务器之间的连接通信过程，具体的选举策略zk抽象成了Election，主要分析的是<strong>FastLeaderElection</strong>方式（选举算法的核心部分）：</p>\n<p><img src=\"http://media.coderluo.top/img/6.png\" alt></p>\n<h2 id=\"四、正式选举（FastLeaderElection选举算法）\"><a href=\"#四、正式选举（FastLeaderElection选举算法）\" class=\"headerlink\" title=\"四、正式选举（FastLeaderElection选举算法）\"></a>四、正式选举（FastLeaderElection选举算法）</h2><p>上面QuorumPeer在一直循环的检测当前主机的状态，如果是Looking状态，就会进行新一轮的选举，通过：</p>\n<p> <code>setCurrentVote(makeLEStrategy().lookForLeader());</code></p>\n<p>也就是FastLeaderElection的lookForLeader来进行leader选择,实现代码不多，不过有些地方还是不好理解的。。。</p>\n<blockquote>\n<p>talk is cheap, show me code!</p>\n</blockquote>\n<p>接下来，我们将org.apache.zookeeper.server.quorum.FastLeaderElection#lookForLeader 方法中的逻辑分为5个步骤来理解，这样我认为比直接看一整段代码效果好，如果你觉得这样看比较碎片，可以打开源码对照我们这里梳理的流程，在整体梳理几遍（看源码一定得多啃几遍，一遍基本上搞下不来）。</p>\n<h3 id=\"1-创建选举对象，做选举前的初始化工作\"><a href=\"#1-创建选举对象，做选举前的初始化工作\" class=\"headerlink\" title=\"1. 创建选举对象，做选举前的初始化工作\"></a>1. 创建选举对象，做选举前的初始化工作</h3><p><img src=\"http://media.coderluo.top/img/leader-1.png\" alt=\"leader-1\"></p>\n<h3 id=\"2-将自己作为新的Leader投出去（我选我）\"><a href=\"#2-将自己作为新的Leader投出去（我选我）\" class=\"headerlink\" title=\"2. 将自己作为新的Leader投出去（我选我）\"></a>2. 将自己作为新的Leader投出去（我选我）</h3><p><img src=\"http://media.coderluo.top/img/leader-2.png\" alt></p>\n<p>这里需要注意的是更新选票时获取的epoch是当前Server的epech，即上一轮leader的epoch；</p>\n<p>着重看一下sendNotifications方法，这里是将当前机器的选票发送给所有参与投票的机器，不包括Observer：</p>\n<p><img src=\"http://media.coderluo.top/img/leader-3.png\" alt></p>\n<h3 id=\"3-验证当前自己的选票与大家的选票谁更适合做Leader\"><a href=\"#3-验证当前自己的选票与大家的选票谁更适合做Leader\" class=\"headerlink\" title=\"3. 验证当前自己的选票与大家的选票谁更适合做Leader\"></a>3. 验证当前自己的选票与大家的选票谁更适合做Leader</h3><p><img src=\"http://media.coderluo.top/img/leader-4.png\" alt></p>\n<p>这里有一些点还是比较难以理解的，不过都已经标注了详细的注释，相信仔细看两遍一定可以理解的。</p>\n<p>这里的 recvqueue 就是所有收到其它服务器投票后的票箱（带头结点的单向链表），recvqueue.poll 即取出第一票，这里我们看下poll方法做的操作：</p>\n<p><img src=\"http://media.coderluo.top/img/leader-5.png\" alt></p>\n<p>一目了然，就是将链表头的next指针指向自己，即删除头节点，然后将head 指向之前头节点的next，也就是下一个元素，返回第一个元素的值，将当前第一个元素置为null，也就是新的头节点。</p>\n<h3 id=\"4-判断本轮选举中否应该结束了\"><a href=\"#4-判断本轮选举中否应该结束了\" class=\"headerlink\" title=\"4. 判断本轮选举中否应该结束了\"></a>4. 判断本轮选举中否应该结束了</h3><p><img src=\"http://media.coderluo.top/img/leader-6.png\" alt></p>\n<p>到了这一步，开始遍历当前服务器收到的选票中是否已经有过半的参与者选择了当前服务器的选票（经过上面的步骤，当前服务器选票已经修改为最合适的），我们一起看下 <code>org.apache.zookeeper.server.quorum.FastLeaderElection#termPredicate</code> 方法:</p>\n<p><img src=\"http://media.coderluo.top/img/leader-7.png\" alt></p>\n<p>如果当前选票没有过半，直接break继续取下一票进行判断，这个很好理解。</p>\n<p>可是问题来了，如果已经过半了，后面的这个步骤为什么还要取下一票在和当前选票比看谁更适合呢？ </p>\n<p>我们一起来看下面的代码：</p>\n<p><img src=\"http://media.coderluo.top/img/leader-8.png\" alt></p>\n<p>我初次看的时候也是难以理解，为什么取出下一票后判断比当前选票更合适后要在将选票放回去，然后break呢？</p>\n<p>上面的代码我已经写了注释，这个while 循环的目的是要遍历完票箱防止有比当前更合适的选票， 如果 n==null 则说明没有找到任何比当前“过半选票更合适的选票”，进行收尾工作，修改当前主机状态：</p>\n<pre><code class=\"java\">proposedLeader == self.getId()) ?\n        ServerState.LEADING: learningState()</code></pre>\n<p>然后清空队列，返回最终选票。</p>\n<p>如果剩下的选票中有比自己更合适的则将其放回票箱，重新走一遍前面的流程，修改当前选票广播。</p>\n<p>说明：票箱也就是当前接收选票的容器 recvset，本质是一个HashMap，key为投票者的serverId，所以收到多次投票也只是更新选票而已，设计很是巧妙呀！</p>\n<h3 id=\"5-无需选举的情况\"><a href=\"#5-无需选举的情况\" class=\"headerlink\" title=\"5. 无需选举的情况\"></a>5. 无需选举的情况</h3><p><img src=\"http://media.coderluo.top/img/leader-9.png\" alt></p>\n<p>最后这块的代码虽然不多，可是却是最难理解的，上面的注释中分析了为什么选举过程中可以收到通知发送者状态为FOLLOWING, LEADING, OBSERVING 的情况，结合注释还得仔细的看几遍，其实就是为了处理下面这三种情况下的选举状态：</p>\n<ol>\n<li>新的Server(非Observer)加入到正常运行的集群</li>\n<li>当Leader挂了，并不是所有follower都同时能够感知到leader挂了，先感知到的server会发送通知给其它server，但由于其它server还未感知到，所以它们发送给这个server的通知状态就是FOLLOWING</li>\n<li>本轮选举中其它Server已经选举出了新的leader，但还没有通知到当前server，这些已经知道leader选举完毕的server向该server发送的通知就是LEADING或FOLLOWING</li>\n</ol>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>以上就是zk的默认选举流程，按照ZAB协议的两种状态分析：</p>\n<ul>\n<li>初始化的时候，处于同一轮次进行投票直到投票选择出一个Leader</li>\n<li>崩溃恢复阶段：<ol>\n<li>Leader服务器挂了，那么经历的和初始化流程类似的过程，选择Leader</li>\n<li>Follower服务器挂了，那么自己在执行选举的过程中，会收到其他服务器给的Leader选票信息（对应上文无需选举情况中的分支代码），也可以确定Leader所属</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>本篇文章主要介绍了Zk leader选举过程中的代码逻辑，包括机器宕机重启以及集群初始化时QuorumPeer 都会检测到机器的状态为LOOKING，然后调用 FastLeaderElection 的 lookForLeader 方法进行 leader选举。 这块的代码虽然不多，可是理解起来还是有一定的难读的，建议大家结合本文多度几遍，加深印象。</p>\n</blockquote>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483685&idx=2&sn=11c01a7b93de8a31528a5f36be754a7f&chksm=9f999c08a8ee151ec8678cdd588be7d45637890f90ee44dd52b3d15d2b621fadacd81c0da3ca&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">初探|Zookeeper基础之Paxos算法详解（一）</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483685&idx=1&sn=1315bf46d6bf5be74b8f6006ddd2a7d2&chksm=9f999c08a8ee151e0f26e2d4332716385a63a70089947e49dcb2113be7e33d5f58b80e67b39b&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">Zookeeper实现之Zab协议详解(二)</a></li>\n</ul>\n<p>如果您对于源码的阅读有疑问，可以公众号给我留言，每条留言<strong>都</strong>将得到<strong>认真</strong>回复，一起探讨学习。</p>\n<p>后续持续推出Java、分布式、微服务、数据库等系列的文章，欢迎大家关注我的公众号，一起交流。</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/2ce2160547f3619832c8ae314d478077cdb.jpg\" alt></p>\n"},{"title":"Zookeeper深度学习2-Zab协议详解","date":"2019-09-08T14:48:16.000Z","_content":"\n\n\n\n> 今天讲解的主题是Zookeeper实现的基础协议--**Zab协议（Zookeeper Atomic Broadcast）**，也称为zk原子广播协议。\n\n\n\n首先大家可能会有疑问，**Zab和我们上一篇讲解的Paxos之间有什么区别和联系？**别着急，带着这个问题接着往下看吧，后面我会揭晓这个问题的答案的。\n\n\n\n## 一、Zookeeper简介\n\n\n\nZookeeper是一个分布式数据一致性的解决方案，分布式应用可以基于它实现诸如数据发布/订阅，负载均衡，命名服务，分布式协调/通知，集群管理，Master选举，分布式锁和分布式队列等功能。**Zookeeper致力于提供一个高性能、高可用、且具有严格的顺序访问控制能力的分布式协调系统**。\n\n考虑到Zookeeper主要操作数据的状态，为了保证状态的一致性，Zookeeper提出了两个安全属性:\n\n1. 全序（Total order）：如果消息a在消息b之前发送，则所有Server应该看到相同的结果；\n2. 因果顺序（Causal order）：如果消息a在消息b之前发生（a导致了b），并被一起发送，则a始终在b之前被执行；\n\n为了保证上述两个安全属性，Zookeeper使用了**TCP协议和Leader**：\n\n1. 通过使用TCP协议保证了消息的全序特性（先发先到）；\n2. 通过Leader解决了因果顺序问题：先到Leader的先执行，但是这样的话Leader有可能出现出现网络中断、崩溃退出与重启等异常情况，这就有必要引入Leader选举算法；\n\n\n\n而ZAB(Zookeeper Atomic Broadcast即Zookeeper原子消息广播协议)正是作为其数据一致性的核心算法，下面介绍一下ZAB协议。\n\n## 二、什么是Zab协议\n\nZAB ，Zookeeper Atomic Broadcast，zk 原子消息广播协议，是专为 ZooKeeper 设计的一 种支持崩溃恢复的原子广播协议。在 Zookeeper 中，基于该协议，ZooKeeper 实现了一种主从模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n\n\nZookeeper 使用一个单一主进程来接收并处理客户端的所有事务请求，即写请求。当服 务器数据的状态发生变更后，集群采用 ZAB 原子广播协议，以事务提案 Proposal 的形式广 播到所有的副本进程上。ZAB 协议能够保证一个全局的变更序列，即可以为每一个事务分配 一个全局的递增编号 xid。\n\n\n\n当 Zookeeper 客户端连接到 Zookeeper 集群的一个节点后，若客户端提交的是读请求， 那么当前节点就直接根据自己保存的数据对其进行响应；如果是写请求且当前节点不是 Leader，那么节点就会将该写请求转发给 Leader，Leader 会以提案的方式广播该写操作，只 要有超过半数节点同意该写操作，则该写操作请求就会被提交。然后 Leader 会再次广播给 所有订阅者，即 Learner，通知它们同步数据。\n\n\n\n![](http://media.coderluo.top/1.png)\n\n\n\n## 三、Zab协议原理\n\nZab协议要求每个 Leader 都要经历三个阶段：**发现，同步，广播**。\n\n1. **发现**：要求zookeeper集群必须选举出一个 Leader 进程，同时 Leader 会维护一个 Follower 可用客户端列表。将来客户端可以和这些 Follower节点进行通信。\n2. **同步**：Leader 要负责将本身的数据与 Follower 完成同步，做到多副本存储。这样也是提现了CAP中的高可用和分区容错。Follower将队列中未处理完的请求消费完成后，写入本地事务日志中\n3. **广播**：Leader 可以接受客户端新的事务Proposal请求，将新的Proposal请求广播给所有的 Follower。\n\n\n\n## 四、Zab协议核心\n\nZab协议的核心：**定义了事务请求的处理方式**\n\n1. 所有的事务请求必须由一个全局唯一的服务器来协调处理，这样的服务器被叫做 **Leader服务器**。其他剩余的服务器则是 **Follower服务器**。\n2. Leader服务器 负责将一个客户端事务请求，转换成一个 **事务Proposal**，并将该 Proposal 分发给集群中所有的 Follower 服务器，也就是向所有 Follower 节点发送数据广播请求（或数据复制）\n3. 分发之后Leader服务器需要等待所有Follower服务器的反馈（Ack请求），**在Zab协议中，只要超过半数的Follower服务器进行了正确的反馈**后（也就是收到半数以上的Follower的Ack请求），那么 Leader 就会再次向所有的 Follower服务器发送 Commit 消息，要求其将上一个 事务proposal 进行提交。\n\n\n\n![](http://media.coderluo.top/2.png)\n\n\n\n## 五、Zab协议内容\n\nZab 协议包括两种基本的模式：**崩溃恢复** 和 **消息广播**\n\n### 1.协议过程\n\n当整个集群启动过程中，或者当 Leader 服务器出现网络中弄断、崩溃退出或重启等异常时，Zab协议就会 **进入崩溃恢复模式**，选举产生新的Leader。\n\n当选举产生了新的 Leader，同时集群中有过半的机器与该 Leader 服务器完成了状态同步（即数据同步）之后，Zab协议就会退出崩溃恢复模式，**进入消息广播模式**。\n\n这时，如果有一台遵守Zab协议的服务器加入集群，因为此时集群中已经存在一个Leader服务器在广播消息，那么该新加入的服务器自动进入恢复模式：找到Leader服务器，并且完成数据同步。同步完成后，作为新的Follower一起参与到消息广播流程中。\n\n### 2.协议状态切换\n\n当Leader出现崩溃退出或者机器重启，亦或是集群中不存在超过半数的服务器与Leader保存正常通信，Zab就会再一次进入崩溃恢复，发起新一轮Leader选举并实现数据同步。同步完成后又会进入消息广播模式，接收事务请求。\n\n### 3.保证消息有序\n\n在整个消息广播中，Leader会将每一个事务请求转换成对应的 proposal 来进行广播，并且在广播 事务Proposal 之前，Leader服务器会首先为这个事务Proposal分配一个全局单递增的唯一ID，称之为事务ID（即zxid），由于Zab协议需要保证每一个消息的严格的顺序关系，因此必须将每一个proposal按照其zxid的先后顺序进行排序和处理。\n\n## 六、崩溃恢复\n\n\n\n**一旦 Leader 服务器出现崩溃或者由于网络原因导致 Leader 服务器失去了与过半 Follower 的联系，那么就会进入崩溃恢复模式。**\n\n前面我们说过，崩溃恢复具有两个阶段：**Leader 选举与初始化同步**。当完成 Leader 选 举后，此时的 Leader 还是一个准 Leader，其要经过初始化同步后才能变为真正的 Leader。\n\n###  初始化同步\n\n\n\n![](http://media.coderluo.top/3.png)\n\n\n\n具体过程如下：\n\n1. 为了保证 Leader 向 Learner 发送提案的有序，Leader 会为每一个 Learner 服务器准备一 个队列；\n2. Leader 将那些没有被各个 Learner 同步的事务封装为 Proposal；\n3. Leader 将这些 Proposal 逐条发给各个 Learner，并在每一个 Proposal 后都紧跟一个 COMMIT 消息，表示该事务已经被提交，Learner 可以直接接收并执行 ；\n4. Learner 接收来自于 Leader 的 Proposal，并将其更新到本地；\n5. 当 Learner 更新成功后，会向准 Leader 发送 ACK 信息；\n6. Leader 服务器在收到来自 Learner 的 ACK 后就会将该 Learner 加入到真正可用的 Follower 列表或 Observer 列表。没有反馈 ACK，或反馈了但 Leader 没有收到的 Learner，Leader 不会将其加入到相应列表。\n\n\n\n## 七、恢复模式的两个原则\n\n当集群正在启动过程中，或 Leader 与超过半数的主机断连后，集群就进入了恢复模式。 对于要恢复的数据状态需要遵循两个原则。\n\n### 1. 已被处理过的消息不能丢\n\n当 Leader 收到超过半数 Follower 的 ACKs 后，就向各个 Follower 广播 COMMIT 消息， 批准各个 Server 执行该写操作事务。当各个 Server 在接收到 Leader 的 COMMIT 消息后就会在本地执行该写操作，然后会向客户端响应写操作成功。\n\n但是如果在非全部 Follower 收到 COMMIT 消息之前 Leader 就挂了，这将导致一种后 果：**部分 Server 已经执行了该事务，而部分 Server 尚未收到 COMMIT 消息**，所以其并没有 执行该事务。当新的 Leader 被选举出，集群经过恢复模式后需要保证所有 Server 上都执行 了那些已经被部分 Server 执行过的事务。\n\n\n\n### 2. 被丢弃的消息不能再现\n\n当在 Leader 新事务已经通过，其已经将该事务更新到了本地，但所有 Follower 还都没 有收到 COMMIT 之前，Leader 宕机了（比前面叙述的宕机更早），此时，所有 Follower 根本 就不知道该 Proposal 的存在。当新的 Leader 选举出来，整个集群进入正常服务状态后，之 前挂了的 Leader 主机重新启动并注册成为了 Follower。若那个别人根本不知道的 Proposal 还保留在那个主机，那么其数据就会比其它主机多出了内容，导致整个系统状态的不一致。 所以，该 Proposa 应该被丢弃。类似这样应该被丢弃的事务，是不能再次出现在集群中的， 应该被清除。\n\n\n\n## 八、消息广播\n\n当集群中的 Learner 完成了初始化状态同步，那么整个 zk 集群就进入到了正常工作模式 了。\n\n![](http://media.coderluo.top/4.png)\n\n\n\n如果集群中的 Learner 节点收到客户端的事务请求，那么这些 Learner 会将请求转发给 Leader 服务器。然后再执行如下的具体过程：\n\n1. Leader 接收到事务请求后，为事务赋予一个全局唯一的 64 位自增 id，即 zxid，通过 zxid 的大小比较即可实现事务的有序性管理，然后将事务封装为一个 Proposal。\n2. Leader 根据 Follower 列表获取到所有 Follower，然后再将 Proposal 通过这些 Follower 的 队列将提案发送给各个 Follower。\n3. 当 Follower 接收到提案后，会先将提案的 zxid 与本地记录的事务日志中的最大的 zxid 进行比较。若当前提案的 zxid 大于最大 zxid，则将当前提案记录到本地事务日志中，并 向 Leader 返回一个 ACK。（提问学员）\n4. 当 Leader 接收到过半的 ACKs 后，Leader 就会向所有 Follower 的队列发送 COMMIT 消息，向所有 Observer 的队列发送 Proposal。\n5. 当 Follower 收到 COMMIT 消息后，就会将日志中的事务正式更新到本地。当 Observer 收到 Proposal 后，会直接将事务更新到本地。\n6. 无论是 Follower 还是 Observer，在同步完成后都需要向 Leader 发送成功 ACK。\n\n\n\n\n\n\n\n## 九、实现原理\n\n### 1.三类角色\n\n\n\n为了避免 Zookeeper 的单点问题，zk 也是以集群的形式出现的。zk 集群中的角色主要有 以下三类：\n\n- Leader：接收和处理客户端的读请求；zk 集群中事务请求的唯一处理者，并负责发起决 议和投票，然后将通过的事务请求在本地进行处理后，将处理结果同步给集群中的其它主机。\n- Follower：接收和处理客户端的读请求; 将事务请求转给 Leader；同步 Leader 中的数据； 当 Leader 挂了，参与 Leader 的选举（具有选举权与被选举权）；\n- Observer：就是没有选举权与被选举权，且没有投票权的 Follower（临时工）。若 zk 集 群中的读压力很大，则需要增加 Observer，最好不要增加 Follower。因为增加 Follower 将会增大投票与统计选票的压力，降低写操作效率，及 Leader 选举的效率。\n\n这三类角色在不同的情况下又有一些不同的名称（这个为了下一篇阅读源码做准备，可以先了解即可）：\n\n- Learner = Follower + Observer\n- QuorumServer = Follower + Leader\n\n### 2.三个数据\n\n\n\n在 ZAB 中有三个很重要的数据：\n\n- zxid：是一个 64 位长度的 Long 类型。其中高 32 位表示 epoch，低 32 表示 xid。\n- epoch：每个 Leader 都会具有一个不同的 epoch，用于区分不同的时期（可以理解为朝代的年号）\n- xid：事务 id，是一个流水号，（每次朝代更替，即leader更换），从0开始递增。\n\n每当选举产生一个新的 Leader ，就会从这个 Leader 服务器上取出本地事务日志中最大编号 Proposal 的 zxid，并从 zxid 中解析得到对应的 epoch 编号，然后再对其加1，之后该编号就作为新的 epoch 值，并将低32位数字归零，由0开始重新生成zxid。\n\n\n\n### 3.三种状态\n\nzk 集群中的每一台主机，在不同的阶段会处于不同的状态。每一台主机具有四种状态。\n\n- LOOKING：选举状态\n\n- FOLLOWING：Follower 的正常工作状态，从 Leader 同步数据的状态\n\n- LEADING：Leader 的正常工作状态，Leader 广播数据更新的状态\n\n  \n\nOBSERVING：Observer 的正常工作状态，从 Leader 同步数据的状态\n\n> 代码实现中，多了一种状态：Observing 状态这是 Zookeeper 引入 Observer 之后加入的，Observer 不参与选举，是只读节点，实际上跟 Zab 协议没有关系。这里为了阅读源码加上此概念。\n\n\n\n### 4.Zab 的四个阶段\n\n\n\n- **myid**:这是 zk 集群中服务器的唯一标识，称为 myid。例如，有三个 zk 服务器，那么编号分别 是 1,2,3。\n- **逻辑时钟**:逻辑时钟，Logicalclock，是一个整型数，该概念在选举时称为 logicalclock，而在选举结 束后称为 epoch。即 epoch 与 logicalclock 是同一个值，在不同情况下的不同名称。\n\n#### 1).选举阶段（Leader Election）\n\n节点在一开始都处于选举节点，只要有一个节点得到超过半数节点的票数，它就可以当选准 Leader，只有到达第三个阶段（也就是同步阶段），这个准 Leader 才会成为真正的 Leader。\n\n**Zookeeper 规定所有有效的投票都必须在同一个 轮次 中，每个服务器在开始新一轮投票时，都会对自己维护的 logicalClock 进行自增操作**。\n\n每个服务器在广播自己的选票前，会将自己的投票箱（recvset）清空。该投票箱记录了所受到的选票。\n\n例如：Server_2 投票给 Server_3，Server_3 投票给 Server_1，则Server_1的投票箱为(2,3)、(3,1)、(1,1)。（每个服务器都会默认给自己投票）\n\n前一个数字表示投票者，后一个数字表示被选举者。票箱中只会记录每一个投票者的最后一次投票记录，如果投票者更新自己的选票，则其他服务器收到该新选票后会在自己的票箱中更新该服务器的选票。**思考下：这里在实现中应该怎么实现呢？**等我们分析源码时就可以看到，非常的巧妙。\n\n![](http://media.coderluo.top/5.png)\n\n\n\n**这一阶段的目的就是为了选出一个准 Leader ，然后进入下一个阶段。**\n\n#### 2). 发现阶段（Descovery）\n\n在这个阶段，Followers 和上一轮选举出的准 Leader 进行通信，同步 Followers 最近接收的事务 Proposal 。\n\n**这个阶段的主要目的是发现当前大多数节点接收的最新 Proposal，并且准 Leader 生成新的 epoch ，让 Followers 接收，更新它们的 acceptedEpoch**。\n\n#### 3). 同步阶段（Synchronization)\n\n**同步阶段主要是利用 Leader 前一阶段获得的最新 Proposal 历史，同步集群中所有的副本**。\n\n只有当 quorum（超过半数的节点） 都同步完成，准 Leader 才会成为真正的 Leader。Follower 只会接收 zxid 比自己 lastZxid 大的 Proposal。\n\n#### 4). 广播阶段（Broadcast）\n\n到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 Leader 可以进行消息广播。同时，如果有新的节点加入，还需要对新节点进行同步。\n 需要注意的是，Zab 提交事务并不像 2PC 一样需要全部 Follower 都 Ack，只需要得到 quorum（超过半数的节点）的Ack 就可以。\n\n\n\n## 十、Zab与Paxos\n\n上面已经针对Zab协议涉及流程作了详细的描述，那么它和Paxos是什么关系呢？\n\nZab的作者认为Zab与paxos并不相同，之所以没有采用Paxos是因为Paxos保证不了全序顺序：\n\n> Because multiple leaders can propose a value for a given instance two problems arise.\n> First, proposals can conflict. Paxos uses ballots to detect and resolve conflicting proposals.\n> Second, it is not enough to know that a given instance number has been committed, processes must also be able to fi gure out which value has been committed.\n\n\n\nPaxos算法的确是不关心请求之间的逻辑顺序，而只考虑数据之间的全序，但很少有人直接使用paxos算法，都会经过一定的简化、优化。\n\nGoogle的粗粒度锁服务Chubby的设计开发者Burrows曾经说过：“**所有一致性协议本质上要么是Paxos要么是其变体**”。这句话还是有一定道理的，ZAB本质上就是Paxos的一种简化形式。\n\n\n\n**总结：**本文主要讲解了Zab上述一系列巧妙的设计，比如：为了加快收敛速度避免活锁引发的竞争引入了Leader角色，在正常情况下最多只有一个参与者扮演Leader角色，其他参与者扮演Acceptor；在这种优化算法中，只有Leader可以提出议案，从而避免了竞争使得算法能够快速地收敛而趋于一致；而为了保证Leader的健壮性，又引入了Leader选举，再考虑到同步的阶段，提出了消息广播和崩溃初始化同步以及恢复模式的两个原则。\n\n下篇文章我们就会进入Zookeeper源码分析篇，直击源码，一起掌握核心代码逻辑。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/zookeeper/Zookeeper深度学习2-Zab协议详解.md","raw":"---\ntitle: 'Zookeeper深度学习2-Zab协议详解'\ntags:\n  - Zab\n  - Zookeeper\ndate: 2019-09-08 22:48:16\ncategories: Zookeeper\n\n---\n\n\n\n\n> 今天讲解的主题是Zookeeper实现的基础协议--**Zab协议（Zookeeper Atomic Broadcast）**，也称为zk原子广播协议。\n\n\n\n首先大家可能会有疑问，**Zab和我们上一篇讲解的Paxos之间有什么区别和联系？**别着急，带着这个问题接着往下看吧，后面我会揭晓这个问题的答案的。\n\n\n\n## 一、Zookeeper简介\n\n\n\nZookeeper是一个分布式数据一致性的解决方案，分布式应用可以基于它实现诸如数据发布/订阅，负载均衡，命名服务，分布式协调/通知，集群管理，Master选举，分布式锁和分布式队列等功能。**Zookeeper致力于提供一个高性能、高可用、且具有严格的顺序访问控制能力的分布式协调系统**。\n\n考虑到Zookeeper主要操作数据的状态，为了保证状态的一致性，Zookeeper提出了两个安全属性:\n\n1. 全序（Total order）：如果消息a在消息b之前发送，则所有Server应该看到相同的结果；\n2. 因果顺序（Causal order）：如果消息a在消息b之前发生（a导致了b），并被一起发送，则a始终在b之前被执行；\n\n为了保证上述两个安全属性，Zookeeper使用了**TCP协议和Leader**：\n\n1. 通过使用TCP协议保证了消息的全序特性（先发先到）；\n2. 通过Leader解决了因果顺序问题：先到Leader的先执行，但是这样的话Leader有可能出现出现网络中断、崩溃退出与重启等异常情况，这就有必要引入Leader选举算法；\n\n\n\n而ZAB(Zookeeper Atomic Broadcast即Zookeeper原子消息广播协议)正是作为其数据一致性的核心算法，下面介绍一下ZAB协议。\n\n## 二、什么是Zab协议\n\nZAB ，Zookeeper Atomic Broadcast，zk 原子消息广播协议，是专为 ZooKeeper 设计的一 种支持崩溃恢复的原子广播协议。在 Zookeeper 中，基于该协议，ZooKeeper 实现了一种主从模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n\n\nZookeeper 使用一个单一主进程来接收并处理客户端的所有事务请求，即写请求。当服 务器数据的状态发生变更后，集群采用 ZAB 原子广播协议，以事务提案 Proposal 的形式广 播到所有的副本进程上。ZAB 协议能够保证一个全局的变更序列，即可以为每一个事务分配 一个全局的递增编号 xid。\n\n\n\n当 Zookeeper 客户端连接到 Zookeeper 集群的一个节点后，若客户端提交的是读请求， 那么当前节点就直接根据自己保存的数据对其进行响应；如果是写请求且当前节点不是 Leader，那么节点就会将该写请求转发给 Leader，Leader 会以提案的方式广播该写操作，只 要有超过半数节点同意该写操作，则该写操作请求就会被提交。然后 Leader 会再次广播给 所有订阅者，即 Learner，通知它们同步数据。\n\n\n\n![](http://media.coderluo.top/1.png)\n\n\n\n## 三、Zab协议原理\n\nZab协议要求每个 Leader 都要经历三个阶段：**发现，同步，广播**。\n\n1. **发现**：要求zookeeper集群必须选举出一个 Leader 进程，同时 Leader 会维护一个 Follower 可用客户端列表。将来客户端可以和这些 Follower节点进行通信。\n2. **同步**：Leader 要负责将本身的数据与 Follower 完成同步，做到多副本存储。这样也是提现了CAP中的高可用和分区容错。Follower将队列中未处理完的请求消费完成后，写入本地事务日志中\n3. **广播**：Leader 可以接受客户端新的事务Proposal请求，将新的Proposal请求广播给所有的 Follower。\n\n\n\n## 四、Zab协议核心\n\nZab协议的核心：**定义了事务请求的处理方式**\n\n1. 所有的事务请求必须由一个全局唯一的服务器来协调处理，这样的服务器被叫做 **Leader服务器**。其他剩余的服务器则是 **Follower服务器**。\n2. Leader服务器 负责将一个客户端事务请求，转换成一个 **事务Proposal**，并将该 Proposal 分发给集群中所有的 Follower 服务器，也就是向所有 Follower 节点发送数据广播请求（或数据复制）\n3. 分发之后Leader服务器需要等待所有Follower服务器的反馈（Ack请求），**在Zab协议中，只要超过半数的Follower服务器进行了正确的反馈**后（也就是收到半数以上的Follower的Ack请求），那么 Leader 就会再次向所有的 Follower服务器发送 Commit 消息，要求其将上一个 事务proposal 进行提交。\n\n\n\n![](http://media.coderluo.top/2.png)\n\n\n\n## 五、Zab协议内容\n\nZab 协议包括两种基本的模式：**崩溃恢复** 和 **消息广播**\n\n### 1.协议过程\n\n当整个集群启动过程中，或者当 Leader 服务器出现网络中弄断、崩溃退出或重启等异常时，Zab协议就会 **进入崩溃恢复模式**，选举产生新的Leader。\n\n当选举产生了新的 Leader，同时集群中有过半的机器与该 Leader 服务器完成了状态同步（即数据同步）之后，Zab协议就会退出崩溃恢复模式，**进入消息广播模式**。\n\n这时，如果有一台遵守Zab协议的服务器加入集群，因为此时集群中已经存在一个Leader服务器在广播消息，那么该新加入的服务器自动进入恢复模式：找到Leader服务器，并且完成数据同步。同步完成后，作为新的Follower一起参与到消息广播流程中。\n\n### 2.协议状态切换\n\n当Leader出现崩溃退出或者机器重启，亦或是集群中不存在超过半数的服务器与Leader保存正常通信，Zab就会再一次进入崩溃恢复，发起新一轮Leader选举并实现数据同步。同步完成后又会进入消息广播模式，接收事务请求。\n\n### 3.保证消息有序\n\n在整个消息广播中，Leader会将每一个事务请求转换成对应的 proposal 来进行广播，并且在广播 事务Proposal 之前，Leader服务器会首先为这个事务Proposal分配一个全局单递增的唯一ID，称之为事务ID（即zxid），由于Zab协议需要保证每一个消息的严格的顺序关系，因此必须将每一个proposal按照其zxid的先后顺序进行排序和处理。\n\n## 六、崩溃恢复\n\n\n\n**一旦 Leader 服务器出现崩溃或者由于网络原因导致 Leader 服务器失去了与过半 Follower 的联系，那么就会进入崩溃恢复模式。**\n\n前面我们说过，崩溃恢复具有两个阶段：**Leader 选举与初始化同步**。当完成 Leader 选 举后，此时的 Leader 还是一个准 Leader，其要经过初始化同步后才能变为真正的 Leader。\n\n###  初始化同步\n\n\n\n![](http://media.coderluo.top/3.png)\n\n\n\n具体过程如下：\n\n1. 为了保证 Leader 向 Learner 发送提案的有序，Leader 会为每一个 Learner 服务器准备一 个队列；\n2. Leader 将那些没有被各个 Learner 同步的事务封装为 Proposal；\n3. Leader 将这些 Proposal 逐条发给各个 Learner，并在每一个 Proposal 后都紧跟一个 COMMIT 消息，表示该事务已经被提交，Learner 可以直接接收并执行 ；\n4. Learner 接收来自于 Leader 的 Proposal，并将其更新到本地；\n5. 当 Learner 更新成功后，会向准 Leader 发送 ACK 信息；\n6. Leader 服务器在收到来自 Learner 的 ACK 后就会将该 Learner 加入到真正可用的 Follower 列表或 Observer 列表。没有反馈 ACK，或反馈了但 Leader 没有收到的 Learner，Leader 不会将其加入到相应列表。\n\n\n\n## 七、恢复模式的两个原则\n\n当集群正在启动过程中，或 Leader 与超过半数的主机断连后，集群就进入了恢复模式。 对于要恢复的数据状态需要遵循两个原则。\n\n### 1. 已被处理过的消息不能丢\n\n当 Leader 收到超过半数 Follower 的 ACKs 后，就向各个 Follower 广播 COMMIT 消息， 批准各个 Server 执行该写操作事务。当各个 Server 在接收到 Leader 的 COMMIT 消息后就会在本地执行该写操作，然后会向客户端响应写操作成功。\n\n但是如果在非全部 Follower 收到 COMMIT 消息之前 Leader 就挂了，这将导致一种后 果：**部分 Server 已经执行了该事务，而部分 Server 尚未收到 COMMIT 消息**，所以其并没有 执行该事务。当新的 Leader 被选举出，集群经过恢复模式后需要保证所有 Server 上都执行 了那些已经被部分 Server 执行过的事务。\n\n\n\n### 2. 被丢弃的消息不能再现\n\n当在 Leader 新事务已经通过，其已经将该事务更新到了本地，但所有 Follower 还都没 有收到 COMMIT 之前，Leader 宕机了（比前面叙述的宕机更早），此时，所有 Follower 根本 就不知道该 Proposal 的存在。当新的 Leader 选举出来，整个集群进入正常服务状态后，之 前挂了的 Leader 主机重新启动并注册成为了 Follower。若那个别人根本不知道的 Proposal 还保留在那个主机，那么其数据就会比其它主机多出了内容，导致整个系统状态的不一致。 所以，该 Proposa 应该被丢弃。类似这样应该被丢弃的事务，是不能再次出现在集群中的， 应该被清除。\n\n\n\n## 八、消息广播\n\n当集群中的 Learner 完成了初始化状态同步，那么整个 zk 集群就进入到了正常工作模式 了。\n\n![](http://media.coderluo.top/4.png)\n\n\n\n如果集群中的 Learner 节点收到客户端的事务请求，那么这些 Learner 会将请求转发给 Leader 服务器。然后再执行如下的具体过程：\n\n1. Leader 接收到事务请求后，为事务赋予一个全局唯一的 64 位自增 id，即 zxid，通过 zxid 的大小比较即可实现事务的有序性管理，然后将事务封装为一个 Proposal。\n2. Leader 根据 Follower 列表获取到所有 Follower，然后再将 Proposal 通过这些 Follower 的 队列将提案发送给各个 Follower。\n3. 当 Follower 接收到提案后，会先将提案的 zxid 与本地记录的事务日志中的最大的 zxid 进行比较。若当前提案的 zxid 大于最大 zxid，则将当前提案记录到本地事务日志中，并 向 Leader 返回一个 ACK。（提问学员）\n4. 当 Leader 接收到过半的 ACKs 后，Leader 就会向所有 Follower 的队列发送 COMMIT 消息，向所有 Observer 的队列发送 Proposal。\n5. 当 Follower 收到 COMMIT 消息后，就会将日志中的事务正式更新到本地。当 Observer 收到 Proposal 后，会直接将事务更新到本地。\n6. 无论是 Follower 还是 Observer，在同步完成后都需要向 Leader 发送成功 ACK。\n\n\n\n\n\n\n\n## 九、实现原理\n\n### 1.三类角色\n\n\n\n为了避免 Zookeeper 的单点问题，zk 也是以集群的形式出现的。zk 集群中的角色主要有 以下三类：\n\n- Leader：接收和处理客户端的读请求；zk 集群中事务请求的唯一处理者，并负责发起决 议和投票，然后将通过的事务请求在本地进行处理后，将处理结果同步给集群中的其它主机。\n- Follower：接收和处理客户端的读请求; 将事务请求转给 Leader；同步 Leader 中的数据； 当 Leader 挂了，参与 Leader 的选举（具有选举权与被选举权）；\n- Observer：就是没有选举权与被选举权，且没有投票权的 Follower（临时工）。若 zk 集 群中的读压力很大，则需要增加 Observer，最好不要增加 Follower。因为增加 Follower 将会增大投票与统计选票的压力，降低写操作效率，及 Leader 选举的效率。\n\n这三类角色在不同的情况下又有一些不同的名称（这个为了下一篇阅读源码做准备，可以先了解即可）：\n\n- Learner = Follower + Observer\n- QuorumServer = Follower + Leader\n\n### 2.三个数据\n\n\n\n在 ZAB 中有三个很重要的数据：\n\n- zxid：是一个 64 位长度的 Long 类型。其中高 32 位表示 epoch，低 32 表示 xid。\n- epoch：每个 Leader 都会具有一个不同的 epoch，用于区分不同的时期（可以理解为朝代的年号）\n- xid：事务 id，是一个流水号，（每次朝代更替，即leader更换），从0开始递增。\n\n每当选举产生一个新的 Leader ，就会从这个 Leader 服务器上取出本地事务日志中最大编号 Proposal 的 zxid，并从 zxid 中解析得到对应的 epoch 编号，然后再对其加1，之后该编号就作为新的 epoch 值，并将低32位数字归零，由0开始重新生成zxid。\n\n\n\n### 3.三种状态\n\nzk 集群中的每一台主机，在不同的阶段会处于不同的状态。每一台主机具有四种状态。\n\n- LOOKING：选举状态\n\n- FOLLOWING：Follower 的正常工作状态，从 Leader 同步数据的状态\n\n- LEADING：Leader 的正常工作状态，Leader 广播数据更新的状态\n\n  \n\nOBSERVING：Observer 的正常工作状态，从 Leader 同步数据的状态\n\n> 代码实现中，多了一种状态：Observing 状态这是 Zookeeper 引入 Observer 之后加入的，Observer 不参与选举，是只读节点，实际上跟 Zab 协议没有关系。这里为了阅读源码加上此概念。\n\n\n\n### 4.Zab 的四个阶段\n\n\n\n- **myid**:这是 zk 集群中服务器的唯一标识，称为 myid。例如，有三个 zk 服务器，那么编号分别 是 1,2,3。\n- **逻辑时钟**:逻辑时钟，Logicalclock，是一个整型数，该概念在选举时称为 logicalclock，而在选举结 束后称为 epoch。即 epoch 与 logicalclock 是同一个值，在不同情况下的不同名称。\n\n#### 1).选举阶段（Leader Election）\n\n节点在一开始都处于选举节点，只要有一个节点得到超过半数节点的票数，它就可以当选准 Leader，只有到达第三个阶段（也就是同步阶段），这个准 Leader 才会成为真正的 Leader。\n\n**Zookeeper 规定所有有效的投票都必须在同一个 轮次 中，每个服务器在开始新一轮投票时，都会对自己维护的 logicalClock 进行自增操作**。\n\n每个服务器在广播自己的选票前，会将自己的投票箱（recvset）清空。该投票箱记录了所受到的选票。\n\n例如：Server_2 投票给 Server_3，Server_3 投票给 Server_1，则Server_1的投票箱为(2,3)、(3,1)、(1,1)。（每个服务器都会默认给自己投票）\n\n前一个数字表示投票者，后一个数字表示被选举者。票箱中只会记录每一个投票者的最后一次投票记录，如果投票者更新自己的选票，则其他服务器收到该新选票后会在自己的票箱中更新该服务器的选票。**思考下：这里在实现中应该怎么实现呢？**等我们分析源码时就可以看到，非常的巧妙。\n\n![](http://media.coderluo.top/5.png)\n\n\n\n**这一阶段的目的就是为了选出一个准 Leader ，然后进入下一个阶段。**\n\n#### 2). 发现阶段（Descovery）\n\n在这个阶段，Followers 和上一轮选举出的准 Leader 进行通信，同步 Followers 最近接收的事务 Proposal 。\n\n**这个阶段的主要目的是发现当前大多数节点接收的最新 Proposal，并且准 Leader 生成新的 epoch ，让 Followers 接收，更新它们的 acceptedEpoch**。\n\n#### 3). 同步阶段（Synchronization)\n\n**同步阶段主要是利用 Leader 前一阶段获得的最新 Proposal 历史，同步集群中所有的副本**。\n\n只有当 quorum（超过半数的节点） 都同步完成，准 Leader 才会成为真正的 Leader。Follower 只会接收 zxid 比自己 lastZxid 大的 Proposal。\n\n#### 4). 广播阶段（Broadcast）\n\n到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 Leader 可以进行消息广播。同时，如果有新的节点加入，还需要对新节点进行同步。\n 需要注意的是，Zab 提交事务并不像 2PC 一样需要全部 Follower 都 Ack，只需要得到 quorum（超过半数的节点）的Ack 就可以。\n\n\n\n## 十、Zab与Paxos\n\n上面已经针对Zab协议涉及流程作了详细的描述，那么它和Paxos是什么关系呢？\n\nZab的作者认为Zab与paxos并不相同，之所以没有采用Paxos是因为Paxos保证不了全序顺序：\n\n> Because multiple leaders can propose a value for a given instance two problems arise.\n> First, proposals can conflict. Paxos uses ballots to detect and resolve conflicting proposals.\n> Second, it is not enough to know that a given instance number has been committed, processes must also be able to fi gure out which value has been committed.\n\n\n\nPaxos算法的确是不关心请求之间的逻辑顺序，而只考虑数据之间的全序，但很少有人直接使用paxos算法，都会经过一定的简化、优化。\n\nGoogle的粗粒度锁服务Chubby的设计开发者Burrows曾经说过：“**所有一致性协议本质上要么是Paxos要么是其变体**”。这句话还是有一定道理的，ZAB本质上就是Paxos的一种简化形式。\n\n\n\n**总结：**本文主要讲解了Zab上述一系列巧妙的设计，比如：为了加快收敛速度避免活锁引发的竞争引入了Leader角色，在正常情况下最多只有一个参与者扮演Leader角色，其他参与者扮演Acceptor；在这种优化算法中，只有Leader可以提出议案，从而避免了竞争使得算法能够快速地收敛而趋于一致；而为了保证Leader的健壮性，又引入了Leader选举，再考虑到同步的阶段，提出了消息广播和崩溃初始化同步以及恢复模式的两个原则。\n\n下篇文章我们就会进入Zookeeper源码分析篇，直击源码，一起掌握核心代码逻辑。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"zookeeper/Zookeeper深度学习2-Zab协议详解","published":1,"updated":"2019-09-28T15:55:44.066Z","_id":"ck13pbo5x000wc3o6qkfathvj","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>今天讲解的主题是Zookeeper实现的基础协议–<strong>Zab协议（Zookeeper Atomic Broadcast）</strong>，也称为zk原子广播协议。</p>\n</blockquote>\n<p>首先大家可能会有疑问，<strong>Zab和我们上一篇讲解的Paxos之间有什么区别和联系？</strong>别着急，带着这个问题接着往下看吧，后面我会揭晓这个问题的答案的。</p>\n<h2 id=\"一、Zookeeper简介\"><a href=\"#一、Zookeeper简介\" class=\"headerlink\" title=\"一、Zookeeper简介\"></a>一、Zookeeper简介</h2><p>Zookeeper是一个分布式数据一致性的解决方案，分布式应用可以基于它实现诸如数据发布/订阅，负载均衡，命名服务，分布式协调/通知，集群管理，Master选举，分布式锁和分布式队列等功能。<strong>Zookeeper致力于提供一个高性能、高可用、且具有严格的顺序访问控制能力的分布式协调系统</strong>。</p>\n<p>考虑到Zookeeper主要操作数据的状态，为了保证状态的一致性，Zookeeper提出了两个安全属性:</p>\n<ol>\n<li>全序（Total order）：如果消息a在消息b之前发送，则所有Server应该看到相同的结果；</li>\n<li>因果顺序（Causal order）：如果消息a在消息b之前发生（a导致了b），并被一起发送，则a始终在b之前被执行；</li>\n</ol>\n<p>为了保证上述两个安全属性，Zookeeper使用了<strong>TCP协议和Leader</strong>：</p>\n<ol>\n<li>通过使用TCP协议保证了消息的全序特性（先发先到）；</li>\n<li>通过Leader解决了因果顺序问题：先到Leader的先执行，但是这样的话Leader有可能出现出现网络中断、崩溃退出与重启等异常情况，这就有必要引入Leader选举算法；</li>\n</ol>\n<p>而ZAB(Zookeeper Atomic Broadcast即Zookeeper原子消息广播协议)正是作为其数据一致性的核心算法，下面介绍一下ZAB协议。</p>\n<h2 id=\"二、什么是Zab协议\"><a href=\"#二、什么是Zab协议\" class=\"headerlink\" title=\"二、什么是Zab协议\"></a>二、什么是Zab协议</h2><p>ZAB ，Zookeeper Atomic Broadcast，zk 原子消息广播协议，是专为 ZooKeeper 设计的一 种支持崩溃恢复的原子广播协议。在 Zookeeper 中，基于该协议，ZooKeeper 实现了一种主从模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<p>Zookeeper 使用一个单一主进程来接收并处理客户端的所有事务请求，即写请求。当服 务器数据的状态发生变更后，集群采用 ZAB 原子广播协议，以事务提案 Proposal 的形式广 播到所有的副本进程上。ZAB 协议能够保证一个全局的变更序列，即可以为每一个事务分配 一个全局的递增编号 xid。</p>\n<p>当 Zookeeper 客户端连接到 Zookeeper 集群的一个节点后，若客户端提交的是读请求， 那么当前节点就直接根据自己保存的数据对其进行响应；如果是写请求且当前节点不是 Leader，那么节点就会将该写请求转发给 Leader，Leader 会以提案的方式广播该写操作，只 要有超过半数节点同意该写操作，则该写操作请求就会被提交。然后 Leader 会再次广播给 所有订阅者，即 Learner，通知它们同步数据。</p>\n<p><img src=\"http://media.coderluo.top/1.png\" alt=\"\"></p>\n<h2 id=\"三、Zab协议原理\"><a href=\"#三、Zab协议原理\" class=\"headerlink\" title=\"三、Zab协议原理\"></a>三、Zab协议原理</h2><p>Zab协议要求每个 Leader 都要经历三个阶段：<strong>发现，同步，广播</strong>。</p>\n<ol>\n<li><strong>发现</strong>：要求zookeeper集群必须选举出一个 Leader 进程，同时 Leader 会维护一个 Follower 可用客户端列表。将来客户端可以和这些 Follower节点进行通信。</li>\n<li><strong>同步</strong>：Leader 要负责将本身的数据与 Follower 完成同步，做到多副本存储。这样也是提现了CAP中的高可用和分区容错。Follower将队列中未处理完的请求消费完成后，写入本地事务日志中</li>\n<li><strong>广播</strong>：Leader 可以接受客户端新的事务Proposal请求，将新的Proposal请求广播给所有的 Follower。</li>\n</ol>\n<h2 id=\"四、Zab协议核心\"><a href=\"#四、Zab协议核心\" class=\"headerlink\" title=\"四、Zab协议核心\"></a>四、Zab协议核心</h2><p>Zab协议的核心：<strong>定义了事务请求的处理方式</strong></p>\n<ol>\n<li>所有的事务请求必须由一个全局唯一的服务器来协调处理，这样的服务器被叫做 <strong>Leader服务器</strong>。其他剩余的服务器则是 <strong>Follower服务器</strong>。</li>\n<li>Leader服务器 负责将一个客户端事务请求，转换成一个 <strong>事务Proposal</strong>，并将该 Proposal 分发给集群中所有的 Follower 服务器，也就是向所有 Follower 节点发送数据广播请求（或数据复制）</li>\n<li>分发之后Leader服务器需要等待所有Follower服务器的反馈（Ack请求），<strong>在Zab协议中，只要超过半数的Follower服务器进行了正确的反馈</strong>后（也就是收到半数以上的Follower的Ack请求），那么 Leader 就会再次向所有的 Follower服务器发送 Commit 消息，要求其将上一个 事务proposal 进行提交。</li>\n</ol>\n<p><img src=\"http://media.coderluo.top/2.png\" alt=\"\"></p>\n<h2 id=\"五、Zab协议内容\"><a href=\"#五、Zab协议内容\" class=\"headerlink\" title=\"五、Zab协议内容\"></a>五、Zab协议内容</h2><p>Zab 协议包括两种基本的模式：<strong>崩溃恢复</strong> 和 <strong>消息广播</strong></p>\n<h3 id=\"1-协议过程\"><a href=\"#1-协议过程\" class=\"headerlink\" title=\"1.协议过程\"></a>1.协议过程</h3><p>当整个集群启动过程中，或者当 Leader 服务器出现网络中弄断、崩溃退出或重启等异常时，Zab协议就会 <strong>进入崩溃恢复模式</strong>，选举产生新的Leader。</p>\n<p>当选举产生了新的 Leader，同时集群中有过半的机器与该 Leader 服务器完成了状态同步（即数据同步）之后，Zab协议就会退出崩溃恢复模式，<strong>进入消息广播模式</strong>。</p>\n<p>这时，如果有一台遵守Zab协议的服务器加入集群，因为此时集群中已经存在一个Leader服务器在广播消息，那么该新加入的服务器自动进入恢复模式：找到Leader服务器，并且完成数据同步。同步完成后，作为新的Follower一起参与到消息广播流程中。</p>\n<h3 id=\"2-协议状态切换\"><a href=\"#2-协议状态切换\" class=\"headerlink\" title=\"2.协议状态切换\"></a>2.协议状态切换</h3><p>当Leader出现崩溃退出或者机器重启，亦或是集群中不存在超过半数的服务器与Leader保存正常通信，Zab就会再一次进入崩溃恢复，发起新一轮Leader选举并实现数据同步。同步完成后又会进入消息广播模式，接收事务请求。</p>\n<h3 id=\"3-保证消息有序\"><a href=\"#3-保证消息有序\" class=\"headerlink\" title=\"3.保证消息有序\"></a>3.保证消息有序</h3><p>在整个消息广播中，Leader会将每一个事务请求转换成对应的 proposal 来进行广播，并且在广播 事务Proposal 之前，Leader服务器会首先为这个事务Proposal分配一个全局单递增的唯一ID，称之为事务ID（即zxid），由于Zab协议需要保证每一个消息的严格的顺序关系，因此必须将每一个proposal按照其zxid的先后顺序进行排序和处理。</p>\n<h2 id=\"六、崩溃恢复\"><a href=\"#六、崩溃恢复\" class=\"headerlink\" title=\"六、崩溃恢复\"></a>六、崩溃恢复</h2><p><strong>一旦 Leader 服务器出现崩溃或者由于网络原因导致 Leader 服务器失去了与过半 Follower 的联系，那么就会进入崩溃恢复模式。</strong></p>\n<p>前面我们说过，崩溃恢复具有两个阶段：<strong>Leader 选举与初始化同步</strong>。当完成 Leader 选 举后，此时的 Leader 还是一个准 Leader，其要经过初始化同步后才能变为真正的 Leader。</p>\n<h3 id=\"初始化同步\"><a href=\"#初始化同步\" class=\"headerlink\" title=\"初始化同步\"></a>初始化同步</h3><p><img src=\"http://media.coderluo.top/3.png\" alt=\"\"></p>\n<p>具体过程如下：</p>\n<ol>\n<li>为了保证 Leader 向 Learner 发送提案的有序，Leader 会为每一个 Learner 服务器准备一 个队列；</li>\n<li>Leader 将那些没有被各个 Learner 同步的事务封装为 Proposal；</li>\n<li>Leader 将这些 Proposal 逐条发给各个 Learner，并在每一个 Proposal 后都紧跟一个 COMMIT 消息，表示该事务已经被提交，Learner 可以直接接收并执行 ；</li>\n<li>Learner 接收来自于 Leader 的 Proposal，并将其更新到本地；</li>\n<li>当 Learner 更新成功后，会向准 Leader 发送 ACK 信息；</li>\n<li>Leader 服务器在收到来自 Learner 的 ACK 后就会将该 Learner 加入到真正可用的 Follower 列表或 Observer 列表。没有反馈 ACK，或反馈了但 Leader 没有收到的 Learner，Leader 不会将其加入到相应列表。</li>\n</ol>\n<h2 id=\"七、恢复模式的两个原则\"><a href=\"#七、恢复模式的两个原则\" class=\"headerlink\" title=\"七、恢复模式的两个原则\"></a>七、恢复模式的两个原则</h2><p>当集群正在启动过程中，或 Leader 与超过半数的主机断连后，集群就进入了恢复模式。 对于要恢复的数据状态需要遵循两个原则。</p>\n<h3 id=\"1-已被处理过的消息不能丢\"><a href=\"#1-已被处理过的消息不能丢\" class=\"headerlink\" title=\"1. 已被处理过的消息不能丢\"></a>1. 已被处理过的消息不能丢</h3><p>当 Leader 收到超过半数 Follower 的 ACKs 后，就向各个 Follower 广播 COMMIT 消息， 批准各个 Server 执行该写操作事务。当各个 Server 在接收到 Leader 的 COMMIT 消息后就会在本地执行该写操作，然后会向客户端响应写操作成功。</p>\n<p>但是如果在非全部 Follower 收到 COMMIT 消息之前 Leader 就挂了，这将导致一种后 果：<strong>部分 Server 已经执行了该事务，而部分 Server 尚未收到 COMMIT 消息</strong>，所以其并没有 执行该事务。当新的 Leader 被选举出，集群经过恢复模式后需要保证所有 Server 上都执行 了那些已经被部分 Server 执行过的事务。</p>\n<h3 id=\"2-被丢弃的消息不能再现\"><a href=\"#2-被丢弃的消息不能再现\" class=\"headerlink\" title=\"2. 被丢弃的消息不能再现\"></a>2. 被丢弃的消息不能再现</h3><p>当在 Leader 新事务已经通过，其已经将该事务更新到了本地，但所有 Follower 还都没 有收到 COMMIT 之前，Leader 宕机了（比前面叙述的宕机更早），此时，所有 Follower 根本 就不知道该 Proposal 的存在。当新的 Leader 选举出来，整个集群进入正常服务状态后，之 前挂了的 Leader 主机重新启动并注册成为了 Follower。若那个别人根本不知道的 Proposal 还保留在那个主机，那么其数据就会比其它主机多出了内容，导致整个系统状态的不一致。 所以，该 Proposa 应该被丢弃。类似这样应该被丢弃的事务，是不能再次出现在集群中的， 应该被清除。</p>\n<h2 id=\"八、消息广播\"><a href=\"#八、消息广播\" class=\"headerlink\" title=\"八、消息广播\"></a>八、消息广播</h2><p>当集群中的 Learner 完成了初始化状态同步，那么整个 zk 集群就进入到了正常工作模式 了。</p>\n<p><img src=\"http://media.coderluo.top/4.png\" alt=\"\"></p>\n<p>如果集群中的 Learner 节点收到客户端的事务请求，那么这些 Learner 会将请求转发给 Leader 服务器。然后再执行如下的具体过程：</p>\n<ol>\n<li>Leader 接收到事务请求后，为事务赋予一个全局唯一的 64 位自增 id，即 zxid，通过 zxid 的大小比较即可实现事务的有序性管理，然后将事务封装为一个 Proposal。</li>\n<li>Leader 根据 Follower 列表获取到所有 Follower，然后再将 Proposal 通过这些 Follower 的 队列将提案发送给各个 Follower。</li>\n<li>当 Follower 接收到提案后，会先将提案的 zxid 与本地记录的事务日志中的最大的 zxid 进行比较。若当前提案的 zxid 大于最大 zxid，则将当前提案记录到本地事务日志中，并 向 Leader 返回一个 ACK。（提问学员）</li>\n<li>当 Leader 接收到过半的 ACKs 后，Leader 就会向所有 Follower 的队列发送 COMMIT 消息，向所有 Observer 的队列发送 Proposal。</li>\n<li>当 Follower 收到 COMMIT 消息后，就会将日志中的事务正式更新到本地。当 Observer 收到 Proposal 后，会直接将事务更新到本地。</li>\n<li>无论是 Follower 还是 Observer，在同步完成后都需要向 Leader 发送成功 ACK。</li>\n</ol>\n<h2 id=\"九、实现原理\"><a href=\"#九、实现原理\" class=\"headerlink\" title=\"九、实现原理\"></a>九、实现原理</h2><h3 id=\"1-三类角色\"><a href=\"#1-三类角色\" class=\"headerlink\" title=\"1.三类角色\"></a>1.三类角色</h3><p>为了避免 Zookeeper 的单点问题，zk 也是以集群的形式出现的。zk 集群中的角色主要有 以下三类：</p>\n<ul>\n<li>Leader：接收和处理客户端的读请求；zk 集群中事务请求的唯一处理者，并负责发起决 议和投票，然后将通过的事务请求在本地进行处理后，将处理结果同步给集群中的其它主机。</li>\n<li>Follower：接收和处理客户端的读请求; 将事务请求转给 Leader；同步 Leader 中的数据； 当 Leader 挂了，参与 Leader 的选举（具有选举权与被选举权）；</li>\n<li>Observer：就是没有选举权与被选举权，且没有投票权的 Follower（临时工）。若 zk 集 群中的读压力很大，则需要增加 Observer，最好不要增加 Follower。因为增加 Follower 将会增大投票与统计选票的压力，降低写操作效率，及 Leader 选举的效率。</li>\n</ul>\n<p>这三类角色在不同的情况下又有一些不同的名称（这个为了下一篇阅读源码做准备，可以先了解即可）：</p>\n<ul>\n<li>Learner = Follower + Observer</li>\n<li>QuorumServer = Follower + Leader</li>\n</ul>\n<h3 id=\"2-三个数据\"><a href=\"#2-三个数据\" class=\"headerlink\" title=\"2.三个数据\"></a>2.三个数据</h3><p>在 ZAB 中有三个很重要的数据：</p>\n<ul>\n<li>zxid：是一个 64 位长度的 Long 类型。其中高 32 位表示 epoch，低 32 表示 xid。</li>\n<li>epoch：每个 Leader 都会具有一个不同的 epoch，用于区分不同的时期（可以理解为朝代的年号）</li>\n<li>xid：事务 id，是一个流水号，（每次朝代更替，即leader更换），从0开始递增。</li>\n</ul>\n<p>每当选举产生一个新的 Leader ，就会从这个 Leader 服务器上取出本地事务日志中最大编号 Proposal 的 zxid，并从 zxid 中解析得到对应的 epoch 编号，然后再对其加1，之后该编号就作为新的 epoch 值，并将低32位数字归零，由0开始重新生成zxid。</p>\n<h3 id=\"3-三种状态\"><a href=\"#3-三种状态\" class=\"headerlink\" title=\"3.三种状态\"></a>3.三种状态</h3><p>zk 集群中的每一台主机，在不同的阶段会处于不同的状态。每一台主机具有四种状态。</p>\n<ul>\n<li><p>LOOKING：选举状态</p>\n</li>\n<li><p>FOLLOWING：Follower 的正常工作状态，从 Leader 同步数据的状态</p>\n</li>\n<li><p>LEADING：Leader 的正常工作状态，Leader 广播数据更新的状态</p>\n</li>\n</ul>\n<p>OBSERVING：Observer 的正常工作状态，从 Leader 同步数据的状态</p>\n<blockquote>\n<p>代码实现中，多了一种状态：Observing 状态这是 Zookeeper 引入 Observer 之后加入的，Observer 不参与选举，是只读节点，实际上跟 Zab 协议没有关系。这里为了阅读源码加上此概念。</p>\n</blockquote>\n<h3 id=\"4-Zab-的四个阶段\"><a href=\"#4-Zab-的四个阶段\" class=\"headerlink\" title=\"4.Zab 的四个阶段\"></a>4.Zab 的四个阶段</h3><ul>\n<li><strong>myid</strong>:这是 zk 集群中服务器的唯一标识，称为 myid。例如，有三个 zk 服务器，那么编号分别 是 1,2,3。</li>\n<li><strong>逻辑时钟</strong>:逻辑时钟，Logicalclock，是一个整型数，该概念在选举时称为 logicalclock，而在选举结 束后称为 epoch。即 epoch 与 logicalclock 是同一个值，在不同情况下的不同名称。</li>\n</ul>\n<h4 id=\"1-选举阶段（Leader-Election）\"><a href=\"#1-选举阶段（Leader-Election）\" class=\"headerlink\" title=\"1).选举阶段（Leader Election）\"></a>1).选举阶段（Leader Election）</h4><p>节点在一开始都处于选举节点，只要有一个节点得到超过半数节点的票数，它就可以当选准 Leader，只有到达第三个阶段（也就是同步阶段），这个准 Leader 才会成为真正的 Leader。</p>\n<p><strong>Zookeeper 规定所有有效的投票都必须在同一个 轮次 中，每个服务器在开始新一轮投票时，都会对自己维护的 logicalClock 进行自增操作</strong>。</p>\n<p>每个服务器在广播自己的选票前，会将自己的投票箱（recvset）清空。该投票箱记录了所受到的选票。</p>\n<p>例如：Server_2 投票给 Server_3，Server_3 投票给 Server_1，则Server_1的投票箱为(2,3)、(3,1)、(1,1)。（每个服务器都会默认给自己投票）</p>\n<p>前一个数字表示投票者，后一个数字表示被选举者。票箱中只会记录每一个投票者的最后一次投票记录，如果投票者更新自己的选票，则其他服务器收到该新选票后会在自己的票箱中更新该服务器的选票。<strong>思考下：这里在实现中应该怎么实现呢？</strong>等我们分析源码时就可以看到，非常的巧妙。</p>\n<p><img src=\"http://media.coderluo.top/5.png\" alt=\"\"></p>\n<p><strong>这一阶段的目的就是为了选出一个准 Leader ，然后进入下一个阶段。</strong></p>\n<h4 id=\"2-发现阶段（Descovery）\"><a href=\"#2-发现阶段（Descovery）\" class=\"headerlink\" title=\"2). 发现阶段（Descovery）\"></a>2). 发现阶段（Descovery）</h4><p>在这个阶段，Followers 和上一轮选举出的准 Leader 进行通信，同步 Followers 最近接收的事务 Proposal 。</p>\n<p><strong>这个阶段的主要目的是发现当前大多数节点接收的最新 Proposal，并且准 Leader 生成新的 epoch ，让 Followers 接收，更新它们的 acceptedEpoch</strong>。</p>\n<h4 id=\"3-同步阶段（Synchronization\"><a href=\"#3-同步阶段（Synchronization\" class=\"headerlink\" title=\"3). 同步阶段（Synchronization)\"></a>3). 同步阶段（Synchronization)</h4><p><strong>同步阶段主要是利用 Leader 前一阶段获得的最新 Proposal 历史，同步集群中所有的副本</strong>。</p>\n<p>只有当 quorum（超过半数的节点） 都同步完成，准 Leader 才会成为真正的 Leader。Follower 只会接收 zxid 比自己 lastZxid 大的 Proposal。</p>\n<h4 id=\"4-广播阶段（Broadcast）\"><a href=\"#4-广播阶段（Broadcast）\" class=\"headerlink\" title=\"4). 广播阶段（Broadcast）\"></a>4). 广播阶段（Broadcast）</h4><p>到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 Leader 可以进行消息广播。同时，如果有新的节点加入，还需要对新节点进行同步。<br> 需要注意的是，Zab 提交事务并不像 2PC 一样需要全部 Follower 都 Ack，只需要得到 quorum（超过半数的节点）的Ack 就可以。</p>\n<h2 id=\"十、Zab与Paxos\"><a href=\"#十、Zab与Paxos\" class=\"headerlink\" title=\"十、Zab与Paxos\"></a>十、Zab与Paxos</h2><p>上面已经针对Zab协议涉及流程作了详细的描述，那么它和Paxos是什么关系呢？</p>\n<p>Zab的作者认为Zab与paxos并不相同，之所以没有采用Paxos是因为Paxos保证不了全序顺序：</p>\n<blockquote>\n<p>Because multiple leaders can propose a value for a given instance two problems arise.<br>First, proposals can conflict. Paxos uses ballots to detect and resolve conflicting proposals.<br>Second, it is not enough to know that a given instance number has been committed, processes must also be able to fi gure out which value has been committed.</p>\n</blockquote>\n<p>Paxos算法的确是不关心请求之间的逻辑顺序，而只考虑数据之间的全序，但很少有人直接使用paxos算法，都会经过一定的简化、优化。</p>\n<p>Google的粗粒度锁服务Chubby的设计开发者Burrows曾经说过：“<strong>所有一致性协议本质上要么是Paxos要么是其变体</strong>”。这句话还是有一定道理的，ZAB本质上就是Paxos的一种简化形式。</p>\n<p><strong>总结：</strong>本文主要讲解了Zab上述一系列巧妙的设计，比如：为了加快收敛速度避免活锁引发的竞争引入了Leader角色，在正常情况下最多只有一个参与者扮演Leader角色，其他参与者扮演Acceptor；在这种优化算法中，只有Leader可以提出议案，从而避免了竞争使得算法能够快速地收敛而趋于一致；而为了保证Leader的健壮性，又引入了Leader选举，再考虑到同步的阶段，提出了消息广播和崩溃初始化同步以及恢复模式的两个原则。</p>\n<p>下篇文章我们就会进入Zookeeper源码分析篇，直击源码，一起掌握核心代码逻辑。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>今天讲解的主题是Zookeeper实现的基础协议–<strong>Zab协议（Zookeeper Atomic Broadcast）</strong>，也称为zk原子广播协议。</p>\n</blockquote>\n<p>首先大家可能会有疑问，<strong>Zab和我们上一篇讲解的Paxos之间有什么区别和联系？</strong>别着急，带着这个问题接着往下看吧，后面我会揭晓这个问题的答案的。</p>\n<h2 id=\"一、Zookeeper简介\"><a href=\"#一、Zookeeper简介\" class=\"headerlink\" title=\"一、Zookeeper简介\"></a>一、Zookeeper简介</h2><p>Zookeeper是一个分布式数据一致性的解决方案，分布式应用可以基于它实现诸如数据发布/订阅，负载均衡，命名服务，分布式协调/通知，集群管理，Master选举，分布式锁和分布式队列等功能。<strong>Zookeeper致力于提供一个高性能、高可用、且具有严格的顺序访问控制能力的分布式协调系统</strong>。</p>\n<p>考虑到Zookeeper主要操作数据的状态，为了保证状态的一致性，Zookeeper提出了两个安全属性:</p>\n<ol>\n<li>全序（Total order）：如果消息a在消息b之前发送，则所有Server应该看到相同的结果；</li>\n<li>因果顺序（Causal order）：如果消息a在消息b之前发生（a导致了b），并被一起发送，则a始终在b之前被执行；</li>\n</ol>\n<p>为了保证上述两个安全属性，Zookeeper使用了<strong>TCP协议和Leader</strong>：</p>\n<ol>\n<li>通过使用TCP协议保证了消息的全序特性（先发先到）；</li>\n<li>通过Leader解决了因果顺序问题：先到Leader的先执行，但是这样的话Leader有可能出现出现网络中断、崩溃退出与重启等异常情况，这就有必要引入Leader选举算法；</li>\n</ol>\n<p>而ZAB(Zookeeper Atomic Broadcast即Zookeeper原子消息广播协议)正是作为其数据一致性的核心算法，下面介绍一下ZAB协议。</p>\n<h2 id=\"二、什么是Zab协议\"><a href=\"#二、什么是Zab协议\" class=\"headerlink\" title=\"二、什么是Zab协议\"></a>二、什么是Zab协议</h2><p>ZAB ，Zookeeper Atomic Broadcast，zk 原子消息广播协议，是专为 ZooKeeper 设计的一 种支持崩溃恢复的原子广播协议。在 Zookeeper 中，基于该协议，ZooKeeper 实现了一种主从模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<p>Zookeeper 使用一个单一主进程来接收并处理客户端的所有事务请求，即写请求。当服 务器数据的状态发生变更后，集群采用 ZAB 原子广播协议，以事务提案 Proposal 的形式广 播到所有的副本进程上。ZAB 协议能够保证一个全局的变更序列，即可以为每一个事务分配 一个全局的递增编号 xid。</p>\n<p>当 Zookeeper 客户端连接到 Zookeeper 集群的一个节点后，若客户端提交的是读请求， 那么当前节点就直接根据自己保存的数据对其进行响应；如果是写请求且当前节点不是 Leader，那么节点就会将该写请求转发给 Leader，Leader 会以提案的方式广播该写操作，只 要有超过半数节点同意该写操作，则该写操作请求就会被提交。然后 Leader 会再次广播给 所有订阅者，即 Learner，通知它们同步数据。</p>\n<p><img src=\"http://media.coderluo.top/1.png\" alt></p>\n<h2 id=\"三、Zab协议原理\"><a href=\"#三、Zab协议原理\" class=\"headerlink\" title=\"三、Zab协议原理\"></a>三、Zab协议原理</h2><p>Zab协议要求每个 Leader 都要经历三个阶段：<strong>发现，同步，广播</strong>。</p>\n<ol>\n<li><strong>发现</strong>：要求zookeeper集群必须选举出一个 Leader 进程，同时 Leader 会维护一个 Follower 可用客户端列表。将来客户端可以和这些 Follower节点进行通信。</li>\n<li><strong>同步</strong>：Leader 要负责将本身的数据与 Follower 完成同步，做到多副本存储。这样也是提现了CAP中的高可用和分区容错。Follower将队列中未处理完的请求消费完成后，写入本地事务日志中</li>\n<li><strong>广播</strong>：Leader 可以接受客户端新的事务Proposal请求，将新的Proposal请求广播给所有的 Follower。</li>\n</ol>\n<h2 id=\"四、Zab协议核心\"><a href=\"#四、Zab协议核心\" class=\"headerlink\" title=\"四、Zab协议核心\"></a>四、Zab协议核心</h2><p>Zab协议的核心：<strong>定义了事务请求的处理方式</strong></p>\n<ol>\n<li>所有的事务请求必须由一个全局唯一的服务器来协调处理，这样的服务器被叫做 <strong>Leader服务器</strong>。其他剩余的服务器则是 <strong>Follower服务器</strong>。</li>\n<li>Leader服务器 负责将一个客户端事务请求，转换成一个 <strong>事务Proposal</strong>，并将该 Proposal 分发给集群中所有的 Follower 服务器，也就是向所有 Follower 节点发送数据广播请求（或数据复制）</li>\n<li>分发之后Leader服务器需要等待所有Follower服务器的反馈（Ack请求），<strong>在Zab协议中，只要超过半数的Follower服务器进行了正确的反馈</strong>后（也就是收到半数以上的Follower的Ack请求），那么 Leader 就会再次向所有的 Follower服务器发送 Commit 消息，要求其将上一个 事务proposal 进行提交。</li>\n</ol>\n<p><img src=\"http://media.coderluo.top/2.png\" alt></p>\n<h2 id=\"五、Zab协议内容\"><a href=\"#五、Zab协议内容\" class=\"headerlink\" title=\"五、Zab协议内容\"></a>五、Zab协议内容</h2><p>Zab 协议包括两种基本的模式：<strong>崩溃恢复</strong> 和 <strong>消息广播</strong></p>\n<h3 id=\"1-协议过程\"><a href=\"#1-协议过程\" class=\"headerlink\" title=\"1.协议过程\"></a>1.协议过程</h3><p>当整个集群启动过程中，或者当 Leader 服务器出现网络中弄断、崩溃退出或重启等异常时，Zab协议就会 <strong>进入崩溃恢复模式</strong>，选举产生新的Leader。</p>\n<p>当选举产生了新的 Leader，同时集群中有过半的机器与该 Leader 服务器完成了状态同步（即数据同步）之后，Zab协议就会退出崩溃恢复模式，<strong>进入消息广播模式</strong>。</p>\n<p>这时，如果有一台遵守Zab协议的服务器加入集群，因为此时集群中已经存在一个Leader服务器在广播消息，那么该新加入的服务器自动进入恢复模式：找到Leader服务器，并且完成数据同步。同步完成后，作为新的Follower一起参与到消息广播流程中。</p>\n<h3 id=\"2-协议状态切换\"><a href=\"#2-协议状态切换\" class=\"headerlink\" title=\"2.协议状态切换\"></a>2.协议状态切换</h3><p>当Leader出现崩溃退出或者机器重启，亦或是集群中不存在超过半数的服务器与Leader保存正常通信，Zab就会再一次进入崩溃恢复，发起新一轮Leader选举并实现数据同步。同步完成后又会进入消息广播模式，接收事务请求。</p>\n<h3 id=\"3-保证消息有序\"><a href=\"#3-保证消息有序\" class=\"headerlink\" title=\"3.保证消息有序\"></a>3.保证消息有序</h3><p>在整个消息广播中，Leader会将每一个事务请求转换成对应的 proposal 来进行广播，并且在广播 事务Proposal 之前，Leader服务器会首先为这个事务Proposal分配一个全局单递增的唯一ID，称之为事务ID（即zxid），由于Zab协议需要保证每一个消息的严格的顺序关系，因此必须将每一个proposal按照其zxid的先后顺序进行排序和处理。</p>\n<h2 id=\"六、崩溃恢复\"><a href=\"#六、崩溃恢复\" class=\"headerlink\" title=\"六、崩溃恢复\"></a>六、崩溃恢复</h2><p><strong>一旦 Leader 服务器出现崩溃或者由于网络原因导致 Leader 服务器失去了与过半 Follower 的联系，那么就会进入崩溃恢复模式。</strong></p>\n<p>前面我们说过，崩溃恢复具有两个阶段：<strong>Leader 选举与初始化同步</strong>。当完成 Leader 选 举后，此时的 Leader 还是一个准 Leader，其要经过初始化同步后才能变为真正的 Leader。</p>\n<h3 id=\"初始化同步\"><a href=\"#初始化同步\" class=\"headerlink\" title=\"初始化同步\"></a>初始化同步</h3><p><img src=\"http://media.coderluo.top/3.png\" alt></p>\n<p>具体过程如下：</p>\n<ol>\n<li>为了保证 Leader 向 Learner 发送提案的有序，Leader 会为每一个 Learner 服务器准备一 个队列；</li>\n<li>Leader 将那些没有被各个 Learner 同步的事务封装为 Proposal；</li>\n<li>Leader 将这些 Proposal 逐条发给各个 Learner，并在每一个 Proposal 后都紧跟一个 COMMIT 消息，表示该事务已经被提交，Learner 可以直接接收并执行 ；</li>\n<li>Learner 接收来自于 Leader 的 Proposal，并将其更新到本地；</li>\n<li>当 Learner 更新成功后，会向准 Leader 发送 ACK 信息；</li>\n<li>Leader 服务器在收到来自 Learner 的 ACK 后就会将该 Learner 加入到真正可用的 Follower 列表或 Observer 列表。没有反馈 ACK，或反馈了但 Leader 没有收到的 Learner，Leader 不会将其加入到相应列表。</li>\n</ol>\n<h2 id=\"七、恢复模式的两个原则\"><a href=\"#七、恢复模式的两个原则\" class=\"headerlink\" title=\"七、恢复模式的两个原则\"></a>七、恢复模式的两个原则</h2><p>当集群正在启动过程中，或 Leader 与超过半数的主机断连后，集群就进入了恢复模式。 对于要恢复的数据状态需要遵循两个原则。</p>\n<h3 id=\"1-已被处理过的消息不能丢\"><a href=\"#1-已被处理过的消息不能丢\" class=\"headerlink\" title=\"1. 已被处理过的消息不能丢\"></a>1. 已被处理过的消息不能丢</h3><p>当 Leader 收到超过半数 Follower 的 ACKs 后，就向各个 Follower 广播 COMMIT 消息， 批准各个 Server 执行该写操作事务。当各个 Server 在接收到 Leader 的 COMMIT 消息后就会在本地执行该写操作，然后会向客户端响应写操作成功。</p>\n<p>但是如果在非全部 Follower 收到 COMMIT 消息之前 Leader 就挂了，这将导致一种后 果：<strong>部分 Server 已经执行了该事务，而部分 Server 尚未收到 COMMIT 消息</strong>，所以其并没有 执行该事务。当新的 Leader 被选举出，集群经过恢复模式后需要保证所有 Server 上都执行 了那些已经被部分 Server 执行过的事务。</p>\n<h3 id=\"2-被丢弃的消息不能再现\"><a href=\"#2-被丢弃的消息不能再现\" class=\"headerlink\" title=\"2. 被丢弃的消息不能再现\"></a>2. 被丢弃的消息不能再现</h3><p>当在 Leader 新事务已经通过，其已经将该事务更新到了本地，但所有 Follower 还都没 有收到 COMMIT 之前，Leader 宕机了（比前面叙述的宕机更早），此时，所有 Follower 根本 就不知道该 Proposal 的存在。当新的 Leader 选举出来，整个集群进入正常服务状态后，之 前挂了的 Leader 主机重新启动并注册成为了 Follower。若那个别人根本不知道的 Proposal 还保留在那个主机，那么其数据就会比其它主机多出了内容，导致整个系统状态的不一致。 所以，该 Proposa 应该被丢弃。类似这样应该被丢弃的事务，是不能再次出现在集群中的， 应该被清除。</p>\n<h2 id=\"八、消息广播\"><a href=\"#八、消息广播\" class=\"headerlink\" title=\"八、消息广播\"></a>八、消息广播</h2><p>当集群中的 Learner 完成了初始化状态同步，那么整个 zk 集群就进入到了正常工作模式 了。</p>\n<p><img src=\"http://media.coderluo.top/4.png\" alt></p>\n<p>如果集群中的 Learner 节点收到客户端的事务请求，那么这些 Learner 会将请求转发给 Leader 服务器。然后再执行如下的具体过程：</p>\n<ol>\n<li>Leader 接收到事务请求后，为事务赋予一个全局唯一的 64 位自增 id，即 zxid，通过 zxid 的大小比较即可实现事务的有序性管理，然后将事务封装为一个 Proposal。</li>\n<li>Leader 根据 Follower 列表获取到所有 Follower，然后再将 Proposal 通过这些 Follower 的 队列将提案发送给各个 Follower。</li>\n<li>当 Follower 接收到提案后，会先将提案的 zxid 与本地记录的事务日志中的最大的 zxid 进行比较。若当前提案的 zxid 大于最大 zxid，则将当前提案记录到本地事务日志中，并 向 Leader 返回一个 ACK。（提问学员）</li>\n<li>当 Leader 接收到过半的 ACKs 后，Leader 就会向所有 Follower 的队列发送 COMMIT 消息，向所有 Observer 的队列发送 Proposal。</li>\n<li>当 Follower 收到 COMMIT 消息后，就会将日志中的事务正式更新到本地。当 Observer 收到 Proposal 后，会直接将事务更新到本地。</li>\n<li>无论是 Follower 还是 Observer，在同步完成后都需要向 Leader 发送成功 ACK。</li>\n</ol>\n<h2 id=\"九、实现原理\"><a href=\"#九、实现原理\" class=\"headerlink\" title=\"九、实现原理\"></a>九、实现原理</h2><h3 id=\"1-三类角色\"><a href=\"#1-三类角色\" class=\"headerlink\" title=\"1.三类角色\"></a>1.三类角色</h3><p>为了避免 Zookeeper 的单点问题，zk 也是以集群的形式出现的。zk 集群中的角色主要有 以下三类：</p>\n<ul>\n<li>Leader：接收和处理客户端的读请求；zk 集群中事务请求的唯一处理者，并负责发起决 议和投票，然后将通过的事务请求在本地进行处理后，将处理结果同步给集群中的其它主机。</li>\n<li>Follower：接收和处理客户端的读请求; 将事务请求转给 Leader；同步 Leader 中的数据； 当 Leader 挂了，参与 Leader 的选举（具有选举权与被选举权）；</li>\n<li>Observer：就是没有选举权与被选举权，且没有投票权的 Follower（临时工）。若 zk 集 群中的读压力很大，则需要增加 Observer，最好不要增加 Follower。因为增加 Follower 将会增大投票与统计选票的压力，降低写操作效率，及 Leader 选举的效率。</li>\n</ul>\n<p>这三类角色在不同的情况下又有一些不同的名称（这个为了下一篇阅读源码做准备，可以先了解即可）：</p>\n<ul>\n<li>Learner = Follower + Observer</li>\n<li>QuorumServer = Follower + Leader</li>\n</ul>\n<h3 id=\"2-三个数据\"><a href=\"#2-三个数据\" class=\"headerlink\" title=\"2.三个数据\"></a>2.三个数据</h3><p>在 ZAB 中有三个很重要的数据：</p>\n<ul>\n<li>zxid：是一个 64 位长度的 Long 类型。其中高 32 位表示 epoch，低 32 表示 xid。</li>\n<li>epoch：每个 Leader 都会具有一个不同的 epoch，用于区分不同的时期（可以理解为朝代的年号）</li>\n<li>xid：事务 id，是一个流水号，（每次朝代更替，即leader更换），从0开始递增。</li>\n</ul>\n<p>每当选举产生一个新的 Leader ，就会从这个 Leader 服务器上取出本地事务日志中最大编号 Proposal 的 zxid，并从 zxid 中解析得到对应的 epoch 编号，然后再对其加1，之后该编号就作为新的 epoch 值，并将低32位数字归零，由0开始重新生成zxid。</p>\n<h3 id=\"3-三种状态\"><a href=\"#3-三种状态\" class=\"headerlink\" title=\"3.三种状态\"></a>3.三种状态</h3><p>zk 集群中的每一台主机，在不同的阶段会处于不同的状态。每一台主机具有四种状态。</p>\n<ul>\n<li><p>LOOKING：选举状态</p>\n</li>\n<li><p>FOLLOWING：Follower 的正常工作状态，从 Leader 同步数据的状态</p>\n</li>\n<li><p>LEADING：Leader 的正常工作状态，Leader 广播数据更新的状态</p>\n</li>\n</ul>\n<p>OBSERVING：Observer 的正常工作状态，从 Leader 同步数据的状态</p>\n<blockquote>\n<p>代码实现中，多了一种状态：Observing 状态这是 Zookeeper 引入 Observer 之后加入的，Observer 不参与选举，是只读节点，实际上跟 Zab 协议没有关系。这里为了阅读源码加上此概念。</p>\n</blockquote>\n<h3 id=\"4-Zab-的四个阶段\"><a href=\"#4-Zab-的四个阶段\" class=\"headerlink\" title=\"4.Zab 的四个阶段\"></a>4.Zab 的四个阶段</h3><ul>\n<li><strong>myid</strong>:这是 zk 集群中服务器的唯一标识，称为 myid。例如，有三个 zk 服务器，那么编号分别 是 1,2,3。</li>\n<li><strong>逻辑时钟</strong>:逻辑时钟，Logicalclock，是一个整型数，该概念在选举时称为 logicalclock，而在选举结 束后称为 epoch。即 epoch 与 logicalclock 是同一个值，在不同情况下的不同名称。</li>\n</ul>\n<h4 id=\"1-选举阶段（Leader-Election）\"><a href=\"#1-选举阶段（Leader-Election）\" class=\"headerlink\" title=\"1).选举阶段（Leader Election）\"></a>1).选举阶段（Leader Election）</h4><p>节点在一开始都处于选举节点，只要有一个节点得到超过半数节点的票数，它就可以当选准 Leader，只有到达第三个阶段（也就是同步阶段），这个准 Leader 才会成为真正的 Leader。</p>\n<p><strong>Zookeeper 规定所有有效的投票都必须在同一个 轮次 中，每个服务器在开始新一轮投票时，都会对自己维护的 logicalClock 进行自增操作</strong>。</p>\n<p>每个服务器在广播自己的选票前，会将自己的投票箱（recvset）清空。该投票箱记录了所受到的选票。</p>\n<p>例如：Server_2 投票给 Server_3，Server_3 投票给 Server_1，则Server_1的投票箱为(2,3)、(3,1)、(1,1)。（每个服务器都会默认给自己投票）</p>\n<p>前一个数字表示投票者，后一个数字表示被选举者。票箱中只会记录每一个投票者的最后一次投票记录，如果投票者更新自己的选票，则其他服务器收到该新选票后会在自己的票箱中更新该服务器的选票。<strong>思考下：这里在实现中应该怎么实现呢？</strong>等我们分析源码时就可以看到，非常的巧妙。</p>\n<p><img src=\"http://media.coderluo.top/5.png\" alt></p>\n<p><strong>这一阶段的目的就是为了选出一个准 Leader ，然后进入下一个阶段。</strong></p>\n<h4 id=\"2-发现阶段（Descovery）\"><a href=\"#2-发现阶段（Descovery）\" class=\"headerlink\" title=\"2). 发现阶段（Descovery）\"></a>2). 发现阶段（Descovery）</h4><p>在这个阶段，Followers 和上一轮选举出的准 Leader 进行通信，同步 Followers 最近接收的事务 Proposal 。</p>\n<p><strong>这个阶段的主要目的是发现当前大多数节点接收的最新 Proposal，并且准 Leader 生成新的 epoch ，让 Followers 接收，更新它们的 acceptedEpoch</strong>。</p>\n<h4 id=\"3-同步阶段（Synchronization\"><a href=\"#3-同步阶段（Synchronization\" class=\"headerlink\" title=\"3). 同步阶段（Synchronization)\"></a>3). 同步阶段（Synchronization)</h4><p><strong>同步阶段主要是利用 Leader 前一阶段获得的最新 Proposal 历史，同步集群中所有的副本</strong>。</p>\n<p>只有当 quorum（超过半数的节点） 都同步完成，准 Leader 才会成为真正的 Leader。Follower 只会接收 zxid 比自己 lastZxid 大的 Proposal。</p>\n<h4 id=\"4-广播阶段（Broadcast）\"><a href=\"#4-广播阶段（Broadcast）\" class=\"headerlink\" title=\"4). 广播阶段（Broadcast）\"></a>4). 广播阶段（Broadcast）</h4><p>到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 Leader 可以进行消息广播。同时，如果有新的节点加入，还需要对新节点进行同步。<br> 需要注意的是，Zab 提交事务并不像 2PC 一样需要全部 Follower 都 Ack，只需要得到 quorum（超过半数的节点）的Ack 就可以。</p>\n<h2 id=\"十、Zab与Paxos\"><a href=\"#十、Zab与Paxos\" class=\"headerlink\" title=\"十、Zab与Paxos\"></a>十、Zab与Paxos</h2><p>上面已经针对Zab协议涉及流程作了详细的描述，那么它和Paxos是什么关系呢？</p>\n<p>Zab的作者认为Zab与paxos并不相同，之所以没有采用Paxos是因为Paxos保证不了全序顺序：</p>\n<blockquote>\n<p>Because multiple leaders can propose a value for a given instance two problems arise.<br>First, proposals can conflict. Paxos uses ballots to detect and resolve conflicting proposals.<br>Second, it is not enough to know that a given instance number has been committed, processes must also be able to fi gure out which value has been committed.</p>\n</blockquote>\n<p>Paxos算法的确是不关心请求之间的逻辑顺序，而只考虑数据之间的全序，但很少有人直接使用paxos算法，都会经过一定的简化、优化。</p>\n<p>Google的粗粒度锁服务Chubby的设计开发者Burrows曾经说过：“<strong>所有一致性协议本质上要么是Paxos要么是其变体</strong>”。这句话还是有一定道理的，ZAB本质上就是Paxos的一种简化形式。</p>\n<p><strong>总结：</strong>本文主要讲解了Zab上述一系列巧妙的设计，比如：为了加快收敛速度避免活锁引发的竞争引入了Leader角色，在正常情况下最多只有一个参与者扮演Leader角色，其他参与者扮演Acceptor；在这种优化算法中，只有Leader可以提出议案，从而避免了竞争使得算法能够快速地收敛而趋于一致；而为了保证Leader的健壮性，又引入了Leader选举，再考虑到同步的阶段，提出了消息广播和崩溃初始化同步以及恢复模式的两个原则。</p>\n<p>下篇文章我们就会进入Zookeeper源码分析篇，直击源码，一起掌握核心代码逻辑。</p>\n"},{"title":"Docker入门","date":"2019-08-17T00:45:42.000Z","_content":"\n\n\n## 镜像\n\n> 镜像是Docker运行容器的前提\n\n### 获取镜像\n\n```shell\ndocker pull NAME[:TAG] // 不指定TAG，默认选择latest标签\n```\n\n\n\n### 运行镜像\n\n```shell\ndocekr run -t -i ubuntu /bin/bash\n```\n\n\n\n### 查看镜像信息\n\n```shell\ndocker images\n```\n\n- 添加镜像标签\n\n```shell\ndocker tag ubuntu:latest my/ubuntu:latest\n```\n\n- 查看镜像详细信息\n\n```shell\ndocker inspect 镜像id\ndocker inspect -f {{\".Architecture\"}} id  // 查询某一项内容\n```\n\n\n\n### 搜寻镜像\n\n```\ndocker search TERM\n--automated=false 仅展示自动创建的镜像\n--no-trunc=false 输出信息不截断显示\n-s=0 仅显示评价为指定星级以上的镜像\n```\n\n\n\n### 删除镜像\n\n```shell\ndocker rmi IMAGE[IMAGE...]  其中IMAGE可以为标签或者id\n\n```\n\n\n\n- 删除正在运行的镜像\n\n```shell\ndocker rmi -f ubuntu 强制删除（不建议）\n推荐：1. 删除容器；2. 再用id删除镜像\ndocker rm id  \ndocker rmi ubuntu \n```\n\n\n\n### 创建镜像\n\n- 基于已有镜像创建\n\n```shell\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n选项包括：\n-a,--author=\"\" 作者信息\n-m,--message=\"\" 提交信息\n-p,--pause=true 提交时暂停容器运行\n```\n\n下面是一个展示：\n\n```shell\n$ winpty docker run -ti ubuntu bash\nroot@39b31ce63c14:/# touch test\nroot@39b31ce63c14:/# exit\n# 查看容器id\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n39b31ce63c14        ubuntu              \"bash\"              12 minutes ago      Exited (0) 11 minutes ago                       friendly_chebyshev\n\n$ docker commit -m \"added a new file\" -a \"coderluo\" 39b test:coderluo\nsha256:489150941c65c552268ddacd10d9fe05c01e30c8c3bd111e4217d727e8f724c4\n\n\n```\n\n\n\n- 基于本地模板导入\n\n可以直接从一个操作系统模板文件导入一个镜像，推荐使用OpenVZ提供的模板来创建。下载地址为：\n\n[https://wiki.openvz.org/Download/template/precreated](https://wiki.openvz.org/Download/template/precreated)\n\n比如我下载了一个ubuntu，可以使用如下命令导入：\n\n```shell\n[root@izwz909ewdz83smewux7a7z ~]# cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\nsha256:57a7c0bb864c4185d5d9d6eb6af24820595482b9df956adec5fde8d16aa9cb7c\n[root@izwz909ewdz83smewux7a7z ~]# docker images\n```\n\n\n\n- 基于Dockerfile创建\n\n\n\n### 存出和载入镜像\n\n> 可以使用 docker save 和 docker load 命令来存出和载入镜像\n\n#### 存出镜像\n\n```shell\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmyubuntu            coderluo            489150941c65        About an hour ago   64.2MB\nubuntu              latest              a2a15febcdf3        43 hours ago        64.2MB\nubuntu              14.04               271ca7812183        3 months ago        188MB\nchong@L MINGW64 ~\n$ docker save -o myubuntu_14.04.tar myubuntu:coderluo\n\n```\n\n\n\n####  载入镜像\n\n\n\n```shell\nchong@L MINGW64 ~\n$ docker load < myubuntu_14.04.tar\n```\n\n\n\n### 上传镜像\n\n```shell\ndocker push NAME[:TAG]\n```\n\n\n\n-----------------------------------------\n\n\n\n## 容器\n\n\n> 容器就是镜像的一个运行实例,它带有额外的可写文件层\n\n\n\n### 创建容器\n\n\n\n#### 新建容器\n\n使用 docker create 创建容器后市处于停止状态,可以使用 docker start 启动\n\n```shell\ndocker create -it ubuntu:latest\n```\n\n\n\n#### 新建并启动容器\n\n```shell\nroot@ubuntu_server:/home/coderluo# docker run ubuntu /bin/echo 'i am coderluo'\ni am coderluo\n```\n\n等价于先 docker create 然后 docker start命令\n\ndocker run 需要执行的动作:\n\n1. 检查本地是否有对应的镜像,不存在就从共有仓库下载;\n2. 利用镜像创建并启动一个容器;\n3. 分配一个文件系统,并在只读的镜像层外面挂载一层可读写层;\n4. 从宿主机配置的网桥接口中桥接一个虚拟接口到容器中；\n5. 分配一个ip给容器；\n6. 执行用户指定的应用程序；\n7. 执行完毕后容器关闭；\n\n\n\n接下来，我们打开一个bash终端，允许用户交互：\n\n```shell\ndocker run -ti ubuntu bash\n```\n\n**-t ：** 选项让Docker分配一个伪终端并绑定到容器的标准输入\n\n**-i ：** 让容器的标准输入保持打开\n\n\n\n**使用 exit 可以退出容器，退出后该容器就处于终止状态，因为对应Docker容器来说，当运行的应用退出后，容器也就没有运行的必要了；**\n\n\n\n#### 守护态运行\n\n\n\n比较常见的是需要Docker容器在后台以守护态 形式运行。 可以通过添加 **-d** 参数来实现：\n\n\n\n```shell\n$ docker run -d ubuntu sh -c \"while true; do echo hello world; sleep 1; done\"\ncaedc06b26723ec1aff794a053835d2b0b603702bea8a5bb3a39e97b0adf5654\n\n$ docker logs cae\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\n```\n\n\n\n### 终止容器\n\n\n\n```shell\ndocker stop [-t|--time[=10]]\n```\n\n\n\n它首先会向容器发送SIGTERM信号，等待一段时间后（默认10s）。再发送SIGKILL信号终止容器。\n\n注意： docker kill 会直接发送SIGKILL 来强行终止容器。\n\n```shell\n$ docker stop cae\ncae\n\n```\n\n\n\n当Docker容器中运行的应用终结时，容器也自动终止。例如上面开启的终端容器，通过exit退出终端后，创建的容器也会终止。\n\n\n\n可以使用 `docekr ps -a -q` 所有状态的容器ID信息。\n\n\n\n```shell\n$ docker ps -a -q\n90bcf718ad13\ncaedc06b2672\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\ncaedc06b2672        ubuntu              \"sh -c 'while true; …\"   17 minutes ago      Up About a minute                       epic_swartz\n$ docker restart cae\ncae\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\ncaedc06b2672        ubuntu              \"sh -c 'while true; …\"   18 minutes ago      Up 8 seconds                            epic_swartz\n\n```\n\n\n\n### 进入容器\n\n\n\n当容器后台启动，用户无法进入容器中，如果需要进入容器进行操作，则可以使用下面方法：\n\n\n\n#### attach命令\n\n```shell\n$ docker run -idt ubuntu\nb9953944f4cc4a17d09bba846d40eea25523098d188d44484f814132e3a04ae7\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nb9953944f4cc        ubuntu              \"/bin/bash\"         7 seconds ago       Up 5 seconds                            laughing_chatterjee\n$ docker attach laughing_chatterjee\nroot@b9953944f4cc:/# \n```\n\n缺点：当多个窗口同时attach到同一个容器中，所有窗口同步显示，一个阻塞则全部阻塞。\n\n\n\n#### exec\n\nDocker 1.3 版本起引入一个可以直接在容器内执行命令的工具 exec。\n\n进入之前创建的容器，并启动一个bash：\n\n```shell\n$ docker exec -ti b99 bash\nroot@b9953944f4cc:/#\n\n```\n\n\n\n#### nsenter\n\n第三方支持，感兴趣可以自己google，个人感觉和exec差不多\n\n\n\n### 删除容器\n\n\n\n`docker rm [OPTIONS] CONTAINER [CONTAINER...]`\n\n- -f，--force=false 强行终止并删除一个运行中的容器\n- -l，--link=false 删除容器的连接，但保留容器\n- -v，--volumes=false 删除容器挂载的数据卷\n\n\n\n```shell\n$ docker rm 90b\n90b\n\n$ docker rm b99\nError response from daemon: You cannot remove a running container b9953944f4cc4a17d09bba846d40eea25523098d188d44484f814132e3a04ae7. Stop the container before attemptin\ng removal or force remove\n\nchong@L MINGW64 ~\n$ docker rm -f b99\nb99\n\n\n```\n\n\n\n### 导入和导出容器\n\n\n\n#### 导出容器\n\n```shell\ndocker export CONTAINER\n```\n\n\n\n```shell\ndocker export cae > test_for_run.tar\n```\n\n\n\n可以将导出的文件传输到其他机器上，直接通过导入命令实现容器迁移。\n\n\n\n#### 导入容器\n\n\n\n导出的文件可以使用 docker import 命令导入，成为镜像。\n\n\n\n```shell\n$ cat Desktop/test_for_run.tar | docker import - test/ubuntu:v1.0                                                       sha256:aa9dd6a88eb02d192c0574e1e2df171d0ec686a21048cba9a70fcd9ce3ba7d76\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ntest/ubuntu         v1.0                aa9dd6a88eb0        11 seconds ago      64.2MB\n```\n\n\n\n这里和前面镜像模块的 docker load 载入镜像的区别是：\n\ndocker import 用来导入一个容器快照到本地镜像库，会丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而 docker load 命令载入镜像文件会保存完成的记录，体积也要大。而且容器快照导入可以重新制定标签等元数据信息。\n\n\n\n## 仓库\n\n\n\n> 仓库是集中存放镜像的地方\n\n\n\n很多人容易搞混仓库和注册服务器。这里说明下，注册服务器和仓库的区别。 \n\n注册服务器是存放仓库的地方，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像，比如ubuntu是一个仓库，下面有很多不同版本的镜像。他所在的服务器就是注册服务器。\n\n\n\n### 创建和使用私有仓库\n\n\n\n#### 使用registry镜像创建私有仓库\n\n可以使用官方提供的registry 镜像 简单搭建一套本地私有仓库环境：\n\n```shell\ndocker run -d -p 5000:5000 -v /opt/data/registry:/var/lib/registry registry\n```\n\n参数说明：\n\n- -d，后台运行\n- -p，端口映射\n- -v，将宿主机的/opt/data/registry 绑定到 /var/lib/registry, 来实现数据存放到本地路径，默认registry容器中存放镜像文件的目录/var/lib/registry\n\n\n\n运行后测试下我们私有仓库中的所有镜像：\n\n```shell\n$ curl http://仓库宿主机ip:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    20  100    20    0     0     20      0  0:00:01 --:--:--  0:00:01   160{\"repositories\":[]}\n\n```\n\n\n\n现在是空的，因为才刚运行，里面没有任何镜像内容。\n\n\n\n#### 管理私有仓库镜像\n\n\n\n在一台测试机上（非仓库机）查看已有镜像，如果当前没有镜像 使用 docker pull 下载即可；\n\n1. 为镜像打标签\n\n   格式为： `docker tag IMAGE[:TAG] [REGISTRYHOST/] [USERNAME/] NAME[:TAG]`\n\n```shell\ndocker tag ubuntu:latest 192.168.137.200:5000/ubuntu:v1\n$ docker images\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\n192.168.137.200:5000/ubuntu   v1                  a2a15febcdf3        3 days ago          64.2MB\n\n```\n\n\n\n192.168.137.200:5000 为私有镜像注册服务器的地址和端口\n\n\n\n2. 上传到镜像服务器\n\n```shell\n\n$ docker push 192.168.137.200:5000/ubuntu\nThe push refers to repository [192.168.137.200:5000/ubuntu]\n122be11ab4a2: Pushed\n7beb13bce073: Pushed\nf7eae43028b3: Pushed\n6cebf3abed5f: Pushed\nv1: digest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0 size: 1152\n$ curl http://192.168.137.200:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    28  100    28    0     0     28      0  0:00:01 --:--:--  0:00:01   198{\"repositories\":[\"ubuntu\"]}\n\n\n```\n\n\n\n如上curl命令发现已经可以看到仓库中的镜像了。\n\n3. 测试下载镜像\n\n```shell\n$ docker rmi -f 镜像id  # 删除本地镜像\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\n$ docker pull 192.168.137.200:5000/ubuntu:v1 #下载私有仓库镜像\nv1: Pulling from ubuntu\n35c102085707: Pull complete\n251f5509d51d: Pull complete\n8e829fe70a46: Pull complete\n6001e1789921: Pull complete\nDigest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0\nStatus: Downloaded newer image for 39.108.186.135:5000/ubuntu:v1\n$ docker images # 查看本地镜像\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\n192.168.137.200:5000/ubuntu   v1                  a2a15febcdf3        3 days ago          64.2MB\n\n\n```\n\n\n\n列出所有镜像：\n\n```shell\n$ curl 39.108.186.135:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    28  100    28    0     0     28      0  0:00:01 --:--:--  0:00:01   254{\"repositories\":[\"ubuntu\"]}\n\n```\n\n所有某个镜像的所有tag：\n\n```shell\n$ curl http://39.108.186.135:5000/v2/ubuntu/tags/list\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    32  100    32    0     0     32      0  0:00:01 --:--:--  0:00:01   128{\"name\":\"ubuntu\",\"tags\":[\"v1\"]}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/docker/Docker入门.md","raw":"---\ntitle: Docker入门\ntags:\n  - Docker\ndate: 2019-08-17 08:45:42\ncategories: Docker\n---\n\n\n\n## 镜像\n\n> 镜像是Docker运行容器的前提\n\n### 获取镜像\n\n```shell\ndocker pull NAME[:TAG] // 不指定TAG，默认选择latest标签\n```\n\n\n\n### 运行镜像\n\n```shell\ndocekr run -t -i ubuntu /bin/bash\n```\n\n\n\n### 查看镜像信息\n\n```shell\ndocker images\n```\n\n- 添加镜像标签\n\n```shell\ndocker tag ubuntu:latest my/ubuntu:latest\n```\n\n- 查看镜像详细信息\n\n```shell\ndocker inspect 镜像id\ndocker inspect -f {{\".Architecture\"}} id  // 查询某一项内容\n```\n\n\n\n### 搜寻镜像\n\n```\ndocker search TERM\n--automated=false 仅展示自动创建的镜像\n--no-trunc=false 输出信息不截断显示\n-s=0 仅显示评价为指定星级以上的镜像\n```\n\n\n\n### 删除镜像\n\n```shell\ndocker rmi IMAGE[IMAGE...]  其中IMAGE可以为标签或者id\n\n```\n\n\n\n- 删除正在运行的镜像\n\n```shell\ndocker rmi -f ubuntu 强制删除（不建议）\n推荐：1. 删除容器；2. 再用id删除镜像\ndocker rm id  \ndocker rmi ubuntu \n```\n\n\n\n### 创建镜像\n\n- 基于已有镜像创建\n\n```shell\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n选项包括：\n-a,--author=\"\" 作者信息\n-m,--message=\"\" 提交信息\n-p,--pause=true 提交时暂停容器运行\n```\n\n下面是一个展示：\n\n```shell\n$ winpty docker run -ti ubuntu bash\nroot@39b31ce63c14:/# touch test\nroot@39b31ce63c14:/# exit\n# 查看容器id\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n39b31ce63c14        ubuntu              \"bash\"              12 minutes ago      Exited (0) 11 minutes ago                       friendly_chebyshev\n\n$ docker commit -m \"added a new file\" -a \"coderluo\" 39b test:coderluo\nsha256:489150941c65c552268ddacd10d9fe05c01e30c8c3bd111e4217d727e8f724c4\n\n\n```\n\n\n\n- 基于本地模板导入\n\n可以直接从一个操作系统模板文件导入一个镜像，推荐使用OpenVZ提供的模板来创建。下载地址为：\n\n[https://wiki.openvz.org/Download/template/precreated](https://wiki.openvz.org/Download/template/precreated)\n\n比如我下载了一个ubuntu，可以使用如下命令导入：\n\n```shell\n[root@izwz909ewdz83smewux7a7z ~]# cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\nsha256:57a7c0bb864c4185d5d9d6eb6af24820595482b9df956adec5fde8d16aa9cb7c\n[root@izwz909ewdz83smewux7a7z ~]# docker images\n```\n\n\n\n- 基于Dockerfile创建\n\n\n\n### 存出和载入镜像\n\n> 可以使用 docker save 和 docker load 命令来存出和载入镜像\n\n#### 存出镜像\n\n```shell\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmyubuntu            coderluo            489150941c65        About an hour ago   64.2MB\nubuntu              latest              a2a15febcdf3        43 hours ago        64.2MB\nubuntu              14.04               271ca7812183        3 months ago        188MB\nchong@L MINGW64 ~\n$ docker save -o myubuntu_14.04.tar myubuntu:coderluo\n\n```\n\n\n\n####  载入镜像\n\n\n\n```shell\nchong@L MINGW64 ~\n$ docker load < myubuntu_14.04.tar\n```\n\n\n\n### 上传镜像\n\n```shell\ndocker push NAME[:TAG]\n```\n\n\n\n-----------------------------------------\n\n\n\n## 容器\n\n\n> 容器就是镜像的一个运行实例,它带有额外的可写文件层\n\n\n\n### 创建容器\n\n\n\n#### 新建容器\n\n使用 docker create 创建容器后市处于停止状态,可以使用 docker start 启动\n\n```shell\ndocker create -it ubuntu:latest\n```\n\n\n\n#### 新建并启动容器\n\n```shell\nroot@ubuntu_server:/home/coderluo# docker run ubuntu /bin/echo 'i am coderluo'\ni am coderluo\n```\n\n等价于先 docker create 然后 docker start命令\n\ndocker run 需要执行的动作:\n\n1. 检查本地是否有对应的镜像,不存在就从共有仓库下载;\n2. 利用镜像创建并启动一个容器;\n3. 分配一个文件系统,并在只读的镜像层外面挂载一层可读写层;\n4. 从宿主机配置的网桥接口中桥接一个虚拟接口到容器中；\n5. 分配一个ip给容器；\n6. 执行用户指定的应用程序；\n7. 执行完毕后容器关闭；\n\n\n\n接下来，我们打开一个bash终端，允许用户交互：\n\n```shell\ndocker run -ti ubuntu bash\n```\n\n**-t ：** 选项让Docker分配一个伪终端并绑定到容器的标准输入\n\n**-i ：** 让容器的标准输入保持打开\n\n\n\n**使用 exit 可以退出容器，退出后该容器就处于终止状态，因为对应Docker容器来说，当运行的应用退出后，容器也就没有运行的必要了；**\n\n\n\n#### 守护态运行\n\n\n\n比较常见的是需要Docker容器在后台以守护态 形式运行。 可以通过添加 **-d** 参数来实现：\n\n\n\n```shell\n$ docker run -d ubuntu sh -c \"while true; do echo hello world; sleep 1; done\"\ncaedc06b26723ec1aff794a053835d2b0b603702bea8a5bb3a39e97b0adf5654\n\n$ docker logs cae\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\n```\n\n\n\n### 终止容器\n\n\n\n```shell\ndocker stop [-t|--time[=10]]\n```\n\n\n\n它首先会向容器发送SIGTERM信号，等待一段时间后（默认10s）。再发送SIGKILL信号终止容器。\n\n注意： docker kill 会直接发送SIGKILL 来强行终止容器。\n\n```shell\n$ docker stop cae\ncae\n\n```\n\n\n\n当Docker容器中运行的应用终结时，容器也自动终止。例如上面开启的终端容器，通过exit退出终端后，创建的容器也会终止。\n\n\n\n可以使用 `docekr ps -a -q` 所有状态的容器ID信息。\n\n\n\n```shell\n$ docker ps -a -q\n90bcf718ad13\ncaedc06b2672\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\ncaedc06b2672        ubuntu              \"sh -c 'while true; …\"   17 minutes ago      Up About a minute                       epic_swartz\n$ docker restart cae\ncae\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\ncaedc06b2672        ubuntu              \"sh -c 'while true; …\"   18 minutes ago      Up 8 seconds                            epic_swartz\n\n```\n\n\n\n### 进入容器\n\n\n\n当容器后台启动，用户无法进入容器中，如果需要进入容器进行操作，则可以使用下面方法：\n\n\n\n#### attach命令\n\n```shell\n$ docker run -idt ubuntu\nb9953944f4cc4a17d09bba846d40eea25523098d188d44484f814132e3a04ae7\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nb9953944f4cc        ubuntu              \"/bin/bash\"         7 seconds ago       Up 5 seconds                            laughing_chatterjee\n$ docker attach laughing_chatterjee\nroot@b9953944f4cc:/# \n```\n\n缺点：当多个窗口同时attach到同一个容器中，所有窗口同步显示，一个阻塞则全部阻塞。\n\n\n\n#### exec\n\nDocker 1.3 版本起引入一个可以直接在容器内执行命令的工具 exec。\n\n进入之前创建的容器，并启动一个bash：\n\n```shell\n$ docker exec -ti b99 bash\nroot@b9953944f4cc:/#\n\n```\n\n\n\n#### nsenter\n\n第三方支持，感兴趣可以自己google，个人感觉和exec差不多\n\n\n\n### 删除容器\n\n\n\n`docker rm [OPTIONS] CONTAINER [CONTAINER...]`\n\n- -f，--force=false 强行终止并删除一个运行中的容器\n- -l，--link=false 删除容器的连接，但保留容器\n- -v，--volumes=false 删除容器挂载的数据卷\n\n\n\n```shell\n$ docker rm 90b\n90b\n\n$ docker rm b99\nError response from daemon: You cannot remove a running container b9953944f4cc4a17d09bba846d40eea25523098d188d44484f814132e3a04ae7. Stop the container before attemptin\ng removal or force remove\n\nchong@L MINGW64 ~\n$ docker rm -f b99\nb99\n\n\n```\n\n\n\n### 导入和导出容器\n\n\n\n#### 导出容器\n\n```shell\ndocker export CONTAINER\n```\n\n\n\n```shell\ndocker export cae > test_for_run.tar\n```\n\n\n\n可以将导出的文件传输到其他机器上，直接通过导入命令实现容器迁移。\n\n\n\n#### 导入容器\n\n\n\n导出的文件可以使用 docker import 命令导入，成为镜像。\n\n\n\n```shell\n$ cat Desktop/test_for_run.tar | docker import - test/ubuntu:v1.0                                                       sha256:aa9dd6a88eb02d192c0574e1e2df171d0ec686a21048cba9a70fcd9ce3ba7d76\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ntest/ubuntu         v1.0                aa9dd6a88eb0        11 seconds ago      64.2MB\n```\n\n\n\n这里和前面镜像模块的 docker load 载入镜像的区别是：\n\ndocker import 用来导入一个容器快照到本地镜像库，会丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而 docker load 命令载入镜像文件会保存完成的记录，体积也要大。而且容器快照导入可以重新制定标签等元数据信息。\n\n\n\n## 仓库\n\n\n\n> 仓库是集中存放镜像的地方\n\n\n\n很多人容易搞混仓库和注册服务器。这里说明下，注册服务器和仓库的区别。 \n\n注册服务器是存放仓库的地方，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像，比如ubuntu是一个仓库，下面有很多不同版本的镜像。他所在的服务器就是注册服务器。\n\n\n\n### 创建和使用私有仓库\n\n\n\n#### 使用registry镜像创建私有仓库\n\n可以使用官方提供的registry 镜像 简单搭建一套本地私有仓库环境：\n\n```shell\ndocker run -d -p 5000:5000 -v /opt/data/registry:/var/lib/registry registry\n```\n\n参数说明：\n\n- -d，后台运行\n- -p，端口映射\n- -v，将宿主机的/opt/data/registry 绑定到 /var/lib/registry, 来实现数据存放到本地路径，默认registry容器中存放镜像文件的目录/var/lib/registry\n\n\n\n运行后测试下我们私有仓库中的所有镜像：\n\n```shell\n$ curl http://仓库宿主机ip:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    20  100    20    0     0     20      0  0:00:01 --:--:--  0:00:01   160{\"repositories\":[]}\n\n```\n\n\n\n现在是空的，因为才刚运行，里面没有任何镜像内容。\n\n\n\n#### 管理私有仓库镜像\n\n\n\n在一台测试机上（非仓库机）查看已有镜像，如果当前没有镜像 使用 docker pull 下载即可；\n\n1. 为镜像打标签\n\n   格式为： `docker tag IMAGE[:TAG] [REGISTRYHOST/] [USERNAME/] NAME[:TAG]`\n\n```shell\ndocker tag ubuntu:latest 192.168.137.200:5000/ubuntu:v1\n$ docker images\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\n192.168.137.200:5000/ubuntu   v1                  a2a15febcdf3        3 days ago          64.2MB\n\n```\n\n\n\n192.168.137.200:5000 为私有镜像注册服务器的地址和端口\n\n\n\n2. 上传到镜像服务器\n\n```shell\n\n$ docker push 192.168.137.200:5000/ubuntu\nThe push refers to repository [192.168.137.200:5000/ubuntu]\n122be11ab4a2: Pushed\n7beb13bce073: Pushed\nf7eae43028b3: Pushed\n6cebf3abed5f: Pushed\nv1: digest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0 size: 1152\n$ curl http://192.168.137.200:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    28  100    28    0     0     28      0  0:00:01 --:--:--  0:00:01   198{\"repositories\":[\"ubuntu\"]}\n\n\n```\n\n\n\n如上curl命令发现已经可以看到仓库中的镜像了。\n\n3. 测试下载镜像\n\n```shell\n$ docker rmi -f 镜像id  # 删除本地镜像\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\n$ docker pull 192.168.137.200:5000/ubuntu:v1 #下载私有仓库镜像\nv1: Pulling from ubuntu\n35c102085707: Pull complete\n251f5509d51d: Pull complete\n8e829fe70a46: Pull complete\n6001e1789921: Pull complete\nDigest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0\nStatus: Downloaded newer image for 39.108.186.135:5000/ubuntu:v1\n$ docker images # 查看本地镜像\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\n192.168.137.200:5000/ubuntu   v1                  a2a15febcdf3        3 days ago          64.2MB\n\n\n```\n\n\n\n列出所有镜像：\n\n```shell\n$ curl 39.108.186.135:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    28  100    28    0     0     28      0  0:00:01 --:--:--  0:00:01   254{\"repositories\":[\"ubuntu\"]}\n\n```\n\n所有某个镜像的所有tag：\n\n```shell\n$ curl http://39.108.186.135:5000/v2/ubuntu/tags/list\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    32  100    32    0     0     32      0  0:00:01 --:--:--  0:00:01   128{\"name\":\"ubuntu\",\"tags\":[\"v1\"]}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"docker/Docker入门","published":1,"updated":"2019-09-28T15:24:39.637Z","_id":"ck13pf6tp0004cno6uvaum8qf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><blockquote>\n<p>镜像是Docker运行容器的前提</p>\n</blockquote>\n<h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><pre class=\" language-shell\"><code class=\"language-shell\">docker pull NAME[:TAG] // 不指定TAG，默认选择latest标签</code></pre>\n<h3 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h3><pre class=\" language-shell\"><code class=\"language-shell\">docekr run -t -i ubuntu /bin/bash</code></pre>\n<h3 id=\"查看镜像信息\"><a href=\"#查看镜像信息\" class=\"headerlink\" title=\"查看镜像信息\"></a>查看镜像信息</h3><pre class=\" language-shell\"><code class=\"language-shell\">docker images</code></pre>\n<ul>\n<li>添加镜像标签</li>\n</ul>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker tag ubuntu:latest my/ubuntu:latest</code></pre>\n<ul>\n<li>查看镜像详细信息</li>\n</ul>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker inspect 镜像id\ndocker inspect -f {{\".Architecture\"}} id  // 查询某一项内容</code></pre>\n<h3 id=\"搜寻镜像\"><a href=\"#搜寻镜像\" class=\"headerlink\" title=\"搜寻镜像\"></a>搜寻镜像</h3><pre><code>docker search TERM\n--automated=false 仅展示自动创建的镜像\n--no-trunc=false 输出信息不截断显示\n-s=0 仅显示评价为指定星级以上的镜像</code></pre><h3 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><pre class=\" language-shell\"><code class=\"language-shell\">docker rmi IMAGE[IMAGE...]  其中IMAGE可以为标签或者id\n</code></pre>\n<ul>\n<li>删除正在运行的镜像</li>\n</ul>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker rmi -f ubuntu 强制删除（不建议）\n推荐：1. 删除容器；2. 再用id删除镜像\ndocker rm id  \ndocker rmi ubuntu </code></pre>\n<h3 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h3><ul>\n<li>基于已有镜像创建</li>\n</ul>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n选项包括：\n-a,--author=\"\" 作者信息\n-m,--message=\"\" 提交信息\n-p,--pause=true 提交时暂停容器运行</code></pre>\n<p>下面是一个展示：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ winpty docker run -ti ubuntu bash\nroot@39b31ce63c14:/# touch test\nroot@39b31ce63c14:/# exit\n# 查看容器id\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n39b31ce63c14        ubuntu              \"bash\"              12 minutes ago      Exited (0) 11 minutes ago                       friendly_chebyshev\n\n$ docker commit -m \"added a new file\" -a \"coderluo\" 39b test:coderluo\nsha256:489150941c65c552268ddacd10d9fe05c01e30c8c3bd111e4217d727e8f724c4\n\n</code></pre>\n<ul>\n<li>基于本地模板导入</li>\n</ul>\n<p>可以直接从一个操作系统模板文件导入一个镜像，推荐使用OpenVZ提供的模板来创建。下载地址为：</p>\n<p><a href=\"https://wiki.openvz.org/Download/template/precreated\" target=\"_blank\" rel=\"noopener\">https://wiki.openvz.org/Download/template/precreated</a></p>\n<p>比如我下载了一个ubuntu，可以使用如下命令导入：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">[root@izwz909ewdz83smewux7a7z ~]# cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\nsha256:57a7c0bb864c4185d5d9d6eb6af24820595482b9df956adec5fde8d16aa9cb7c\n[root@izwz909ewdz83smewux7a7z ~]# docker images</code></pre>\n<ul>\n<li>基于Dockerfile创建</li>\n</ul>\n<h3 id=\"存出和载入镜像\"><a href=\"#存出和载入镜像\" class=\"headerlink\" title=\"存出和载入镜像\"></a>存出和载入镜像</h3><blockquote>\n<p>可以使用 docker save 和 docker load 命令来存出和载入镜像</p>\n</blockquote>\n<h4 id=\"存出镜像\"><a href=\"#存出镜像\" class=\"headerlink\" title=\"存出镜像\"></a>存出镜像</h4><pre class=\" language-shell\"><code class=\"language-shell\">$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmyubuntu            coderluo            489150941c65        About an hour ago   64.2MB\nubuntu              latest              a2a15febcdf3        43 hours ago        64.2MB\nubuntu              14.04               271ca7812183        3 months ago        188MB\nchong@L MINGW64 ~\n$ docker save -o myubuntu_14.04.tar myubuntu:coderluo\n</code></pre>\n<h4 id=\"载入镜像\"><a href=\"#载入镜像\" class=\"headerlink\" title=\"载入镜像\"></a>载入镜像</h4><pre class=\" language-shell\"><code class=\"language-shell\">chong@L MINGW64 ~\n$ docker load &lt; myubuntu_14.04.tar</code></pre>\n<h3 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h3><pre class=\" language-shell\"><code class=\"language-shell\">docker push NAME[:TAG]</code></pre>\n<hr>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><blockquote>\n<p>容器就是镜像的一个运行实例,它带有额外的可写文件层</p>\n</blockquote>\n<h3 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h3><h4 id=\"新建容器\"><a href=\"#新建容器\" class=\"headerlink\" title=\"新建容器\"></a>新建容器</h4><p>使用 docker create 创建容器后市处于停止状态,可以使用 docker start 启动</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker create -it ubuntu:latest</code></pre>\n<h4 id=\"新建并启动容器\"><a href=\"#新建并启动容器\" class=\"headerlink\" title=\"新建并启动容器\"></a>新建并启动容器</h4><pre class=\" language-shell\"><code class=\"language-shell\">root@ubuntu_server:/home/coderluo# docker run ubuntu /bin/echo 'i am coderluo'\ni am coderluo</code></pre>\n<p>等价于先 docker create 然后 docker start命令</p>\n<p>docker run 需要执行的动作:</p>\n<ol>\n<li>检查本地是否有对应的镜像,不存在就从共有仓库下载;</li>\n<li>利用镜像创建并启动一个容器;</li>\n<li>分配一个文件系统,并在只读的镜像层外面挂载一层可读写层;</li>\n<li>从宿主机配置的网桥接口中桥接一个虚拟接口到容器中；</li>\n<li>分配一个ip给容器；</li>\n<li>执行用户指定的应用程序；</li>\n<li>执行完毕后容器关闭；</li>\n</ol>\n<p>接下来，我们打开一个bash终端，允许用户交互：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker run -ti ubuntu bash</code></pre>\n<p><strong>-t ：</strong> 选项让Docker分配一个伪终端并绑定到容器的标准输入</p>\n<p><strong>-i ：</strong> 让容器的标准输入保持打开</p>\n<p><strong>使用 exit 可以退出容器，退出后该容器就处于终止状态，因为对应Docker容器来说，当运行的应用退出后，容器也就没有运行的必要了；</strong></p>\n<h4 id=\"守护态运行\"><a href=\"#守护态运行\" class=\"headerlink\" title=\"守护态运行\"></a>守护态运行</h4><p>比较常见的是需要Docker容器在后台以守护态 形式运行。 可以通过添加 <strong>-d</strong> 参数来实现：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker run -d ubuntu sh -c \"while true; do echo hello world; sleep 1; done\"\ncaedc06b26723ec1aff794a053835d2b0b603702bea8a5bb3a39e97b0adf5654\n\n$ docker logs cae\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world</code></pre>\n<h3 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><pre class=\" language-shell\"><code class=\"language-shell\">docker stop [-t|--time[=10]]</code></pre>\n<p>它首先会向容器发送SIGTERM信号，等待一段时间后（默认10s）。再发送SIGKILL信号终止容器。</p>\n<p>注意： docker kill 会直接发送SIGKILL 来强行终止容器。</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker stop cae\ncae\n</code></pre>\n<p>当Docker容器中运行的应用终结时，容器也自动终止。例如上面开启的终端容器，通过exit退出终端后，创建的容器也会终止。</p>\n<p>可以使用 <code>docekr ps -a -q</code> 所有状态的容器ID信息。</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker ps -a -q\n90bcf718ad13\ncaedc06b2672\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\ncaedc06b2672        ubuntu              \"sh -c 'while true; …\"   17 minutes ago      Up About a minute                       epic_swartz\n$ docker restart cae\ncae\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\ncaedc06b2672        ubuntu              \"sh -c 'while true; …\"   18 minutes ago      Up 8 seconds                            epic_swartz\n</code></pre>\n<h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><p>当容器后台启动，用户无法进入容器中，如果需要进入容器进行操作，则可以使用下面方法：</p>\n<h4 id=\"attach命令\"><a href=\"#attach命令\" class=\"headerlink\" title=\"attach命令\"></a>attach命令</h4><pre class=\" language-shell\"><code class=\"language-shell\">$ docker run -idt ubuntu\nb9953944f4cc4a17d09bba846d40eea25523098d188d44484f814132e3a04ae7\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nb9953944f4cc        ubuntu              \"/bin/bash\"         7 seconds ago       Up 5 seconds                            laughing_chatterjee\n$ docker attach laughing_chatterjee\nroot@b9953944f4cc:/# </code></pre>\n<p>缺点：当多个窗口同时attach到同一个容器中，所有窗口同步显示，一个阻塞则全部阻塞。</p>\n<h4 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h4><p>Docker 1.3 版本起引入一个可以直接在容器内执行命令的工具 exec。</p>\n<p>进入之前创建的容器，并启动一个bash：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker exec -ti b99 bash\nroot@b9953944f4cc:/#\n</code></pre>\n<h4 id=\"nsenter\"><a href=\"#nsenter\" class=\"headerlink\" title=\"nsenter\"></a>nsenter</h4><p>第三方支持，感兴趣可以自己google，个人感觉和exec差不多</p>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p><code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></p>\n<ul>\n<li>-f，–force=false 强行终止并删除一个运行中的容器</li>\n<li>-l，–link=false 删除容器的连接，但保留容器</li>\n<li>-v，–volumes=false 删除容器挂载的数据卷</li>\n</ul>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker rm 90b\n90b\n\n$ docker rm b99\nError response from daemon: You cannot remove a running container b9953944f4cc4a17d09bba846d40eea25523098d188d44484f814132e3a04ae7. Stop the container before attemptin\ng removal or force remove\n\nchong@L MINGW64 ~\n$ docker rm -f b99\nb99\n\n</code></pre>\n<h3 id=\"导入和导出容器\"><a href=\"#导入和导出容器\" class=\"headerlink\" title=\"导入和导出容器\"></a>导入和导出容器</h3><h4 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h4><pre class=\" language-shell\"><code class=\"language-shell\">docker export CONTAINER</code></pre>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker export cae &gt; test_for_run.tar</code></pre>\n<p>可以将导出的文件传输到其他机器上，直接通过导入命令实现容器迁移。</p>\n<h4 id=\"导入容器\"><a href=\"#导入容器\" class=\"headerlink\" title=\"导入容器\"></a>导入容器</h4><p>导出的文件可以使用 docker import 命令导入，成为镜像。</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ cat Desktop/test_for_run.tar | docker import - test/ubuntu:v1.0                                                       sha256:aa9dd6a88eb02d192c0574e1e2df171d0ec686a21048cba9a70fcd9ce3ba7d76\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ntest/ubuntu         v1.0                aa9dd6a88eb0        11 seconds ago      64.2MB</code></pre>\n<p>这里和前面镜像模块的 docker load 载入镜像的区别是：</p>\n<p>docker import 用来导入一个容器快照到本地镜像库，会丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而 docker load 命令载入镜像文件会保存完成的记录，体积也要大。而且容器快照导入可以重新制定标签等元数据信息。</p>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><blockquote>\n<p>仓库是集中存放镜像的地方</p>\n</blockquote>\n<p>很多人容易搞混仓库和注册服务器。这里说明下，注册服务器和仓库的区别。 </p>\n<p>注册服务器是存放仓库的地方，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像，比如ubuntu是一个仓库，下面有很多不同版本的镜像。他所在的服务器就是注册服务器。</p>\n<h3 id=\"创建和使用私有仓库\"><a href=\"#创建和使用私有仓库\" class=\"headerlink\" title=\"创建和使用私有仓库\"></a>创建和使用私有仓库</h3><h4 id=\"使用registry镜像创建私有仓库\"><a href=\"#使用registry镜像创建私有仓库\" class=\"headerlink\" title=\"使用registry镜像创建私有仓库\"></a>使用registry镜像创建私有仓库</h4><p>可以使用官方提供的registry 镜像 简单搭建一套本地私有仓库环境：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker run -d -p 5000:5000 -v /opt/data/registry:/var/lib/registry registry</code></pre>\n<p>参数说明：</p>\n<ul>\n<li>-d，后台运行</li>\n<li>-p，端口映射</li>\n<li>-v，将宿主机的/opt/data/registry 绑定到 /var/lib/registry, 来实现数据存放到本地路径，默认registry容器中存放镜像文件的目录/var/lib/registry</li>\n</ul>\n<p>运行后测试下我们私有仓库中的所有镜像：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ curl http://仓库宿主机ip:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    20  100    20    0     0     20      0  0:00:01 --:--:--  0:00:01   160{\"repositories\":[]}\n</code></pre>\n<p>现在是空的，因为才刚运行，里面没有任何镜像内容。</p>\n<h4 id=\"管理私有仓库镜像\"><a href=\"#管理私有仓库镜像\" class=\"headerlink\" title=\"管理私有仓库镜像\"></a>管理私有仓库镜像</h4><p>在一台测试机上（非仓库机）查看已有镜像，如果当前没有镜像 使用 docker pull 下载即可；</p>\n<ol>\n<li><p>为镜像打标签</p>\n<p>格式为： <code>docker tag IMAGE[:TAG] [REGISTRYHOST/] [USERNAME/] NAME[:TAG]</code></p>\n</li>\n</ol>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker tag ubuntu:latest 192.168.137.200:5000/ubuntu:v1\n$ docker images\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\n192.168.137.200:5000/ubuntu   v1                  a2a15febcdf3        3 days ago          64.2MB\n</code></pre>\n<p>192.168.137.200:5000 为私有镜像注册服务器的地址和端口</p>\n<ol start=\"2\">\n<li>上传到镜像服务器</li>\n</ol>\n<pre class=\" language-shell\"><code class=\"language-shell\">\n$ docker push 192.168.137.200:5000/ubuntu\nThe push refers to repository [192.168.137.200:5000/ubuntu]\n122be11ab4a2: Pushed\n7beb13bce073: Pushed\nf7eae43028b3: Pushed\n6cebf3abed5f: Pushed\nv1: digest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0 size: 1152\n$ curl http://192.168.137.200:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    28  100    28    0     0     28      0  0:00:01 --:--:--  0:00:01   198{\"repositories\":[\"ubuntu\"]}\n\n</code></pre>\n<p>如上curl命令发现已经可以看到仓库中的镜像了。</p>\n<ol start=\"3\">\n<li>测试下载镜像</li>\n</ol>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ docker rmi -f 镜像id  # 删除本地镜像\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\n$ docker pull 192.168.137.200:5000/ubuntu:v1 #下载私有仓库镜像\nv1: Pulling from ubuntu\n35c102085707: Pull complete\n251f5509d51d: Pull complete\n8e829fe70a46: Pull complete\n6001e1789921: Pull complete\nDigest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0\nStatus: Downloaded newer image for 39.108.186.135:5000/ubuntu:v1\n$ docker images # 查看本地镜像\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\n192.168.137.200:5000/ubuntu   v1                  a2a15febcdf3        3 days ago          64.2MB\n\n</code></pre>\n<p>列出所有镜像：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ curl 39.108.186.135:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    28  100    28    0     0     28      0  0:00:01 --:--:--  0:00:01   254{\"repositories\":[\"ubuntu\"]}\n</code></pre>\n<p>所有某个镜像的所有tag：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">$ curl http://39.108.186.135:5000/v2/ubuntu/tags/list\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    32  100    32    0     0     32      0  0:00:01 --:--:--  0:00:01   128{\"name\":\"ubuntu\",\"tags\":[\"v1\"]}\n</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><blockquote>\n<p>镜像是Docker运行容器的前提</p>\n</blockquote>\n<h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><pre><code class=\"shell\">docker pull NAME[:TAG] // 不指定TAG，默认选择latest标签</code></pre>\n<h3 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h3><pre><code class=\"shell\">docekr run -t -i ubuntu /bin/bash</code></pre>\n<h3 id=\"查看镜像信息\"><a href=\"#查看镜像信息\" class=\"headerlink\" title=\"查看镜像信息\"></a>查看镜像信息</h3><pre><code class=\"shell\">docker images</code></pre>\n<ul>\n<li>添加镜像标签</li>\n</ul>\n<pre><code class=\"shell\">docker tag ubuntu:latest my/ubuntu:latest</code></pre>\n<ul>\n<li>查看镜像详细信息</li>\n</ul>\n<pre><code class=\"shell\">docker inspect 镜像id\ndocker inspect -f {{\".Architecture\"}} id  // 查询某一项内容</code></pre>\n<h3 id=\"搜寻镜像\"><a href=\"#搜寻镜像\" class=\"headerlink\" title=\"搜寻镜像\"></a>搜寻镜像</h3><pre><code>docker search TERM\n--automated=false 仅展示自动创建的镜像\n--no-trunc=false 输出信息不截断显示\n-s=0 仅显示评价为指定星级以上的镜像</code></pre><h3 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><pre><code class=\"shell\">docker rmi IMAGE[IMAGE...]  其中IMAGE可以为标签或者id\n</code></pre>\n<ul>\n<li>删除正在运行的镜像</li>\n</ul>\n<pre><code class=\"shell\">docker rmi -f ubuntu 强制删除（不建议）\n推荐：1. 删除容器；2. 再用id删除镜像\ndocker rm id  \ndocker rmi ubuntu </code></pre>\n<h3 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h3><ul>\n<li>基于已有镜像创建</li>\n</ul>\n<pre><code class=\"shell\">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n选项包括：\n-a,--author=&quot;&quot; 作者信息\n-m,--message=&quot;&quot; 提交信息\n-p,--pause=true 提交时暂停容器运行</code></pre>\n<p>下面是一个展示：</p>\n<pre><code class=\"shell\">$ winpty docker run -ti ubuntu bash\nroot@39b31ce63c14:/# touch test\nroot@39b31ce63c14:/# exit\n# 查看容器id\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n39b31ce63c14        ubuntu              &quot;bash&quot;              12 minutes ago      Exited (0) 11 minutes ago                       friendly_chebyshev\n\n$ docker commit -m &quot;added a new file&quot; -a &quot;coderluo&quot; 39b test:coderluo\nsha256:489150941c65c552268ddacd10d9fe05c01e30c8c3bd111e4217d727e8f724c4\n\n</code></pre>\n<ul>\n<li>基于本地模板导入</li>\n</ul>\n<p>可以直接从一个操作系统模板文件导入一个镜像，推荐使用OpenVZ提供的模板来创建。下载地址为：</p>\n<p><a href=\"https://wiki.openvz.org/Download/template/precreated\" target=\"_blank\" rel=\"noopener\">https://wiki.openvz.org/Download/template/precreated</a></p>\n<p>比如我下载了一个ubuntu，可以使用如下命令导入：</p>\n<pre><code class=\"shell\">[root@izwz909ewdz83smewux7a7z ~]# cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\nsha256:57a7c0bb864c4185d5d9d6eb6af24820595482b9df956adec5fde8d16aa9cb7c\n[root@izwz909ewdz83smewux7a7z ~]# docker images</code></pre>\n<ul>\n<li>基于Dockerfile创建</li>\n</ul>\n<h3 id=\"存出和载入镜像\"><a href=\"#存出和载入镜像\" class=\"headerlink\" title=\"存出和载入镜像\"></a>存出和载入镜像</h3><blockquote>\n<p>可以使用 docker save 和 docker load 命令来存出和载入镜像</p>\n</blockquote>\n<h4 id=\"存出镜像\"><a href=\"#存出镜像\" class=\"headerlink\" title=\"存出镜像\"></a>存出镜像</h4><pre><code class=\"shell\">$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmyubuntu            coderluo            489150941c65        About an hour ago   64.2MB\nubuntu              latest              a2a15febcdf3        43 hours ago        64.2MB\nubuntu              14.04               271ca7812183        3 months ago        188MB\nchong@L MINGW64 ~\n$ docker save -o myubuntu_14.04.tar myubuntu:coderluo\n</code></pre>\n<h4 id=\"载入镜像\"><a href=\"#载入镜像\" class=\"headerlink\" title=\"载入镜像\"></a>载入镜像</h4><pre><code class=\"shell\">chong@L MINGW64 ~\n$ docker load &lt; myubuntu_14.04.tar</code></pre>\n<h3 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h3><pre><code class=\"shell\">docker push NAME[:TAG]</code></pre>\n<hr>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><blockquote>\n<p>容器就是镜像的一个运行实例,它带有额外的可写文件层</p>\n</blockquote>\n<h3 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h3><h4 id=\"新建容器\"><a href=\"#新建容器\" class=\"headerlink\" title=\"新建容器\"></a>新建容器</h4><p>使用 docker create 创建容器后市处于停止状态,可以使用 docker start 启动</p>\n<pre><code class=\"shell\">docker create -it ubuntu:latest</code></pre>\n<h4 id=\"新建并启动容器\"><a href=\"#新建并启动容器\" class=\"headerlink\" title=\"新建并启动容器\"></a>新建并启动容器</h4><pre><code class=\"shell\">root@ubuntu_server:/home/coderluo# docker run ubuntu /bin/echo &#39;i am coderluo&#39;\ni am coderluo</code></pre>\n<p>等价于先 docker create 然后 docker start命令</p>\n<p>docker run 需要执行的动作:</p>\n<ol>\n<li>检查本地是否有对应的镜像,不存在就从共有仓库下载;</li>\n<li>利用镜像创建并启动一个容器;</li>\n<li>分配一个文件系统,并在只读的镜像层外面挂载一层可读写层;</li>\n<li>从宿主机配置的网桥接口中桥接一个虚拟接口到容器中；</li>\n<li>分配一个ip给容器；</li>\n<li>执行用户指定的应用程序；</li>\n<li>执行完毕后容器关闭；</li>\n</ol>\n<p>接下来，我们打开一个bash终端，允许用户交互：</p>\n<pre><code class=\"shell\">docker run -ti ubuntu bash</code></pre>\n<p><strong>-t ：</strong> 选项让Docker分配一个伪终端并绑定到容器的标准输入</p>\n<p><strong>-i ：</strong> 让容器的标准输入保持打开</p>\n<p><strong>使用 exit 可以退出容器，退出后该容器就处于终止状态，因为对应Docker容器来说，当运行的应用退出后，容器也就没有运行的必要了；</strong></p>\n<h4 id=\"守护态运行\"><a href=\"#守护态运行\" class=\"headerlink\" title=\"守护态运行\"></a>守护态运行</h4><p>比较常见的是需要Docker容器在后台以守护态 形式运行。 可以通过添加 <strong>-d</strong> 参数来实现：</p>\n<pre><code class=\"shell\">$ docker run -d ubuntu sh -c &quot;while true; do echo hello world; sleep 1; done&quot;\ncaedc06b26723ec1aff794a053835d2b0b603702bea8a5bb3a39e97b0adf5654\n\n$ docker logs cae\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world</code></pre>\n<h3 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><pre><code class=\"shell\">docker stop [-t|--time[=10]]</code></pre>\n<p>它首先会向容器发送SIGTERM信号，等待一段时间后（默认10s）。再发送SIGKILL信号终止容器。</p>\n<p>注意： docker kill 会直接发送SIGKILL 来强行终止容器。</p>\n<pre><code class=\"shell\">$ docker stop cae\ncae\n</code></pre>\n<p>当Docker容器中运行的应用终结时，容器也自动终止。例如上面开启的终端容器，通过exit退出终端后，创建的容器也会终止。</p>\n<p>可以使用 <code>docekr ps -a -q</code> 所有状态的容器ID信息。</p>\n<pre><code class=\"shell\">$ docker ps -a -q\n90bcf718ad13\ncaedc06b2672\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\ncaedc06b2672        ubuntu              &quot;sh -c &#39;while true; …&quot;   17 minutes ago      Up About a minute                       epic_swartz\n$ docker restart cae\ncae\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\ncaedc06b2672        ubuntu              &quot;sh -c &#39;while true; …&quot;   18 minutes ago      Up 8 seconds                            epic_swartz\n</code></pre>\n<h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><p>当容器后台启动，用户无法进入容器中，如果需要进入容器进行操作，则可以使用下面方法：</p>\n<h4 id=\"attach命令\"><a href=\"#attach命令\" class=\"headerlink\" title=\"attach命令\"></a>attach命令</h4><pre><code class=\"shell\">$ docker run -idt ubuntu\nb9953944f4cc4a17d09bba846d40eea25523098d188d44484f814132e3a04ae7\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nb9953944f4cc        ubuntu              &quot;/bin/bash&quot;         7 seconds ago       Up 5 seconds                            laughing_chatterjee\n$ docker attach laughing_chatterjee\nroot@b9953944f4cc:/# </code></pre>\n<p>缺点：当多个窗口同时attach到同一个容器中，所有窗口同步显示，一个阻塞则全部阻塞。</p>\n<h4 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h4><p>Docker 1.3 版本起引入一个可以直接在容器内执行命令的工具 exec。</p>\n<p>进入之前创建的容器，并启动一个bash：</p>\n<pre><code class=\"shell\">$ docker exec -ti b99 bash\nroot@b9953944f4cc:/#\n</code></pre>\n<h4 id=\"nsenter\"><a href=\"#nsenter\" class=\"headerlink\" title=\"nsenter\"></a>nsenter</h4><p>第三方支持，感兴趣可以自己google，个人感觉和exec差不多</p>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p><code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></p>\n<ul>\n<li>-f，–force=false 强行终止并删除一个运行中的容器</li>\n<li>-l，–link=false 删除容器的连接，但保留容器</li>\n<li>-v，–volumes=false 删除容器挂载的数据卷</li>\n</ul>\n<pre><code class=\"shell\">$ docker rm 90b\n90b\n\n$ docker rm b99\nError response from daemon: You cannot remove a running container b9953944f4cc4a17d09bba846d40eea25523098d188d44484f814132e3a04ae7. Stop the container before attemptin\ng removal or force remove\n\nchong@L MINGW64 ~\n$ docker rm -f b99\nb99\n\n</code></pre>\n<h3 id=\"导入和导出容器\"><a href=\"#导入和导出容器\" class=\"headerlink\" title=\"导入和导出容器\"></a>导入和导出容器</h3><h4 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h4><pre><code class=\"shell\">docker export CONTAINER</code></pre>\n<pre><code class=\"shell\">docker export cae &gt; test_for_run.tar</code></pre>\n<p>可以将导出的文件传输到其他机器上，直接通过导入命令实现容器迁移。</p>\n<h4 id=\"导入容器\"><a href=\"#导入容器\" class=\"headerlink\" title=\"导入容器\"></a>导入容器</h4><p>导出的文件可以使用 docker import 命令导入，成为镜像。</p>\n<pre><code class=\"shell\">$ cat Desktop/test_for_run.tar | docker import - test/ubuntu:v1.0                                                       sha256:aa9dd6a88eb02d192c0574e1e2df171d0ec686a21048cba9a70fcd9ce3ba7d76\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ntest/ubuntu         v1.0                aa9dd6a88eb0        11 seconds ago      64.2MB</code></pre>\n<p>这里和前面镜像模块的 docker load 载入镜像的区别是：</p>\n<p>docker import 用来导入一个容器快照到本地镜像库，会丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而 docker load 命令载入镜像文件会保存完成的记录，体积也要大。而且容器快照导入可以重新制定标签等元数据信息。</p>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><blockquote>\n<p>仓库是集中存放镜像的地方</p>\n</blockquote>\n<p>很多人容易搞混仓库和注册服务器。这里说明下，注册服务器和仓库的区别。 </p>\n<p>注册服务器是存放仓库的地方，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像，比如ubuntu是一个仓库，下面有很多不同版本的镜像。他所在的服务器就是注册服务器。</p>\n<h3 id=\"创建和使用私有仓库\"><a href=\"#创建和使用私有仓库\" class=\"headerlink\" title=\"创建和使用私有仓库\"></a>创建和使用私有仓库</h3><h4 id=\"使用registry镜像创建私有仓库\"><a href=\"#使用registry镜像创建私有仓库\" class=\"headerlink\" title=\"使用registry镜像创建私有仓库\"></a>使用registry镜像创建私有仓库</h4><p>可以使用官方提供的registry 镜像 简单搭建一套本地私有仓库环境：</p>\n<pre><code class=\"shell\">docker run -d -p 5000:5000 -v /opt/data/registry:/var/lib/registry registry</code></pre>\n<p>参数说明：</p>\n<ul>\n<li>-d，后台运行</li>\n<li>-p，端口映射</li>\n<li>-v，将宿主机的/opt/data/registry 绑定到 /var/lib/registry, 来实现数据存放到本地路径，默认registry容器中存放镜像文件的目录/var/lib/registry</li>\n</ul>\n<p>运行后测试下我们私有仓库中的所有镜像：</p>\n<pre><code class=\"shell\">$ curl http://仓库宿主机ip:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    20  100    20    0     0     20      0  0:00:01 --:--:--  0:00:01   160{&quot;repositories&quot;:[]}\n</code></pre>\n<p>现在是空的，因为才刚运行，里面没有任何镜像内容。</p>\n<h4 id=\"管理私有仓库镜像\"><a href=\"#管理私有仓库镜像\" class=\"headerlink\" title=\"管理私有仓库镜像\"></a>管理私有仓库镜像</h4><p>在一台测试机上（非仓库机）查看已有镜像，如果当前没有镜像 使用 docker pull 下载即可；</p>\n<ol>\n<li><p>为镜像打标签</p>\n<p>格式为： <code>docker tag IMAGE[:TAG] [REGISTRYHOST/] [USERNAME/] NAME[:TAG]</code></p>\n</li>\n</ol>\n<pre><code class=\"shell\">docker tag ubuntu:latest 192.168.137.200:5000/ubuntu:v1\n$ docker images\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\n192.168.137.200:5000/ubuntu   v1                  a2a15febcdf3        3 days ago          64.2MB\n</code></pre>\n<p>192.168.137.200:5000 为私有镜像注册服务器的地址和端口</p>\n<ol start=\"2\">\n<li>上传到镜像服务器</li>\n</ol>\n<pre><code class=\"shell\">\n$ docker push 192.168.137.200:5000/ubuntu\nThe push refers to repository [192.168.137.200:5000/ubuntu]\n122be11ab4a2: Pushed\n7beb13bce073: Pushed\nf7eae43028b3: Pushed\n6cebf3abed5f: Pushed\nv1: digest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0 size: 1152\n$ curl http://192.168.137.200:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    28  100    28    0     0     28      0  0:00:01 --:--:--  0:00:01   198{&quot;repositories&quot;:[&quot;ubuntu&quot;]}\n\n</code></pre>\n<p>如上curl命令发现已经可以看到仓库中的镜像了。</p>\n<ol start=\"3\">\n<li>测试下载镜像</li>\n</ol>\n<pre><code class=\"shell\">$ docker rmi -f 镜像id  # 删除本地镜像\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\n$ docker pull 192.168.137.200:5000/ubuntu:v1 #下载私有仓库镜像\nv1: Pulling from ubuntu\n35c102085707: Pull complete\n251f5509d51d: Pull complete\n8e829fe70a46: Pull complete\n6001e1789921: Pull complete\nDigest: sha256:ca013ac5c09f9a9f6db8370c1b759a29fe997d64d6591e9a75b71748858f7da0\nStatus: Downloaded newer image for 39.108.186.135:5000/ubuntu:v1\n$ docker images # 查看本地镜像\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\n192.168.137.200:5000/ubuntu   v1                  a2a15febcdf3        3 days ago          64.2MB\n\n</code></pre>\n<p>列出所有镜像：</p>\n<pre><code class=\"shell\">$ curl 39.108.186.135:5000/v2/_catalog\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    28  100    28    0     0     28      0  0:00:01 --:--:--  0:00:01   254{&quot;repositories&quot;:[&quot;ubuntu&quot;]}\n</code></pre>\n<p>所有某个镜像的所有tag：</p>\n<pre><code class=\"shell\">$ curl http://39.108.186.135:5000/v2/ubuntu/tags/list\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    32  100    32    0     0     32      0  0:00:01 --:--:--  0:00:01   128{&quot;name&quot;:&quot;ubuntu&quot;,&quot;tags&quot;:[&quot;v1&quot;]}\n</code></pre>\n"},{"title":"CSAPP-1:计算机系统漫游","date":"2019-08-30T15:43:26.000Z","cover":true,"_content":"\n> 本周开始了CSAPP的读书计划，规划已久，终于要开动了。之前自己也零散看过，不得不说这本书有难度都没坚持下去，这次跟着码农翻身小伙伴们一起打卡这本书。\n\n\n\nCSAPP这本书不用多说绝对经典中的经典，如果想成为一名知道计算机硬件和软件如何工作，了解其如何影响程序的正确性和性能的程序员，那么一定得看啊。\n\n> 如果能完全理解本书讲解的计算机系统以及它对应用程序的影响，那么恭喜你，你走上了一条为数不多的大牛道路。\n\n\n\n在开始之前,我们先看一个最常见的程序:\n\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"hello,world\\n\");\n    return 0;\n}\n```\n\n\n\n本文就从上面这个最简单的hello程序展开,沿着它的生命周期展开学习.\n\n\n\n## 程序的保存格式\n\n上面的hello程序其实就是一个由值 0 和 1 组成的位（即比特）序列，8个位成一组，称为字节。我们输入文本hello.c文件中的字符即用每个字节来表示（大部分计算机系统都是用ASCII标准来表示字符，即把字节转为整数值）。\n\n**总结： 信息=位+上下文**\n\n\n\n## 程序是如何运行的\n\n\n\nhello程序的诞生使用C语言来编写的，好处是人可以读懂，但是为了在系统上运行，还是得转化为一系列低级的机器语言指令。\n\n在Unix系统上，从源文件到目标文件的转化得靠编译器， 下面记录编译过程：\n\n![](http://media.coderluo.top/计算机系统漫游/49y1m.png)\n\n1. hello.c需要经过预处理器读取系统头文件内容并且插入到程序文本中得到一个新的C程序，一般以.i作为扩展名；\n2. 然后编译器将文本文件hello.i 翻译成汇编语言文本文件hello.s\n3. 接下来，就该汇编器登场，将汇编语言翻译成机器语言指令，并保存到hello.o文件中，此时它是一个二进制文件了\n4. 最后链接阶段，将程序中调用的c标准库的函数合并到我们的hello.o程序中，结果就是一个可执行文件，可以被加载到内存中，由系统执行。\n\n\n\n### 系统的硬件组成\n\n要真正了解程序时如何运行的，首先要对系统的硬件组成有一个了解：\n\n1. 总线：贯穿整个系统的电子管道，可以理解为所有的数据设备以及系统之间的数据流转都要接到总线上。\n\n2. I/O设备：系统与外部世界的联系通道；比如键盘、鼠标、磁盘、显示器等；\n\n   所有的I/O设置都要通过一个控制器或者适配器与I/O总线相连；\n\n3. 主存：也就是我们常说的内存，这是一个临时存储设备，在处理器执行程序时，用来存放程序和处理的数据；\n\n4. 处理器：也就是我们常说的CPU，是解释存储在主存中指令的引擎；其核心是一个大小为一个字（定长的字节，根据系统不同确定）的寄存器，称为程序计数器（PC）。在程序运行的过程中，PC都是指向主存中的一条机器语言指令。\n\n   从系统通电开始，直到系统断电，处理器一直在不断的执行PC指向的指令，在更新PC，使其指向下一条指令；\n\n   下面列举几个CPU在指令要求下可能执行的操作：\n\n   - 加载：从主存复制一个字到寄存器，已覆盖原有寄存器的内容；\n   - 存储：从寄存器复制一个字到主存的某个位置，以覆盖这个位置的原有值；\n   - 操作：把两个寄存器的内容复制到ALU（算数/逻辑单元）,ALU对这两个字做算数运算，并将结果存放到一个寄存器中覆盖原有的内容；\n   - 跳转：从指令本身抽取一个字，并将这个字复制到PC中，以覆盖PC中原来的值；\n\n   > 处理器看上去是它的指令集架构的简单实现，但是现代处理器采用非常复杂的机制来加速程序的运行。因此我们在理解的时候要将处理器的**指令集架构** 和处理器的 **微体系结构**分来：指令集架构描述的是每条机器代码指令的效果；微体系结构描述的是处理器的实现；\n\n### 运行程序\n\n当我们在执行 `./hello\t` 后，其实发生的过程是：\n\n刚开始，shell程序执行它的指令，等待我们输入一个命令，当我们输入`./hello` 后，shell程序将字符读入寄存器，在把它存放到内存中；\n\n当你在敲回车时，shell程序就知道我们已经结束了命令的输入，然后shell执行一系列指令来加载可执行文件，将目前文件的代码和数据复制到主存。**注：利用直接存储器（DMA）技术，数据可以不到处理器直接从磁盘到主存。**\n\n一旦加载到内存中，处理器就开始执行程序的main机器指令，这些指令将“hello,world\\n” 字符串中字节从主存复制到寄存器文件。再从寄存器文件复制到显示设备，最终展示在屏幕上。\n\n![](http://media.coderluo.top/计算机系统漫游/zyak9.png)\n\n\n\n## 高速缓存\n\n\n\n​\t从上面的例子，我们可以总结出，hello程序经历了从开始在磁盘上，加载时被复制到主存，处理器运行时又从主存复制到处理器，最后又从处理器复制到显示器。\n\n​\t这里从我们程序员角度讲，这些复制就是开销，那么问题来了，如何减小开销提高处理器效率呢？？？\n\n从机械原理角度来看，存储设备越大运行越慢；处理器读磁盘比读内存开销大1000万倍，而寄存器文件的读取速度又比内存块几乎100倍，加快处理器的运行速度比加快主存运行速度要容器的多。\n\n​\t针对处理器与主存之间的差异，系统设计采用了更小更快的存储设备，称之为高速缓存，存放处理器近期可能会需要的信息。这个其实和我们平时开发程序是一样的，采用多级缓存，存放热点数据，提高系统处理能力。 这里的原理是利用程序具有访问局部区域里的数据和代码的趋势，所以高速缓存中存放了可能经常访问的数据，这样大部分操作就能在告诉缓存中完成。\n\n请看下面的存储器层次的结构，相信你会一目了然：\n\n![](http://media.coderluo.top/计算机系统漫游/zwczg.png)\n\n\n\n如图所示，上一层存储器是下一层的高速缓存。\n\n\n\n## 操作系统管理硬件\n\n我们写的程序，没有直接访问键盘、显示器、磁盘等硬件，而是依赖操作系统提供的服务，所以可以把操作系统看成是应用程序和硬件之间一层软件。\n\n![](http://media.coderluo.top/计算机系统漫游/84g1c.png)\n\n\n\n操作系统有两大功能：\n\n1. 防止硬件被滥用；\n2. 对应用程序屏蔽底层复杂而通常又大不相同的硬件设备，提供简单一致的机制；\n\n操作系统通常抽象出几个概念：进程、虚拟内存、文件；\n\n### 进程\n\n进程是操作系统对一个正在运行的应用程序的抽象，一个系统可以同时运行多个进程。\n\n单核处理器一个时刻只能执行一个程序，而目前的多核处理器能同时执行多个程序。无论单核还是多核，一个CPU看上去都是在并发执行多个进程，这是通过处理器在进程间切换来实现的，这种切换被称为 **上下文切换**；\n\n进程之间的切换是由操作系统内核管理的，内核是操作系统常驻主存的部分。当应用程序需要操作系统的某些操作时，比如读写文件，它就执行一条系统调用指令，将控制权传递给内核。然后内核执行被请求的操作并返回应用程序。 注意，内核不是一个独立的进程，它是系统管理所有进程所用代码和数据结构的集合。\n\n\n\n### 线程\n\n一个进程实际上是由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。\n\n优点：比进程之间更容易共享数据；一般来讲也比进程更高效；\n\n### 虚拟内存\n\n这是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在单独使用主存，每个进程看到的内存都是一致的，称为虚拟地址空间，如下图所示，地址是从小往上增大的：\n\n![](http://media.coderluo.top/计算机系统漫游/d3sxd.png)\n\n\n\n### 文件\n\n文件就是字节序列，所有的I/O设备，甚至网络都可以看成是文件；\n\n\n\n### 并发\n\n多核处理器是将多个CPU集成到一个集成电路芯片上。多核处理器组织架构如下：\n\n![](http://media.coderluo.top/计算机系统漫游/sx3es.png)\n\n\n\n超线程：称为同时多线程，允许一个CPU同时执行多个并发流的技术。Intel Core i7 处理器可以让每个核执行两个线程。\n\n### 计算机系统中的抽象\n\n在处理里，指令集架构提供了对实际处理器硬件的抽象，使用这个抽象，机器代码表现的好像运行在一个一次只执行一条指令的处理器上。不管底层多复杂精细，哪怕可以并发的执行多条指令，担又总是与那个简单有序的模型保持一致。只要模型一样，不同的处理器实现也能执行同样的机器代码，而又提供不同的开销和性能。这种抽象思想简直太重要了，在整个计算机科学中也随处可见，比如java类的生命和C语言的函数原型，以及计算机网络的分层。\n\n![](http://media.coderluo.top/计算机系统漫游/i7aak.png)\n\n\n\n看了这上面的图可以总结为：\n\n1. 文件是对I/O设置的抽象；\n2. 虚拟内存是对主存和磁盘的抽象；\n3. 进程是对处理器、主存和I/O设备的抽象；\n\n\n\n至此，本章的学习就结束了，主要对计算机系统的组成和程序运行有了大框架的认知，后续继续进行深入学习。\n","source":"_posts/csapp/CSAPP-1-计算机系统漫游.md","raw":"---\ntitle: 'CSAPP-1:计算机系统漫游'\ntags:\n  - CSAPP\ndate: 2019-08-30 23:43:26\ncategories: 操作系统\ncover: true\n---\n\n> 本周开始了CSAPP的读书计划，规划已久，终于要开动了。之前自己也零散看过，不得不说这本书有难度都没坚持下去，这次跟着码农翻身小伙伴们一起打卡这本书。\n\n\n\nCSAPP这本书不用多说绝对经典中的经典，如果想成为一名知道计算机硬件和软件如何工作，了解其如何影响程序的正确性和性能的程序员，那么一定得看啊。\n\n> 如果能完全理解本书讲解的计算机系统以及它对应用程序的影响，那么恭喜你，你走上了一条为数不多的大牛道路。\n\n\n\n在开始之前,我们先看一个最常见的程序:\n\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"hello,world\\n\");\n    return 0;\n}\n```\n\n\n\n本文就从上面这个最简单的hello程序展开,沿着它的生命周期展开学习.\n\n\n\n## 程序的保存格式\n\n上面的hello程序其实就是一个由值 0 和 1 组成的位（即比特）序列，8个位成一组，称为字节。我们输入文本hello.c文件中的字符即用每个字节来表示（大部分计算机系统都是用ASCII标准来表示字符，即把字节转为整数值）。\n\n**总结： 信息=位+上下文**\n\n\n\n## 程序是如何运行的\n\n\n\nhello程序的诞生使用C语言来编写的，好处是人可以读懂，但是为了在系统上运行，还是得转化为一系列低级的机器语言指令。\n\n在Unix系统上，从源文件到目标文件的转化得靠编译器， 下面记录编译过程：\n\n![](http://media.coderluo.top/计算机系统漫游/49y1m.png)\n\n1. hello.c需要经过预处理器读取系统头文件内容并且插入到程序文本中得到一个新的C程序，一般以.i作为扩展名；\n2. 然后编译器将文本文件hello.i 翻译成汇编语言文本文件hello.s\n3. 接下来，就该汇编器登场，将汇编语言翻译成机器语言指令，并保存到hello.o文件中，此时它是一个二进制文件了\n4. 最后链接阶段，将程序中调用的c标准库的函数合并到我们的hello.o程序中，结果就是一个可执行文件，可以被加载到内存中，由系统执行。\n\n\n\n### 系统的硬件组成\n\n要真正了解程序时如何运行的，首先要对系统的硬件组成有一个了解：\n\n1. 总线：贯穿整个系统的电子管道，可以理解为所有的数据设备以及系统之间的数据流转都要接到总线上。\n\n2. I/O设备：系统与外部世界的联系通道；比如键盘、鼠标、磁盘、显示器等；\n\n   所有的I/O设置都要通过一个控制器或者适配器与I/O总线相连；\n\n3. 主存：也就是我们常说的内存，这是一个临时存储设备，在处理器执行程序时，用来存放程序和处理的数据；\n\n4. 处理器：也就是我们常说的CPU，是解释存储在主存中指令的引擎；其核心是一个大小为一个字（定长的字节，根据系统不同确定）的寄存器，称为程序计数器（PC）。在程序运行的过程中，PC都是指向主存中的一条机器语言指令。\n\n   从系统通电开始，直到系统断电，处理器一直在不断的执行PC指向的指令，在更新PC，使其指向下一条指令；\n\n   下面列举几个CPU在指令要求下可能执行的操作：\n\n   - 加载：从主存复制一个字到寄存器，已覆盖原有寄存器的内容；\n   - 存储：从寄存器复制一个字到主存的某个位置，以覆盖这个位置的原有值；\n   - 操作：把两个寄存器的内容复制到ALU（算数/逻辑单元）,ALU对这两个字做算数运算，并将结果存放到一个寄存器中覆盖原有的内容；\n   - 跳转：从指令本身抽取一个字，并将这个字复制到PC中，以覆盖PC中原来的值；\n\n   > 处理器看上去是它的指令集架构的简单实现，但是现代处理器采用非常复杂的机制来加速程序的运行。因此我们在理解的时候要将处理器的**指令集架构** 和处理器的 **微体系结构**分来：指令集架构描述的是每条机器代码指令的效果；微体系结构描述的是处理器的实现；\n\n### 运行程序\n\n当我们在执行 `./hello\t` 后，其实发生的过程是：\n\n刚开始，shell程序执行它的指令，等待我们输入一个命令，当我们输入`./hello` 后，shell程序将字符读入寄存器，在把它存放到内存中；\n\n当你在敲回车时，shell程序就知道我们已经结束了命令的输入，然后shell执行一系列指令来加载可执行文件，将目前文件的代码和数据复制到主存。**注：利用直接存储器（DMA）技术，数据可以不到处理器直接从磁盘到主存。**\n\n一旦加载到内存中，处理器就开始执行程序的main机器指令，这些指令将“hello,world\\n” 字符串中字节从主存复制到寄存器文件。再从寄存器文件复制到显示设备，最终展示在屏幕上。\n\n![](http://media.coderluo.top/计算机系统漫游/zyak9.png)\n\n\n\n## 高速缓存\n\n\n\n​\t从上面的例子，我们可以总结出，hello程序经历了从开始在磁盘上，加载时被复制到主存，处理器运行时又从主存复制到处理器，最后又从处理器复制到显示器。\n\n​\t这里从我们程序员角度讲，这些复制就是开销，那么问题来了，如何减小开销提高处理器效率呢？？？\n\n从机械原理角度来看，存储设备越大运行越慢；处理器读磁盘比读内存开销大1000万倍，而寄存器文件的读取速度又比内存块几乎100倍，加快处理器的运行速度比加快主存运行速度要容器的多。\n\n​\t针对处理器与主存之间的差异，系统设计采用了更小更快的存储设备，称之为高速缓存，存放处理器近期可能会需要的信息。这个其实和我们平时开发程序是一样的，采用多级缓存，存放热点数据，提高系统处理能力。 这里的原理是利用程序具有访问局部区域里的数据和代码的趋势，所以高速缓存中存放了可能经常访问的数据，这样大部分操作就能在告诉缓存中完成。\n\n请看下面的存储器层次的结构，相信你会一目了然：\n\n![](http://media.coderluo.top/计算机系统漫游/zwczg.png)\n\n\n\n如图所示，上一层存储器是下一层的高速缓存。\n\n\n\n## 操作系统管理硬件\n\n我们写的程序，没有直接访问键盘、显示器、磁盘等硬件，而是依赖操作系统提供的服务，所以可以把操作系统看成是应用程序和硬件之间一层软件。\n\n![](http://media.coderluo.top/计算机系统漫游/84g1c.png)\n\n\n\n操作系统有两大功能：\n\n1. 防止硬件被滥用；\n2. 对应用程序屏蔽底层复杂而通常又大不相同的硬件设备，提供简单一致的机制；\n\n操作系统通常抽象出几个概念：进程、虚拟内存、文件；\n\n### 进程\n\n进程是操作系统对一个正在运行的应用程序的抽象，一个系统可以同时运行多个进程。\n\n单核处理器一个时刻只能执行一个程序，而目前的多核处理器能同时执行多个程序。无论单核还是多核，一个CPU看上去都是在并发执行多个进程，这是通过处理器在进程间切换来实现的，这种切换被称为 **上下文切换**；\n\n进程之间的切换是由操作系统内核管理的，内核是操作系统常驻主存的部分。当应用程序需要操作系统的某些操作时，比如读写文件，它就执行一条系统调用指令，将控制权传递给内核。然后内核执行被请求的操作并返回应用程序。 注意，内核不是一个独立的进程，它是系统管理所有进程所用代码和数据结构的集合。\n\n\n\n### 线程\n\n一个进程实际上是由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。\n\n优点：比进程之间更容易共享数据；一般来讲也比进程更高效；\n\n### 虚拟内存\n\n这是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在单独使用主存，每个进程看到的内存都是一致的，称为虚拟地址空间，如下图所示，地址是从小往上增大的：\n\n![](http://media.coderluo.top/计算机系统漫游/d3sxd.png)\n\n\n\n### 文件\n\n文件就是字节序列，所有的I/O设备，甚至网络都可以看成是文件；\n\n\n\n### 并发\n\n多核处理器是将多个CPU集成到一个集成电路芯片上。多核处理器组织架构如下：\n\n![](http://media.coderluo.top/计算机系统漫游/sx3es.png)\n\n\n\n超线程：称为同时多线程，允许一个CPU同时执行多个并发流的技术。Intel Core i7 处理器可以让每个核执行两个线程。\n\n### 计算机系统中的抽象\n\n在处理里，指令集架构提供了对实际处理器硬件的抽象，使用这个抽象，机器代码表现的好像运行在一个一次只执行一条指令的处理器上。不管底层多复杂精细，哪怕可以并发的执行多条指令，担又总是与那个简单有序的模型保持一致。只要模型一样，不同的处理器实现也能执行同样的机器代码，而又提供不同的开销和性能。这种抽象思想简直太重要了，在整个计算机科学中也随处可见，比如java类的生命和C语言的函数原型，以及计算机网络的分层。\n\n![](http://media.coderluo.top/计算机系统漫游/i7aak.png)\n\n\n\n看了这上面的图可以总结为：\n\n1. 文件是对I/O设置的抽象；\n2. 虚拟内存是对主存和磁盘的抽象；\n3. 进程是对处理器、主存和I/O设备的抽象；\n\n\n\n至此，本章的学习就结束了，主要对计算机系统的组成和程序运行有了大框架的认知，后续继续进行深入学习。\n","slug":"csapp/CSAPP-1-计算机系统漫游","published":1,"updated":"2019-09-28T15:06:56.808Z","_id":"ck13pfjq30007cno6dz0gbokz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本周开始了CSAPP的读书计划，规划已久，终于要开动了。之前自己也零散看过，不得不说这本书有难度都没坚持下去，这次跟着码农翻身小伙伴们一起打卡这本书。</p>\n</blockquote>\n<p>CSAPP这本书不用多说绝对经典中的经典，如果想成为一名知道计算机硬件和软件如何工作，了解其如何影响程序的正确性和性能的程序员，那么一定得看啊。</p>\n<blockquote>\n<p>如果能完全理解本书讲解的计算机系统以及它对应用程序的影响，那么恭喜你，你走上了一条为数不多的大牛道路。</p>\n</blockquote>\n<p>在开始之前,我们先看一个最常见的程序:</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>本文就从上面这个最简单的hello程序展开,沿着它的生命周期展开学习.</p>\n<h2 id=\"程序的保存格式\"><a href=\"#程序的保存格式\" class=\"headerlink\" title=\"程序的保存格式\"></a>程序的保存格式</h2><p>上面的hello程序其实就是一个由值 0 和 1 组成的位（即比特）序列，8个位成一组，称为字节。我们输入文本hello.c文件中的字符即用每个字节来表示（大部分计算机系统都是用ASCII标准来表示字符，即把字节转为整数值）。</p>\n<p><strong>总结： 信息=位+上下文</strong></p>\n<h2 id=\"程序是如何运行的\"><a href=\"#程序是如何运行的\" class=\"headerlink\" title=\"程序是如何运行的\"></a>程序是如何运行的</h2><p>hello程序的诞生使用C语言来编写的，好处是人可以读懂，但是为了在系统上运行，还是得转化为一系列低级的机器语言指令。</p>\n<p>在Unix系统上，从源文件到目标文件的转化得靠编译器， 下面记录编译过程：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/49y1m.png\" alt=\"\"></p>\n<ol>\n<li>hello.c需要经过预处理器读取系统头文件内容并且插入到程序文本中得到一个新的C程序，一般以.i作为扩展名；</li>\n<li>然后编译器将文本文件hello.i 翻译成汇编语言文本文件hello.s</li>\n<li>接下来，就该汇编器登场，将汇编语言翻译成机器语言指令，并保存到hello.o文件中，此时它是一个二进制文件了</li>\n<li>最后链接阶段，将程序中调用的c标准库的函数合并到我们的hello.o程序中，结果就是一个可执行文件，可以被加载到内存中，由系统执行。</li>\n</ol>\n<h3 id=\"系统的硬件组成\"><a href=\"#系统的硬件组成\" class=\"headerlink\" title=\"系统的硬件组成\"></a>系统的硬件组成</h3><p>要真正了解程序时如何运行的，首先要对系统的硬件组成有一个了解：</p>\n<ol>\n<li><p>总线：贯穿整个系统的电子管道，可以理解为所有的数据设备以及系统之间的数据流转都要接到总线上。</p>\n</li>\n<li><p>I/O设备：系统与外部世界的联系通道；比如键盘、鼠标、磁盘、显示器等；</p>\n<p>所有的I/O设置都要通过一个控制器或者适配器与I/O总线相连；</p>\n</li>\n<li><p>主存：也就是我们常说的内存，这是一个临时存储设备，在处理器执行程序时，用来存放程序和处理的数据；</p>\n</li>\n<li><p>处理器：也就是我们常说的CPU，是解释存储在主存中指令的引擎；其核心是一个大小为一个字（定长的字节，根据系统不同确定）的寄存器，称为程序计数器（PC）。在程序运行的过程中，PC都是指向主存中的一条机器语言指令。</p>\n<p>从系统通电开始，直到系统断电，处理器一直在不断的执行PC指向的指令，在更新PC，使其指向下一条指令；</p>\n<p>下面列举几个CPU在指令要求下可能执行的操作：</p>\n<ul>\n<li>加载：从主存复制一个字到寄存器，已覆盖原有寄存器的内容；</li>\n<li>存储：从寄存器复制一个字到主存的某个位置，以覆盖这个位置的原有值；</li>\n<li>操作：把两个寄存器的内容复制到ALU（算数/逻辑单元）,ALU对这两个字做算数运算，并将结果存放到一个寄存器中覆盖原有的内容；</li>\n<li>跳转：从指令本身抽取一个字，并将这个字复制到PC中，以覆盖PC中原来的值；</li>\n</ul>\n<blockquote>\n<p>处理器看上去是它的指令集架构的简单实现，但是现代处理器采用非常复杂的机制来加速程序的运行。因此我们在理解的时候要将处理器的<strong>指令集架构</strong> 和处理器的 <strong>微体系结构</strong>分来：指令集架构描述的是每条机器代码指令的效果；微体系结构描述的是处理器的实现；</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h3><p>当我们在执行 <code>./hello</code> 后，其实发生的过程是：</p>\n<p>刚开始，shell程序执行它的指令，等待我们输入一个命令，当我们输入<code>./hello</code> 后，shell程序将字符读入寄存器，在把它存放到内存中；</p>\n<p>当你在敲回车时，shell程序就知道我们已经结束了命令的输入，然后shell执行一系列指令来加载可执行文件，将目前文件的代码和数据复制到主存。<strong>注：利用直接存储器（DMA）技术，数据可以不到处理器直接从磁盘到主存。</strong></p>\n<p>一旦加载到内存中，处理器就开始执行程序的main机器指令，这些指令将“hello,world\\n” 字符串中字节从主存复制到寄存器文件。再从寄存器文件复制到显示设备，最终展示在屏幕上。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/zyak9.png\" alt=\"\"></p>\n<h2 id=\"高速缓存\"><a href=\"#高速缓存\" class=\"headerlink\" title=\"高速缓存\"></a>高速缓存</h2><p>​    从上面的例子，我们可以总结出，hello程序经历了从开始在磁盘上，加载时被复制到主存，处理器运行时又从主存复制到处理器，最后又从处理器复制到显示器。</p>\n<p>​    这里从我们程序员角度讲，这些复制就是开销，那么问题来了，如何减小开销提高处理器效率呢？？？</p>\n<p>从机械原理角度来看，存储设备越大运行越慢；处理器读磁盘比读内存开销大1000万倍，而寄存器文件的读取速度又比内存块几乎100倍，加快处理器的运行速度比加快主存运行速度要容器的多。</p>\n<p>​    针对处理器与主存之间的差异，系统设计采用了更小更快的存储设备，称之为高速缓存，存放处理器近期可能会需要的信息。这个其实和我们平时开发程序是一样的，采用多级缓存，存放热点数据，提高系统处理能力。 这里的原理是利用程序具有访问局部区域里的数据和代码的趋势，所以高速缓存中存放了可能经常访问的数据，这样大部分操作就能在告诉缓存中完成。</p>\n<p>请看下面的存储器层次的结构，相信你会一目了然：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/zwczg.png\" alt=\"\"></p>\n<p>如图所示，上一层存储器是下一层的高速缓存。</p>\n<h2 id=\"操作系统管理硬件\"><a href=\"#操作系统管理硬件\" class=\"headerlink\" title=\"操作系统管理硬件\"></a>操作系统管理硬件</h2><p>我们写的程序，没有直接访问键盘、显示器、磁盘等硬件，而是依赖操作系统提供的服务，所以可以把操作系统看成是应用程序和硬件之间一层软件。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/84g1c.png\" alt=\"\"></p>\n<p>操作系统有两大功能：</p>\n<ol>\n<li>防止硬件被滥用；</li>\n<li>对应用程序屏蔽底层复杂而通常又大不相同的硬件设备，提供简单一致的机制；</li>\n</ol>\n<p>操作系统通常抽象出几个概念：进程、虚拟内存、文件；</p>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p>进程是操作系统对一个正在运行的应用程序的抽象，一个系统可以同时运行多个进程。</p>\n<p>单核处理器一个时刻只能执行一个程序，而目前的多核处理器能同时执行多个程序。无论单核还是多核，一个CPU看上去都是在并发执行多个进程，这是通过处理器在进程间切换来实现的，这种切换被称为 <strong>上下文切换</strong>；</p>\n<p>进程之间的切换是由操作系统内核管理的，内核是操作系统常驻主存的部分。当应用程序需要操作系统的某些操作时，比如读写文件，它就执行一条系统调用指令，将控制权传递给内核。然后内核执行被请求的操作并返回应用程序。 注意，内核不是一个独立的进程，它是系统管理所有进程所用代码和数据结构的集合。</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><p>一个进程实际上是由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。</p>\n<p>优点：比进程之间更容易共享数据；一般来讲也比进程更高效；</p>\n<h3 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h3><p>这是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在单独使用主存，每个进程看到的内存都是一致的，称为虚拟地址空间，如下图所示，地址是从小往上增大的：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/d3sxd.png\" alt=\"\"></p>\n<h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>文件就是字节序列，所有的I/O设备，甚至网络都可以看成是文件；</p>\n<h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p>多核处理器是将多个CPU集成到一个集成电路芯片上。多核处理器组织架构如下：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/sx3es.png\" alt=\"\"></p>\n<p>超线程：称为同时多线程，允许一个CPU同时执行多个并发流的技术。Intel Core i7 处理器可以让每个核执行两个线程。</p>\n<h3 id=\"计算机系统中的抽象\"><a href=\"#计算机系统中的抽象\" class=\"headerlink\" title=\"计算机系统中的抽象\"></a>计算机系统中的抽象</h3><p>在处理里，指令集架构提供了对实际处理器硬件的抽象，使用这个抽象，机器代码表现的好像运行在一个一次只执行一条指令的处理器上。不管底层多复杂精细，哪怕可以并发的执行多条指令，担又总是与那个简单有序的模型保持一致。只要模型一样，不同的处理器实现也能执行同样的机器代码，而又提供不同的开销和性能。这种抽象思想简直太重要了，在整个计算机科学中也随处可见，比如java类的生命和C语言的函数原型，以及计算机网络的分层。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/i7aak.png\" alt=\"\"></p>\n<p>看了这上面的图可以总结为：</p>\n<ol>\n<li>文件是对I/O设置的抽象；</li>\n<li>虚拟内存是对主存和磁盘的抽象；</li>\n<li>进程是对处理器、主存和I/O设备的抽象；</li>\n</ol>\n<p>至此，本章的学习就结束了，主要对计算机系统的组成和程序运行有了大框架的认知，后续继续进行深入学习。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>本周开始了CSAPP的读书计划，规划已久，终于要开动了。之前自己也零散看过，不得不说这本书有难度都没坚持下去，这次跟着码农翻身小伙伴们一起打卡这本书。</p>\n</blockquote>\n<p>CSAPP这本书不用多说绝对经典中的经典，如果想成为一名知道计算机硬件和软件如何工作，了解其如何影响程序的正确性和性能的程序员，那么一定得看啊。</p>\n<blockquote>\n<p>如果能完全理解本书讲解的计算机系统以及它对应用程序的影响，那么恭喜你，你走上了一条为数不多的大牛道路。</p>\n</blockquote>\n<p>在开始之前,我们先看一个最常见的程序:</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\nint main()\n{\n    printf(&quot;hello,world\\n&quot;);\n    return 0;\n}</code></pre>\n<p>本文就从上面这个最简单的hello程序展开,沿着它的生命周期展开学习.</p>\n<h2 id=\"程序的保存格式\"><a href=\"#程序的保存格式\" class=\"headerlink\" title=\"程序的保存格式\"></a>程序的保存格式</h2><p>上面的hello程序其实就是一个由值 0 和 1 组成的位（即比特）序列，8个位成一组，称为字节。我们输入文本hello.c文件中的字符即用每个字节来表示（大部分计算机系统都是用ASCII标准来表示字符，即把字节转为整数值）。</p>\n<p><strong>总结： 信息=位+上下文</strong></p>\n<h2 id=\"程序是如何运行的\"><a href=\"#程序是如何运行的\" class=\"headerlink\" title=\"程序是如何运行的\"></a>程序是如何运行的</h2><p>hello程序的诞生使用C语言来编写的，好处是人可以读懂，但是为了在系统上运行，还是得转化为一系列低级的机器语言指令。</p>\n<p>在Unix系统上，从源文件到目标文件的转化得靠编译器， 下面记录编译过程：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/49y1m.png\" alt></p>\n<ol>\n<li>hello.c需要经过预处理器读取系统头文件内容并且插入到程序文本中得到一个新的C程序，一般以.i作为扩展名；</li>\n<li>然后编译器将文本文件hello.i 翻译成汇编语言文本文件hello.s</li>\n<li>接下来，就该汇编器登场，将汇编语言翻译成机器语言指令，并保存到hello.o文件中，此时它是一个二进制文件了</li>\n<li>最后链接阶段，将程序中调用的c标准库的函数合并到我们的hello.o程序中，结果就是一个可执行文件，可以被加载到内存中，由系统执行。</li>\n</ol>\n<h3 id=\"系统的硬件组成\"><a href=\"#系统的硬件组成\" class=\"headerlink\" title=\"系统的硬件组成\"></a>系统的硬件组成</h3><p>要真正了解程序时如何运行的，首先要对系统的硬件组成有一个了解：</p>\n<ol>\n<li><p>总线：贯穿整个系统的电子管道，可以理解为所有的数据设备以及系统之间的数据流转都要接到总线上。</p>\n</li>\n<li><p>I/O设备：系统与外部世界的联系通道；比如键盘、鼠标、磁盘、显示器等；</p>\n<p>所有的I/O设置都要通过一个控制器或者适配器与I/O总线相连；</p>\n</li>\n<li><p>主存：也就是我们常说的内存，这是一个临时存储设备，在处理器执行程序时，用来存放程序和处理的数据；</p>\n</li>\n<li><p>处理器：也就是我们常说的CPU，是解释存储在主存中指令的引擎；其核心是一个大小为一个字（定长的字节，根据系统不同确定）的寄存器，称为程序计数器（PC）。在程序运行的过程中，PC都是指向主存中的一条机器语言指令。</p>\n<p>从系统通电开始，直到系统断电，处理器一直在不断的执行PC指向的指令，在更新PC，使其指向下一条指令；</p>\n<p>下面列举几个CPU在指令要求下可能执行的操作：</p>\n<ul>\n<li>加载：从主存复制一个字到寄存器，已覆盖原有寄存器的内容；</li>\n<li>存储：从寄存器复制一个字到主存的某个位置，以覆盖这个位置的原有值；</li>\n<li>操作：把两个寄存器的内容复制到ALU（算数/逻辑单元）,ALU对这两个字做算数运算，并将结果存放到一个寄存器中覆盖原有的内容；</li>\n<li>跳转：从指令本身抽取一个字，并将这个字复制到PC中，以覆盖PC中原来的值；</li>\n</ul>\n<blockquote>\n<p>处理器看上去是它的指令集架构的简单实现，但是现代处理器采用非常复杂的机制来加速程序的运行。因此我们在理解的时候要将处理器的<strong>指令集架构</strong> 和处理器的 <strong>微体系结构</strong>分来：指令集架构描述的是每条机器代码指令的效果；微体系结构描述的是处理器的实现；</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h3><p>当我们在执行 <code>./hello</code> 后，其实发生的过程是：</p>\n<p>刚开始，shell程序执行它的指令，等待我们输入一个命令，当我们输入<code>./hello</code> 后，shell程序将字符读入寄存器，在把它存放到内存中；</p>\n<p>当你在敲回车时，shell程序就知道我们已经结束了命令的输入，然后shell执行一系列指令来加载可执行文件，将目前文件的代码和数据复制到主存。<strong>注：利用直接存储器（DMA）技术，数据可以不到处理器直接从磁盘到主存。</strong></p>\n<p>一旦加载到内存中，处理器就开始执行程序的main机器指令，这些指令将“hello,world\\n” 字符串中字节从主存复制到寄存器文件。再从寄存器文件复制到显示设备，最终展示在屏幕上。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/zyak9.png\" alt></p>\n<h2 id=\"高速缓存\"><a href=\"#高速缓存\" class=\"headerlink\" title=\"高速缓存\"></a>高速缓存</h2><p>​    从上面的例子，我们可以总结出，hello程序经历了从开始在磁盘上，加载时被复制到主存，处理器运行时又从主存复制到处理器，最后又从处理器复制到显示器。</p>\n<p>​    这里从我们程序员角度讲，这些复制就是开销，那么问题来了，如何减小开销提高处理器效率呢？？？</p>\n<p>从机械原理角度来看，存储设备越大运行越慢；处理器读磁盘比读内存开销大1000万倍，而寄存器文件的读取速度又比内存块几乎100倍，加快处理器的运行速度比加快主存运行速度要容器的多。</p>\n<p>​    针对处理器与主存之间的差异，系统设计采用了更小更快的存储设备，称之为高速缓存，存放处理器近期可能会需要的信息。这个其实和我们平时开发程序是一样的，采用多级缓存，存放热点数据，提高系统处理能力。 这里的原理是利用程序具有访问局部区域里的数据和代码的趋势，所以高速缓存中存放了可能经常访问的数据，这样大部分操作就能在告诉缓存中完成。</p>\n<p>请看下面的存储器层次的结构，相信你会一目了然：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/zwczg.png\" alt></p>\n<p>如图所示，上一层存储器是下一层的高速缓存。</p>\n<h2 id=\"操作系统管理硬件\"><a href=\"#操作系统管理硬件\" class=\"headerlink\" title=\"操作系统管理硬件\"></a>操作系统管理硬件</h2><p>我们写的程序，没有直接访问键盘、显示器、磁盘等硬件，而是依赖操作系统提供的服务，所以可以把操作系统看成是应用程序和硬件之间一层软件。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/84g1c.png\" alt></p>\n<p>操作系统有两大功能：</p>\n<ol>\n<li>防止硬件被滥用；</li>\n<li>对应用程序屏蔽底层复杂而通常又大不相同的硬件设备，提供简单一致的机制；</li>\n</ol>\n<p>操作系统通常抽象出几个概念：进程、虚拟内存、文件；</p>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p>进程是操作系统对一个正在运行的应用程序的抽象，一个系统可以同时运行多个进程。</p>\n<p>单核处理器一个时刻只能执行一个程序，而目前的多核处理器能同时执行多个程序。无论单核还是多核，一个CPU看上去都是在并发执行多个进程，这是通过处理器在进程间切换来实现的，这种切换被称为 <strong>上下文切换</strong>；</p>\n<p>进程之间的切换是由操作系统内核管理的，内核是操作系统常驻主存的部分。当应用程序需要操作系统的某些操作时，比如读写文件，它就执行一条系统调用指令，将控制权传递给内核。然后内核执行被请求的操作并返回应用程序。 注意，内核不是一个独立的进程，它是系统管理所有进程所用代码和数据结构的集合。</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><p>一个进程实际上是由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。</p>\n<p>优点：比进程之间更容易共享数据；一般来讲也比进程更高效；</p>\n<h3 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h3><p>这是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在单独使用主存，每个进程看到的内存都是一致的，称为虚拟地址空间，如下图所示，地址是从小往上增大的：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/d3sxd.png\" alt></p>\n<h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>文件就是字节序列，所有的I/O设备，甚至网络都可以看成是文件；</p>\n<h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p>多核处理器是将多个CPU集成到一个集成电路芯片上。多核处理器组织架构如下：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/sx3es.png\" alt></p>\n<p>超线程：称为同时多线程，允许一个CPU同时执行多个并发流的技术。Intel Core i7 处理器可以让每个核执行两个线程。</p>\n<h3 id=\"计算机系统中的抽象\"><a href=\"#计算机系统中的抽象\" class=\"headerlink\" title=\"计算机系统中的抽象\"></a>计算机系统中的抽象</h3><p>在处理里，指令集架构提供了对实际处理器硬件的抽象，使用这个抽象，机器代码表现的好像运行在一个一次只执行一条指令的处理器上。不管底层多复杂精细，哪怕可以并发的执行多条指令，担又总是与那个简单有序的模型保持一致。只要模型一样，不同的处理器实现也能执行同样的机器代码，而又提供不同的开销和性能。这种抽象思想简直太重要了，在整个计算机科学中也随处可见，比如java类的生命和C语言的函数原型，以及计算机网络的分层。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/i7aak.png\" alt></p>\n<p>看了这上面的图可以总结为：</p>\n<ol>\n<li>文件是对I/O设置的抽象；</li>\n<li>虚拟内存是对主存和磁盘的抽象；</li>\n<li>进程是对处理器、主存和I/O设备的抽象；</li>\n</ol>\n<p>至此，本章的学习就结束了，主要对计算机系统的组成和程序运行有了大框架的认知，后续继续进行深入学习。</p>\n"},{"title":"CSAPP-2-信息的表示和处理","date":"2019-09-14T07:42:15.000Z","mathjax":true,"author":"coderluo","_content":"\n\n\n> 如果能完全理解计算机系统以及它对应用程序的影响，那么恭喜你，你走上了一条为数不多的大牛道路。\n\n\n\n本文是深入理解计算机系统的第二篇文章，接着上一篇我们讲解的计算机系统开篇-[《计算机系统漫游》](http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483654&idx=1&sn=25c528de5f245a65a27aa0b261382ca7&chksm=9f999c2ba8ee153d79beb9db613c2f13594966c713ec889c1ade9463baf663b0e7fbb40e921a&token=1690272020&lang=zh_CN#rd)，本篇文章继续深入，一起来学习 **信息的表示和处理**。\n\n本篇文章一共分为四部分，**信息存储**、**整数的表示**，**整数的运算** 和 **浮点数**。\n\n\n\n## 1. 信息存储\n\n\n\n程序将内存视为一个非常大的字节数组，称为**虚拟内存**。内存中的每一个字节都由一个唯一的数字来标识，称为它的**地址**，地址的集合就称为**虚拟地址空间**。\n\n> 每台计算都有一个字长，虚拟地址空间是以字来编码的，所以字长决定了虚拟地址空间的大小。对于一个字长为 w 位的机器而言，虚拟地址的范围为 0~$2^w$ -1 ,程序最多访问$2^w$ 个字节。\n\n### 1.1 寻址和字节顺序\n\n对于我们日常程序中的对象，它们在内存中往往是多字节的，那么我们必须知道两个规则：**这个对象的地址是什么？**以及**内存中如何排列这些字节？**\n\n在几乎所有的机器上，字节都是被连续存储的，对象的地址为所使用字节中最小的地址。例如，一个int类型的变量x的地址为0x100，也就是地址表达式&x 的值为0x100，x的四个字节存储在内存0x100、0x101、0x102、0x103位置。\n\n\n\n排列表示一个对象的字节，有两个通用的规则：\n\n- 大端法：最高有效字节在最前面\n- 小端法：最低有效字节在最前面\n\n![](http://media.coderluo.top/计算机系统漫游/3dp1r.png)\n\n\n\n对于我们程序员来说，机器使用的字节顺序对我们是不可见的，无论哪种字节顺序的机器，我们的程序编译后得到的结果都是一样的，不过有时候字节顺序也会成为问题，这里不再详述什么情况下会产生问题，只作学习验证机器的字节顺序不同产生的不同结果。\n\n\n\n```c\n# include <stdio.h>\n\ntypedef unsigned char *byte_pointer;\n\nvoid show_bytes(byte_pointer start, size_t len)\n{\n\tsize_t i;\n\tfor(i =0; i < len;i++)\n\t\tprintf(\"%.2x\",start[i]);\n\tprintf(\"\\n\");\n}\n\nvoid show_int(int x) {\n\tshow_bytes((byte_pointer) &x,sizeof(int));\n}\n\nvoid show_float(float x) {\n\tshow_bytes((byte_pointer) &x,sizeof(float));\n}\n\nvoid show_pointer(void *x) {\n\tshow_bytes((byte_pointer) &x,sizeof(void *));\n}\n\nvoid test_show_bytes(int val) {\n\tint ival = val;\n\tfloat fval = (float) ival;\n\tint *pval = &ival;\n\tshow_int(ival);\n\tshow_float(fval);\n\tshow_pointer(pval);\n}\n\nint main() {\n\ttest_show_bytes(12345);\n\treturn 1;\n}\n\n```\n\n\n\n运行上面的c语言程序，得到的结果如下：\n\n39300000\n00e44046\na8e7a4c2ff7f0000\n\n参数12345的十六进制表示为0x00000393,结合上面的结果 39300000 说明我的linux64是一个小端法机器。下面在放一张在各个机器测试的不同结果，更加全面的对比图：\n\n![](http://media.coderluo.top/计算机系统漫游/2gzok.png)\n\n\n\n上图指针值完全不相同的原因是不同的操作系统使用不同的存储分配规则，不过需要注意的是Linux64使用的是8字节地址。\n\n\n\n\n### 1.2 表示字符串\n\n\n\nC语言的字符串：一个以null(值为0)字符结尾的字符数组 如字符串\"12345\"编码为 61 62 63 64 65 使用ASCII编码。 linux系统可以使用 man ascii 命令查看ASCII编码表。\n\n\n\n### 1.3 布尔代数简介\n\n二进制是计算机编码、存储和操作信息的核心。 将逻辑值 TRUE 和 FALSE 编码为1和0，能够设计一种代数，用来研究逻辑推理的基本原则。\n\n布尔运算：\n\n![](http://media.coderluo.top/计算机系统漫游/o8eeg.png)\n\n\n\n### 1.4 C语言中的位级运算\n\n\n\n> 事实上，我们平时代码中写的 | 就是OR(或)，& 就是AND(与)，~ 就是NOT（取反），^就是异或，本质上都是按位进行运算的。\n\n以下是一些对char数据类型表达式求值的例子：\n\n![](http://media.coderluo.top/计算机系统漫游/5z9tg.png)\n\n正如示例说明的那样，确定一个位级表达式的结果最好的方法，就是将十六进制的参数扩展成二进制表示并执行二进制运算，然后再转换回十六进制。\n\n### \t1.5 C语言中的移位运算\t\n\n\n\n![](http://media.coderluo.top/计算机系统漫游/yc32u.png)\n\n移位运算右移分为：逻辑右移和算术右移。\n\n- 逻辑右移：在左端补0；\n- 算术右移：如果操作数的最高位是1则左端补1，如果为0则补0；\n\nC语言中，几乎所有的编译器都对有符号数使用算术右移，无符号数使用逻辑右移。\n\nJava中有明确定义，x>>k 表示算术右移k个位置，而x>>>k 会对x做逻辑右移。\n\n这里说明一个移位运算有关的操作符优先级问题：\n\n表达式 1<<2+3<<4 ，本意是（1<<2）+(3<<4),你可能也会犯这样的错误，其实前面的表达式等价于：1<<(2+3)<<4,因为**加法（减法）的优先级比移位运算要高**。\n\n## 2. 整数表示\n\n下面的数据术语用来精确定义和描述计算机如何编码和操作整数。\n\n![](http://media.coderluo.top/计算机系统漫游/5y3sx.png)\n\n\n\n### 2.1 无符号数的编码\n\n假设一个整数有w位，每个位的取值即0非1。\n\n**原理：无符号数编码的定义**\n\n对向量 \n$$\n\\vec{x}=\\left[\\begin{array}{cccc}{x_{w-1},} & {x_{w-2}} & {,} & {\\cdots, \\quad x_{0}}\\end{array}\\right]\n$$\n用一个函数来表示：\n$$\nB 2 U_{w}(\\vec{x}) \\doteq \\sum_{i=0}^{w-1} x_{i} 2^{i}\n$$\n计算规则：\n$$\n\\begin{array}{l}{B 2 U_{4}([0001])=0 \\cdot 2^{3}+0 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+0+0+1=1} \\\\ {B 2 U_{4}([0101])=0 \\cdot 2^{3}+1 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+4+0+1=5} \\\\ {B 2 U_{4}([1011])=1 \\cdot 2^{3}+0 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=8+0+2+1=11} \\\\ {B 2 U_{4}([1111])=1 \\cdot 2^{3}+1 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=8+4+2+1=15}\\end{array}\n$$\n\n\n\n### 2.2 补码编码\n\n\n\n上面介绍的是无符号编码的表示形式，但是我们应用中，还是希望表示负数值。最常见的有符号数计算机表示方式就是补码。\n\n\n\n**原理：补码编码的定义**\n\n对向量：\n$$\n\\begin{aligned} \\vec{x}=\\left[x_{w-1}, x_{w-2},\\right.&\\left.\\cdots, x_{0}\\right] \\\\ & B 2 T_{w}(\\vec{x}) \\doteq-x_{u-1} 2^{w-1}+\\sum_{i=0}^{w-2} x_{i} 2^{i} \\end{aligned}\n$$\n\n\n最高有效位即 $x_{w-1}$ 也称为符号位。符号位等于1时，表示值为负，等于0时，值为非负，下面来看实际的计算示例：\n\n$$\\begin{array}{l}{B 2 T_{4}([0001])=-0 \\cdot 2^{3}+0 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+0+0+1=1} \\\\ {B 2 T_{4}([0101])=-0 \\cdot 2^{3}+1 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+4+0+1=5} \\\\ {B 2 T_{4}([1011])=-1 \\cdot 2^{3}+0 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=-8+0+2+1=-5} \\\\ {B 2 T_{4}([1111])=-1 \\cdot 2^{3}+1 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=-8+4+2+1=-1}\\end{array}$$\n\n这里让我们一起来考虑下补码所能表示的值的范围，最小值为：$T M i n_{w} \\doteq-2^{w-1}$.\n\n最大值为：$T M a x_{w} \\doteq \\sum_{i=0}^{w-2} 2^{i}=2^{w-1}-1$\n\n例如以长度为4为例，$T M i n_{4}=B 2 T_{4}([1000])=-2^{3}=-8$, 而 $T M a x_{4}=B 2 T_{4}([0111])=2^{2}+2^{1}+2^{0}=4+2+1=7$\n\n补码编码也是取值范围内每个数字都有唯一的w位补码编码。\n\n\n\n### 2.3 有符号数和无符号数之间的转换\n\n\n\n**原理：补码转换为无符号数**\n\n对满足$T M i n_{w} \\leqslant x \\leqslant T M a x_{w}$ 的 x 有：\n$$\nT 2 U_{w}(x)=\\left\\{\\begin{array}{ll}{x+2^{w},} & {x<0} \\\\ {x,} & {x \\geqslant 0}\\end{array}\\right.\n$$\n\n\n比如，$T 2 U_{16}(-12345)=-12345+2^{16}=53191$ ,同时 $T 2 U_{w}(-1)=-1+2^{w}=U M a x_{w}$。\n\n\n\n**原理：无符号数转换为补码**\n\n对满足 $0 \\leqslant u \\leqslant U M a x_{w}$ 的 u 有：\n$$\nU 2 T_{w}(u)=\\left\\{\\begin{array}{ll}{u,} & {u \\leqslant T \\operatorname{Max}_{w}} \\\\ {u-2^{w},} & {u>\\operatorname{TMax}_{w}}\\end{array}\\right.\n$$\n\n\n\n## 3. 整数运算\n\n\n\n在我们刚刚学习计算机时，大家有没有经历过，两个正数相加会得出一个负数，而比较表达式 x<y 和 x-y<0 会产生不同的结果呢？带着这些问题一起往下看吧。\n\n### 3.1 无符号加法\n\n\n\n**原理：无符号加法，对满足** $0 \\leqslant x, \\quad y<2^{w}$  的 x 和 y有：\n$$\nx+_{w}^{u} y=\\left\\{\\begin{array}{ll}{x+y,} & {x+y<2^{w}} \\\\ {x+y-2^{w},} & {2^{w} \\leqslant  x+y<2^{w+1}}\\end{array}\\right.\n$$\n\n\n比如：x=9，y=12 的位表示分别为[1001] 和 [1100]。它们的和是21，表示为5位的[10101]，产生溢出，丢弃最高位。 \n\n\n\n**原理： 检测无符号数加法中的溢出**\n\n对在范围 $0 \\leqslant x, \\quad y \\leqslant U M a x_{w}$,s=x+y，若s < x 或者等价的 s < y时，发生了溢出。\n\n\n\n**原理： 无符号数求反**\n\n对满足 $0 \\leqslant x<2^{w}$ ,的任意x，其w位的无符号逆元 $-_{w}^{u} x$ 表达式如下：\n\n$-_{w}^{u} x=\\left\\{\\begin{array}{ll}{x,} & {x=0} \\\\ {2^{w}-x,} & {x>0}\\end{array}\\right.$\n\n\n\n### 3.2 补码加法\n\n\n\n**原理： 补码加法**\n\n对满足$0 \\leqslant x, \\quad y \\leqslant U M a x_{w}$ 的整数x，y，有：\n\n\n$$\nx+_{w}^{t} y=\\left\\{\\begin{array}{ll}{x+y-2^{w},} & {2^{w-1} \\leqslant x+y}  \\\\ {x+y,} & {-2^{w-1} \\leqslant x+y<2^{w-1} \\quad \\begin{array}{l}\\\\ \\end{array}} \\\\ {x+y+2^{w},} & {x+y<-2^{w-1}} \\end{array}\\right.\n$$\n\n**原理： 检测补码加法中的溢出**\n\n对满足 $T M i n_{w} \\leqslant x, \\quad y \\leqslant T M a x_{w}$ 的x 和 y，令 s = x + y。当且仅当x>0,y>0，但s<=0时，计算s发生了正溢出。当且仅当 x<0,y<0，但s>=0时，计算发生了负溢出。\n\n\n\n\n### 3.3 乘法和除法\n\n\n\n在大多数机器上，整数乘法指令相当慢，需要10个或者更多的时钟周期，然而**加法、减法、位运算、移位操作只需要一个时钟周期**。\n\n因此，编译器使用了移位和加法运算的组合代替乘以常数因子的乘法。\n\n**原理： 乘以2的幂**\n\n例如：x*14，利用14 = $14=2^{3}+2^{2}+2^{1}$ ,编译器会将乘法重写为 $(x<<3)+(x<2)+(x<<1)$ ,将乘法替换为三个移位和一个加法。\n\n\n\n在大多数机器上，整数除法比乘法更慢，需要30个左右的时钟周期。\n\n所以除法，也可以采用移位运算，相对于乘法这里采用的是右移，而不是左移。\n\n\n\n## 4. 浮点数\n\n\n\n> 固定范围的数字，小数点前代表大小范围，小数点后代表精度，浮动小数点即平衡范围和精度，所以叫浮点数\n\n\n\n### 4.1 二进制小数\n\n\n\n十进制数转换描述定义：\n$$\nd=\\sum_{i=-n}^{m} 10^{i} \\times d_{i}\n$$\n\n\n例如：12.34 = $1 \\times 10^{1}+2 \\times 10^{0}+3 \\times 10^{-1}+4 \\times 10^{-2}=12 \\frac{34}{100}$\n\n\n\n二进制数转换描述定义：\n$$\nb=\\sum_{i=-n}^{m} 2^{i} \\times b_{i}\n$$\n\n\n例如，$101.11_{2}= 1 \\times 2^{2}+0 \\times 2^{1}+1 \\times 2^{0}+1 \\times 2^{-1}+1 \\times 2^{-2}=4+0+1+\\frac{1}{2}+\\frac{1}{4}=5 \\frac{3}{4} $\n\n增加二进制表示的长度可以提高表示的精度：\n\n![](http://media.coderluo.top/计算机系统漫游/4aene.png)\n\n\n\n### 4.2 IEEE浮点表示\n\nIEEE浮点标准用 $V=(-1)^{s} \\times M \\times 2^{E}$ 的形式来表示一个数：\n\n- 符号（sign）s决定这数是负数（s=1）还是正数（s=0）。\n- 尾数（signnificand） M是一个二进制小数，它的范围是 $1 \\sim 2-\\varepsilon$。\n- 阶码（exponent） E的作用是对浮点数加权，权重是2的E次幂。\n- 一个单独的符号位s\n- k位的阶码字段 编码阶码E\n- n位小数字段 编码尾数M\n\n\n\n如下图：\n\n在单精度格式（float），s，exp 和 frac 字段分别为 s=1，k=8, n = 23,得到一个32位的表示。\n\n在双精度浮点格式（double）中，s=1、k=11、n=52位，得到一个64位的表示。\n\n\n\n![](http://media.coderluo.top/计算机系统漫游/vw19h.png)\n\n\n\n### 4.3 C语言中的浮点数\n\n\n\n- 从int转换成float，数字不会溢出，但可能会被舍入；\n- 从int或float转成double，因为double范围更大，精度更高，所以能够精确的保留数值；\n- 从double转成float，因为范围要小，所以值可能溢出成正无穷或者负无穷，另外由于精度较小，可能舍入。\n- 从float或者double转成int，值将会向零舍入，例如1.999转换成1，-1.999转成-1。进一步来说，值可能会溢出。\n\n\n\n## 5. 总结\n\n\n\n- 计算机将信息编码为位（比特），通常组成成字节序列。\n- 大多数机器对整数使用补码编码，而对浮点数使用IEEE标准754编码。在位级上理解这些编码有助于写出全部数值范围上正确运算的程序。\n- 由于编码长度有限，计算机运算会产生溢出。\n- 使用浮点运算要小心，因为只有有限的范围和精度。\n\n\n\n> 本文涉及的数学知识较多，看着比较枯燥。如果是计算机专业的同学，应该会有些熟悉。 不过我们如果要做一名高级程序员，计算机底层是绕不过去的，所以还是撸起袖子，加油干吧！\n\n\n\n\n\n## 推荐阅读\n\n- [计算机系统漫游](<http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483654&idx=1&sn=25c528de5f245a65a27aa0b261382ca7&chksm=9f999c2ba8ee153d79beb9db613c2f13594966c713ec889c1ade9463baf663b0e7fbb40e921a&scene=21#wechat_redirect>)\n\n\n\n\n\n\n\n\n\n\n\n\n\n​\t\t","source":"_posts/csapp/CSAPP-2-信息的表示和处理.md","raw":"---\ntitle: CSAPP-2-信息的表示和处理\ntags:\n  - CSAPP\ndate: 2019-09-14 15:42:15\ncategories: 操作系统\nmathjax: true\nauthor: coderluo\n---\n\n\n\n> 如果能完全理解计算机系统以及它对应用程序的影响，那么恭喜你，你走上了一条为数不多的大牛道路。\n\n\n\n本文是深入理解计算机系统的第二篇文章，接着上一篇我们讲解的计算机系统开篇-[《计算机系统漫游》](http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483654&idx=1&sn=25c528de5f245a65a27aa0b261382ca7&chksm=9f999c2ba8ee153d79beb9db613c2f13594966c713ec889c1ade9463baf663b0e7fbb40e921a&token=1690272020&lang=zh_CN#rd)，本篇文章继续深入，一起来学习 **信息的表示和处理**。\n\n本篇文章一共分为四部分，**信息存储**、**整数的表示**，**整数的运算** 和 **浮点数**。\n\n\n\n## 1. 信息存储\n\n\n\n程序将内存视为一个非常大的字节数组，称为**虚拟内存**。内存中的每一个字节都由一个唯一的数字来标识，称为它的**地址**，地址的集合就称为**虚拟地址空间**。\n\n> 每台计算都有一个字长，虚拟地址空间是以字来编码的，所以字长决定了虚拟地址空间的大小。对于一个字长为 w 位的机器而言，虚拟地址的范围为 0~$2^w$ -1 ,程序最多访问$2^w$ 个字节。\n\n### 1.1 寻址和字节顺序\n\n对于我们日常程序中的对象，它们在内存中往往是多字节的，那么我们必须知道两个规则：**这个对象的地址是什么？**以及**内存中如何排列这些字节？**\n\n在几乎所有的机器上，字节都是被连续存储的，对象的地址为所使用字节中最小的地址。例如，一个int类型的变量x的地址为0x100，也就是地址表达式&x 的值为0x100，x的四个字节存储在内存0x100、0x101、0x102、0x103位置。\n\n\n\n排列表示一个对象的字节，有两个通用的规则：\n\n- 大端法：最高有效字节在最前面\n- 小端法：最低有效字节在最前面\n\n![](http://media.coderluo.top/计算机系统漫游/3dp1r.png)\n\n\n\n对于我们程序员来说，机器使用的字节顺序对我们是不可见的，无论哪种字节顺序的机器，我们的程序编译后得到的结果都是一样的，不过有时候字节顺序也会成为问题，这里不再详述什么情况下会产生问题，只作学习验证机器的字节顺序不同产生的不同结果。\n\n\n\n```c\n# include <stdio.h>\n\ntypedef unsigned char *byte_pointer;\n\nvoid show_bytes(byte_pointer start, size_t len)\n{\n\tsize_t i;\n\tfor(i =0; i < len;i++)\n\t\tprintf(\"%.2x\",start[i]);\n\tprintf(\"\\n\");\n}\n\nvoid show_int(int x) {\n\tshow_bytes((byte_pointer) &x,sizeof(int));\n}\n\nvoid show_float(float x) {\n\tshow_bytes((byte_pointer) &x,sizeof(float));\n}\n\nvoid show_pointer(void *x) {\n\tshow_bytes((byte_pointer) &x,sizeof(void *));\n}\n\nvoid test_show_bytes(int val) {\n\tint ival = val;\n\tfloat fval = (float) ival;\n\tint *pval = &ival;\n\tshow_int(ival);\n\tshow_float(fval);\n\tshow_pointer(pval);\n}\n\nint main() {\n\ttest_show_bytes(12345);\n\treturn 1;\n}\n\n```\n\n\n\n运行上面的c语言程序，得到的结果如下：\n\n39300000\n00e44046\na8e7a4c2ff7f0000\n\n参数12345的十六进制表示为0x00000393,结合上面的结果 39300000 说明我的linux64是一个小端法机器。下面在放一张在各个机器测试的不同结果，更加全面的对比图：\n\n![](http://media.coderluo.top/计算机系统漫游/2gzok.png)\n\n\n\n上图指针值完全不相同的原因是不同的操作系统使用不同的存储分配规则，不过需要注意的是Linux64使用的是8字节地址。\n\n\n\n\n### 1.2 表示字符串\n\n\n\nC语言的字符串：一个以null(值为0)字符结尾的字符数组 如字符串\"12345\"编码为 61 62 63 64 65 使用ASCII编码。 linux系统可以使用 man ascii 命令查看ASCII编码表。\n\n\n\n### 1.3 布尔代数简介\n\n二进制是计算机编码、存储和操作信息的核心。 将逻辑值 TRUE 和 FALSE 编码为1和0，能够设计一种代数，用来研究逻辑推理的基本原则。\n\n布尔运算：\n\n![](http://media.coderluo.top/计算机系统漫游/o8eeg.png)\n\n\n\n### 1.4 C语言中的位级运算\n\n\n\n> 事实上，我们平时代码中写的 | 就是OR(或)，& 就是AND(与)，~ 就是NOT（取反），^就是异或，本质上都是按位进行运算的。\n\n以下是一些对char数据类型表达式求值的例子：\n\n![](http://media.coderluo.top/计算机系统漫游/5z9tg.png)\n\n正如示例说明的那样，确定一个位级表达式的结果最好的方法，就是将十六进制的参数扩展成二进制表示并执行二进制运算，然后再转换回十六进制。\n\n### \t1.5 C语言中的移位运算\t\n\n\n\n![](http://media.coderluo.top/计算机系统漫游/yc32u.png)\n\n移位运算右移分为：逻辑右移和算术右移。\n\n- 逻辑右移：在左端补0；\n- 算术右移：如果操作数的最高位是1则左端补1，如果为0则补0；\n\nC语言中，几乎所有的编译器都对有符号数使用算术右移，无符号数使用逻辑右移。\n\nJava中有明确定义，x>>k 表示算术右移k个位置，而x>>>k 会对x做逻辑右移。\n\n这里说明一个移位运算有关的操作符优先级问题：\n\n表达式 1<<2+3<<4 ，本意是（1<<2）+(3<<4),你可能也会犯这样的错误，其实前面的表达式等价于：1<<(2+3)<<4,因为**加法（减法）的优先级比移位运算要高**。\n\n## 2. 整数表示\n\n下面的数据术语用来精确定义和描述计算机如何编码和操作整数。\n\n![](http://media.coderluo.top/计算机系统漫游/5y3sx.png)\n\n\n\n### 2.1 无符号数的编码\n\n假设一个整数有w位，每个位的取值即0非1。\n\n**原理：无符号数编码的定义**\n\n对向量 \n$$\n\\vec{x}=\\left[\\begin{array}{cccc}{x_{w-1},} & {x_{w-2}} & {,} & {\\cdots, \\quad x_{0}}\\end{array}\\right]\n$$\n用一个函数来表示：\n$$\nB 2 U_{w}(\\vec{x}) \\doteq \\sum_{i=0}^{w-1} x_{i} 2^{i}\n$$\n计算规则：\n$$\n\\begin{array}{l}{B 2 U_{4}([0001])=0 \\cdot 2^{3}+0 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+0+0+1=1} \\\\ {B 2 U_{4}([0101])=0 \\cdot 2^{3}+1 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+4+0+1=5} \\\\ {B 2 U_{4}([1011])=1 \\cdot 2^{3}+0 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=8+0+2+1=11} \\\\ {B 2 U_{4}([1111])=1 \\cdot 2^{3}+1 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=8+4+2+1=15}\\end{array}\n$$\n\n\n\n### 2.2 补码编码\n\n\n\n上面介绍的是无符号编码的表示形式，但是我们应用中，还是希望表示负数值。最常见的有符号数计算机表示方式就是补码。\n\n\n\n**原理：补码编码的定义**\n\n对向量：\n$$\n\\begin{aligned} \\vec{x}=\\left[x_{w-1}, x_{w-2},\\right.&\\left.\\cdots, x_{0}\\right] \\\\ & B 2 T_{w}(\\vec{x}) \\doteq-x_{u-1} 2^{w-1}+\\sum_{i=0}^{w-2} x_{i} 2^{i} \\end{aligned}\n$$\n\n\n最高有效位即 $x_{w-1}$ 也称为符号位。符号位等于1时，表示值为负，等于0时，值为非负，下面来看实际的计算示例：\n\n$$\\begin{array}{l}{B 2 T_{4}([0001])=-0 \\cdot 2^{3}+0 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+0+0+1=1} \\\\ {B 2 T_{4}([0101])=-0 \\cdot 2^{3}+1 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+4+0+1=5} \\\\ {B 2 T_{4}([1011])=-1 \\cdot 2^{3}+0 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=-8+0+2+1=-5} \\\\ {B 2 T_{4}([1111])=-1 \\cdot 2^{3}+1 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=-8+4+2+1=-1}\\end{array}$$\n\n这里让我们一起来考虑下补码所能表示的值的范围，最小值为：$T M i n_{w} \\doteq-2^{w-1}$.\n\n最大值为：$T M a x_{w} \\doteq \\sum_{i=0}^{w-2} 2^{i}=2^{w-1}-1$\n\n例如以长度为4为例，$T M i n_{4}=B 2 T_{4}([1000])=-2^{3}=-8$, 而 $T M a x_{4}=B 2 T_{4}([0111])=2^{2}+2^{1}+2^{0}=4+2+1=7$\n\n补码编码也是取值范围内每个数字都有唯一的w位补码编码。\n\n\n\n### 2.3 有符号数和无符号数之间的转换\n\n\n\n**原理：补码转换为无符号数**\n\n对满足$T M i n_{w} \\leqslant x \\leqslant T M a x_{w}$ 的 x 有：\n$$\nT 2 U_{w}(x)=\\left\\{\\begin{array}{ll}{x+2^{w},} & {x<0} \\\\ {x,} & {x \\geqslant 0}\\end{array}\\right.\n$$\n\n\n比如，$T 2 U_{16}(-12345)=-12345+2^{16}=53191$ ,同时 $T 2 U_{w}(-1)=-1+2^{w}=U M a x_{w}$。\n\n\n\n**原理：无符号数转换为补码**\n\n对满足 $0 \\leqslant u \\leqslant U M a x_{w}$ 的 u 有：\n$$\nU 2 T_{w}(u)=\\left\\{\\begin{array}{ll}{u,} & {u \\leqslant T \\operatorname{Max}_{w}} \\\\ {u-2^{w},} & {u>\\operatorname{TMax}_{w}}\\end{array}\\right.\n$$\n\n\n\n## 3. 整数运算\n\n\n\n在我们刚刚学习计算机时，大家有没有经历过，两个正数相加会得出一个负数，而比较表达式 x<y 和 x-y<0 会产生不同的结果呢？带着这些问题一起往下看吧。\n\n### 3.1 无符号加法\n\n\n\n**原理：无符号加法，对满足** $0 \\leqslant x, \\quad y<2^{w}$  的 x 和 y有：\n$$\nx+_{w}^{u} y=\\left\\{\\begin{array}{ll}{x+y,} & {x+y<2^{w}} \\\\ {x+y-2^{w},} & {2^{w} \\leqslant  x+y<2^{w+1}}\\end{array}\\right.\n$$\n\n\n比如：x=9，y=12 的位表示分别为[1001] 和 [1100]。它们的和是21，表示为5位的[10101]，产生溢出，丢弃最高位。 \n\n\n\n**原理： 检测无符号数加法中的溢出**\n\n对在范围 $0 \\leqslant x, \\quad y \\leqslant U M a x_{w}$,s=x+y，若s < x 或者等价的 s < y时，发生了溢出。\n\n\n\n**原理： 无符号数求反**\n\n对满足 $0 \\leqslant x<2^{w}$ ,的任意x，其w位的无符号逆元 $-_{w}^{u} x$ 表达式如下：\n\n$-_{w}^{u} x=\\left\\{\\begin{array}{ll}{x,} & {x=0} \\\\ {2^{w}-x,} & {x>0}\\end{array}\\right.$\n\n\n\n### 3.2 补码加法\n\n\n\n**原理： 补码加法**\n\n对满足$0 \\leqslant x, \\quad y \\leqslant U M a x_{w}$ 的整数x，y，有：\n\n\n$$\nx+_{w}^{t} y=\\left\\{\\begin{array}{ll}{x+y-2^{w},} & {2^{w-1} \\leqslant x+y}  \\\\ {x+y,} & {-2^{w-1} \\leqslant x+y<2^{w-1} \\quad \\begin{array}{l}\\\\ \\end{array}} \\\\ {x+y+2^{w},} & {x+y<-2^{w-1}} \\end{array}\\right.\n$$\n\n**原理： 检测补码加法中的溢出**\n\n对满足 $T M i n_{w} \\leqslant x, \\quad y \\leqslant T M a x_{w}$ 的x 和 y，令 s = x + y。当且仅当x>0,y>0，但s<=0时，计算s发生了正溢出。当且仅当 x<0,y<0，但s>=0时，计算发生了负溢出。\n\n\n\n\n### 3.3 乘法和除法\n\n\n\n在大多数机器上，整数乘法指令相当慢，需要10个或者更多的时钟周期，然而**加法、减法、位运算、移位操作只需要一个时钟周期**。\n\n因此，编译器使用了移位和加法运算的组合代替乘以常数因子的乘法。\n\n**原理： 乘以2的幂**\n\n例如：x*14，利用14 = $14=2^{3}+2^{2}+2^{1}$ ,编译器会将乘法重写为 $(x<<3)+(x<2)+(x<<1)$ ,将乘法替换为三个移位和一个加法。\n\n\n\n在大多数机器上，整数除法比乘法更慢，需要30个左右的时钟周期。\n\n所以除法，也可以采用移位运算，相对于乘法这里采用的是右移，而不是左移。\n\n\n\n## 4. 浮点数\n\n\n\n> 固定范围的数字，小数点前代表大小范围，小数点后代表精度，浮动小数点即平衡范围和精度，所以叫浮点数\n\n\n\n### 4.1 二进制小数\n\n\n\n十进制数转换描述定义：\n$$\nd=\\sum_{i=-n}^{m} 10^{i} \\times d_{i}\n$$\n\n\n例如：12.34 = $1 \\times 10^{1}+2 \\times 10^{0}+3 \\times 10^{-1}+4 \\times 10^{-2}=12 \\frac{34}{100}$\n\n\n\n二进制数转换描述定义：\n$$\nb=\\sum_{i=-n}^{m} 2^{i} \\times b_{i}\n$$\n\n\n例如，$101.11_{2}= 1 \\times 2^{2}+0 \\times 2^{1}+1 \\times 2^{0}+1 \\times 2^{-1}+1 \\times 2^{-2}=4+0+1+\\frac{1}{2}+\\frac{1}{4}=5 \\frac{3}{4} $\n\n增加二进制表示的长度可以提高表示的精度：\n\n![](http://media.coderluo.top/计算机系统漫游/4aene.png)\n\n\n\n### 4.2 IEEE浮点表示\n\nIEEE浮点标准用 $V=(-1)^{s} \\times M \\times 2^{E}$ 的形式来表示一个数：\n\n- 符号（sign）s决定这数是负数（s=1）还是正数（s=0）。\n- 尾数（signnificand） M是一个二进制小数，它的范围是 $1 \\sim 2-\\varepsilon$。\n- 阶码（exponent） E的作用是对浮点数加权，权重是2的E次幂。\n- 一个单独的符号位s\n- k位的阶码字段 编码阶码E\n- n位小数字段 编码尾数M\n\n\n\n如下图：\n\n在单精度格式（float），s，exp 和 frac 字段分别为 s=1，k=8, n = 23,得到一个32位的表示。\n\n在双精度浮点格式（double）中，s=1、k=11、n=52位，得到一个64位的表示。\n\n\n\n![](http://media.coderluo.top/计算机系统漫游/vw19h.png)\n\n\n\n### 4.3 C语言中的浮点数\n\n\n\n- 从int转换成float，数字不会溢出，但可能会被舍入；\n- 从int或float转成double，因为double范围更大，精度更高，所以能够精确的保留数值；\n- 从double转成float，因为范围要小，所以值可能溢出成正无穷或者负无穷，另外由于精度较小，可能舍入。\n- 从float或者double转成int，值将会向零舍入，例如1.999转换成1，-1.999转成-1。进一步来说，值可能会溢出。\n\n\n\n## 5. 总结\n\n\n\n- 计算机将信息编码为位（比特），通常组成成字节序列。\n- 大多数机器对整数使用补码编码，而对浮点数使用IEEE标准754编码。在位级上理解这些编码有助于写出全部数值范围上正确运算的程序。\n- 由于编码长度有限，计算机运算会产生溢出。\n- 使用浮点运算要小心，因为只有有限的范围和精度。\n\n\n\n> 本文涉及的数学知识较多，看着比较枯燥。如果是计算机专业的同学，应该会有些熟悉。 不过我们如果要做一名高级程序员，计算机底层是绕不过去的，所以还是撸起袖子，加油干吧！\n\n\n\n\n\n## 推荐阅读\n\n- [计算机系统漫游](<http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483654&idx=1&sn=25c528de5f245a65a27aa0b261382ca7&chksm=9f999c2ba8ee153d79beb9db613c2f13594966c713ec889c1ade9463baf663b0e7fbb40e921a&scene=21#wechat_redirect>)\n\n\n\n\n\n\n\n\n\n\n\n\n\n​\t\t","slug":"csapp/CSAPP-2-信息的表示和处理","published":1,"updated":"2019-09-28T15:36:47.075Z","_id":"ck13pfouq000acno6hczwoxmn","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>如果能完全理解计算机系统以及它对应用程序的影响，那么恭喜你，你走上了一条为数不多的大牛道路。</p>\n</blockquote>\n<p>本文是深入理解计算机系统的第二篇文章，接着上一篇我们讲解的计算机系统开篇-<a href=\"http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&amp;mid=2247483654&amp;idx=1&amp;sn=25c528de5f245a65a27aa0b261382ca7&amp;chksm=9f999c2ba8ee153d79beb9db613c2f13594966c713ec889c1ade9463baf663b0e7fbb40e921a&amp;token=1690272020&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">《计算机系统漫游》</a>，本篇文章继续深入，一起来学习 <strong>信息的表示和处理</strong>。</p>\n<p>本篇文章一共分为四部分，<strong>信息存储</strong>、<strong>整数的表示</strong>，<strong>整数的运算</strong> 和 <strong>浮点数</strong>。</p>\n<h2 id=\"1-信息存储\"><a href=\"#1-信息存储\" class=\"headerlink\" title=\"1. 信息存储\"></a>1. 信息存储</h2><p>程序将内存视为一个非常大的字节数组，称为<strong>虚拟内存</strong>。内存中的每一个字节都由一个唯一的数字来标识，称为它的<strong>地址</strong>，地址的集合就称为<strong>虚拟地址空间</strong>。</p>\n<blockquote>\n<p>每台计算都有一个字长，虚拟地址空间是以字来编码的，所以字长决定了虚拟地址空间的大小。对于一个字长为 w 位的机器而言，虚拟地址的范围为 0~$2^w$ -1 ,程序最多访问$2^w$ 个字节。</p>\n</blockquote>\n<h3 id=\"1-1-寻址和字节顺序\"><a href=\"#1-1-寻址和字节顺序\" class=\"headerlink\" title=\"1.1 寻址和字节顺序\"></a>1.1 寻址和字节顺序</h3><p>对于我们日常程序中的对象，它们在内存中往往是多字节的，那么我们必须知道两个规则：<strong>这个对象的地址是什么？</strong>以及<strong>内存中如何排列这些字节？</strong></p>\n<p>在几乎所有的机器上，字节都是被连续存储的，对象的地址为所使用字节中最小的地址。例如，一个int类型的变量x的地址为0x100，也就是地址表达式&amp;x 的值为0x100，x的四个字节存储在内存0x100、0x101、0x102、0x103位置。</p>\n<p>排列表示一个对象的字节，有两个通用的规则：</p>\n<ul>\n<li>大端法：最高有效字节在最前面</li>\n<li>小端法：最低有效字节在最前面</li>\n</ul>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/3dp1r.png\" alt=\"\"></p>\n<p>对于我们程序员来说，机器使用的字节顺序对我们是不可见的，无论哪种字节顺序的机器，我们的程序编译后得到的结果都是一样的，不过有时候字节顺序也会成为问题，这里不再详述什么情况下会产生问题，只作学习验证机器的字节顺序不同产生的不同结果。</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\"># <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>byte_pointer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span>byte_pointer start<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    size_t i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2x\"</span><span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_float</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test_show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> ival <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> fval <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> ival<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pval <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ival<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">show_int</span><span class=\"token punctuation\">(</span>ival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">show_float</span><span class=\"token punctuation\">(</span>fval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">show_pointer</span><span class=\"token punctuation\">(</span>pval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">test_show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行上面的c语言程序，得到的结果如下：</p>\n<p>39300000<br>00e44046<br>a8e7a4c2ff7f0000</p>\n<p>参数12345的十六进制表示为0x00000393,结合上面的结果 39300000 说明我的linux64是一个小端法机器。下面在放一张在各个机器测试的不同结果，更加全面的对比图：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/2gzok.png\" alt=\"\"></p>\n<p>上图指针值完全不相同的原因是不同的操作系统使用不同的存储分配规则，不过需要注意的是Linux64使用的是8字节地址。</p>\n<h3 id=\"1-2-表示字符串\"><a href=\"#1-2-表示字符串\" class=\"headerlink\" title=\"1.2 表示字符串\"></a>1.2 表示字符串</h3><p>C语言的字符串：一个以null(值为0)字符结尾的字符数组 如字符串”12345”编码为 61 62 63 64 65 使用ASCII编码。 linux系统可以使用 man ascii 命令查看ASCII编码表。</p>\n<h3 id=\"1-3-布尔代数简介\"><a href=\"#1-3-布尔代数简介\" class=\"headerlink\" title=\"1.3 布尔代数简介\"></a>1.3 布尔代数简介</h3><p>二进制是计算机编码、存储和操作信息的核心。 将逻辑值 TRUE 和 FALSE 编码为1和0，能够设计一种代数，用来研究逻辑推理的基本原则。</p>\n<p>布尔运算：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/o8eeg.png\" alt=\"\"></p>\n<h3 id=\"1-4-C语言中的位级运算\"><a href=\"#1-4-C语言中的位级运算\" class=\"headerlink\" title=\"1.4 C语言中的位级运算\"></a>1.4 C语言中的位级运算</h3><blockquote>\n<p>事实上，我们平时代码中写的 | 就是OR(或)，&amp; 就是AND(与)，~ 就是NOT（取反），^就是异或，本质上都是按位进行运算的。</p>\n</blockquote>\n<p>以下是一些对char数据类型表达式求值的例子：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/5z9tg.png\" alt=\"\"></p>\n<p>正如示例说明的那样，确定一个位级表达式的结果最好的方法，就是将十六进制的参数扩展成二进制表示并执行二进制运算，然后再转换回十六进制。</p>\n<h3 id=\"1-5-C语言中的移位运算\"><a href=\"#1-5-C语言中的移位运算\" class=\"headerlink\" title=\"1.5 C语言中的移位运算\"></a>1.5 C语言中的移位运算</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/yc32u.png\" alt=\"\"></p>\n<p>移位运算右移分为：逻辑右移和算术右移。</p>\n<ul>\n<li>逻辑右移：在左端补0；</li>\n<li>算术右移：如果操作数的最高位是1则左端补1，如果为0则补0；</li>\n</ul>\n<p>C语言中，几乎所有的编译器都对有符号数使用算术右移，无符号数使用逻辑右移。</p>\n<p>Java中有明确定义，x&gt;&gt;k 表示算术右移k个位置，而x&gt;&gt;&gt;k 会对x做逻辑右移。</p>\n<p>这里说明一个移位运算有关的操作符优先级问题：</p>\n<p>表达式 1&lt;&lt;2+3&lt;&lt;4 ，本意是（1&lt;&lt;2）+(3&lt;&lt;4),你可能也会犯这样的错误，其实前面的表达式等价于：1&lt;&lt;(2+3)&lt;&lt;4,因为<strong>加法（减法）的优先级比移位运算要高</strong>。</p>\n<h2 id=\"2-整数表示\"><a href=\"#2-整数表示\" class=\"headerlink\" title=\"2. 整数表示\"></a>2. 整数表示</h2><p>下面的数据术语用来精确定义和描述计算机如何编码和操作整数。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/5y3sx.png\" alt=\"\"></p>\n<h3 id=\"2-1-无符号数的编码\"><a href=\"#2-1-无符号数的编码\" class=\"headerlink\" title=\"2.1 无符号数的编码\"></a>2.1 无符号数的编码</h3><p>假设一个整数有w位，每个位的取值即0非1。</p>\n<p><strong>原理：无符号数编码的定义</strong></p>\n<p>对向量<br>$$<br>\\vec{x}=\\left[\\begin{array}{cccc}{x_{w-1},} &amp; {x_{w-2}} &amp; {,} &amp; {\\cdots, \\quad x_{0}}\\end{array}\\right]<br>$$<br>用一个函数来表示：<br>$$<br>B 2 U_{w}(\\vec{x}) \\doteq \\sum_{i=0}^{w-1} x_{i} 2^{i}<br>$$<br>计算规则：<br>$$<br>\\begin{array}{l}{B 2 U_{4}([0001])=0 \\cdot 2^{3}+0 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+0+0+1=1} \\ {B 2 U_{4}([0101])=0 \\cdot 2^{3}+1 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+4+0+1=5} \\ {B 2 U_{4}([1011])=1 \\cdot 2^{3}+0 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=8+0+2+1=11} \\ {B 2 U_{4}([1111])=1 \\cdot 2^{3}+1 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=8+4+2+1=15}\\end{array}<br>$$</p>\n<h3 id=\"2-2-补码编码\"><a href=\"#2-2-补码编码\" class=\"headerlink\" title=\"2.2 补码编码\"></a>2.2 补码编码</h3><p>上面介绍的是无符号编码的表示形式，但是我们应用中，还是希望表示负数值。最常见的有符号数计算机表示方式就是补码。</p>\n<p><strong>原理：补码编码的定义</strong></p>\n<p>对向量：<br>$$<br>\\begin{aligned} \\vec{x}=\\left[x_{w-1}, x_{w-2},\\right.&amp;\\left.\\cdots, x_{0}\\right] \\ &amp; B 2 T_{w}(\\vec{x}) \\doteq-x_{u-1} 2^{w-1}+\\sum_{i=0}^{w-2} x_{i} 2^{i} \\end{aligned}<br>$$</p>\n<p>最高有效位即 $x_{w-1}$ 也称为符号位。符号位等于1时，表示值为负，等于0时，值为非负，下面来看实际的计算示例：</p>\n<p>$$\\begin{array}{l}{B 2 T_{4}([0001])=-0 \\cdot 2^{3}+0 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+0+0+1=1} \\ {B 2 T_{4}([0101])=-0 \\cdot 2^{3}+1 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+4+0+1=5} \\ {B 2 T_{4}([1011])=-1 \\cdot 2^{3}+0 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=-8+0+2+1=-5} \\ {B 2 T_{4}([1111])=-1 \\cdot 2^{3}+1 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=-8+4+2+1=-1}\\end{array}$$</p>\n<p>这里让我们一起来考虑下补码所能表示的值的范围，最小值为：$T M i n_{w} \\doteq-2^{w-1}$.</p>\n<p>最大值为：$T M a x_{w} \\doteq \\sum_{i=0}^{w-2} 2^{i}=2^{w-1}-1$</p>\n<p>例如以长度为4为例，$T M i n_{4}=B 2 T_{4}([1000])=-2^{3}=-8$, 而 $T M a x_{4}=B 2 T_{4}([0111])=2^{2}+2^{1}+2^{0}=4+2+1=7$</p>\n<p>补码编码也是取值范围内每个数字都有唯一的w位补码编码。</p>\n<h3 id=\"2-3-有符号数和无符号数之间的转换\"><a href=\"#2-3-有符号数和无符号数之间的转换\" class=\"headerlink\" title=\"2.3 有符号数和无符号数之间的转换\"></a>2.3 有符号数和无符号数之间的转换</h3><p><strong>原理：补码转换为无符号数</strong></p>\n<p>对满足$T M i n_{w} \\leqslant x \\leqslant T M a x_{w}$ 的 x 有：<br>$$<br>T 2 U_{w}(x)=\\left{\\begin{array}{ll}{x+2^{w},} &amp; {x&lt;0} \\ {x,} &amp; {x \\geqslant 0}\\end{array}\\right.<br>$$</p>\n<p>比如，$T 2 U_{16}(-12345)=-12345+2^{16}=53191$ ,同时 $T 2 U_{w}(-1)=-1+2^{w}=U M a x_{w}$。</p>\n<p><strong>原理：无符号数转换为补码</strong></p>\n<p>对满足 $0 \\leqslant u \\leqslant U M a x_{w}$ 的 u 有：<br>$$<br>U 2 T_{w}(u)=\\left{\\begin{array}{ll}{u,} &amp; {u \\leqslant T \\operatorname{Max}<em>{w}} \\ {u-2^{w},} &amp; {u&gt;\\operatorname{TMax}</em>{w}}\\end{array}\\right.<br>$$</p>\n<h2 id=\"3-整数运算\"><a href=\"#3-整数运算\" class=\"headerlink\" title=\"3. 整数运算\"></a>3. 整数运算</h2><p>在我们刚刚学习计算机时，大家有没有经历过，两个正数相加会得出一个负数，而比较表达式 x&lt;y 和 x-y&lt;0 会产生不同的结果呢？带着这些问题一起往下看吧。</p>\n<h3 id=\"3-1-无符号加法\"><a href=\"#3-1-无符号加法\" class=\"headerlink\" title=\"3.1 无符号加法\"></a>3.1 无符号加法</h3><p><strong>原理：无符号加法，对满足</strong> $0 \\leqslant x, \\quad y&lt;2^{w}$  的 x 和 y有：<br>$$<br>x+_{w}^{u} y=\\left{\\begin{array}{ll}{x+y,} &amp; {x+y&lt;2^{w}} \\ {x+y-2^{w},} &amp; {2^{w} \\leqslant  x+y&lt;2^{w+1}}\\end{array}\\right.<br>$$</p>\n<p>比如：x=9，y=12 的位表示分别为[1001] 和 [1100]。它们的和是21，表示为5位的[10101]，产生溢出，丢弃最高位。 </p>\n<p><strong>原理： 检测无符号数加法中的溢出</strong></p>\n<p>对在范围 $0 \\leqslant x, \\quad y \\leqslant U M a x_{w}$,s=x+y，若s &lt; x 或者等价的 s &lt; y时，发生了溢出。</p>\n<p><strong>原理： 无符号数求反</strong></p>\n<p>对满足 $0 \\leqslant x&lt;2^{w}$ ,的任意x，其w位的无符号逆元 $-_{w}^{u} x$ 表达式如下：</p>\n<p>$-_{w}^{u} x=\\left{\\begin{array}{ll}{x,} &amp; {x=0} \\ {2^{w}-x,} &amp; {x&gt;0}\\end{array}\\right.$</p>\n<h3 id=\"3-2-补码加法\"><a href=\"#3-2-补码加法\" class=\"headerlink\" title=\"3.2 补码加法\"></a>3.2 补码加法</h3><p><strong>原理： 补码加法</strong></p>\n<p>对满足$0 \\leqslant x, \\quad y \\leqslant U M a x_{w}$ 的整数x，y，有：</p>\n<p>$$<br>x+_{w}^{t} y=\\left{\\begin{array}{ll}{x+y-2^{w},} &amp; {2^{w-1} \\leqslant x+y}  \\ {x+y,} &amp; {-2^{w-1} \\leqslant x+y&lt;2^{w-1} \\quad \\begin{array}{l}\\ \\end{array}} \\ {x+y+2^{w},} &amp; {x+y&lt;-2^{w-1}} \\end{array}\\right.<br>$$</p>\n<p><strong>原理： 检测补码加法中的溢出</strong></p>\n<p>对满足 $T M i n_{w} \\leqslant x, \\quad y \\leqslant T M a x_{w}$ 的x 和 y，令 s = x + y。当且仅当x&gt;0,y&gt;0，但s&lt;=0时，计算s发生了正溢出。当且仅当 x&lt;0,y&lt;0，但s&gt;=0时，计算发生了负溢出。</p>\n<h3 id=\"3-3-乘法和除法\"><a href=\"#3-3-乘法和除法\" class=\"headerlink\" title=\"3.3 乘法和除法\"></a>3.3 乘法和除法</h3><p>在大多数机器上，整数乘法指令相当慢，需要10个或者更多的时钟周期，然而<strong>加法、减法、位运算、移位操作只需要一个时钟周期</strong>。</p>\n<p>因此，编译器使用了移位和加法运算的组合代替乘以常数因子的乘法。</p>\n<p><strong>原理： 乘以2的幂</strong></p>\n<p>例如：x*14，利用14 = $14=2^{3}+2^{2}+2^{1}$ ,编译器会将乘法重写为 $(x&lt;&lt;3)+(x&lt;2)+(x&lt;&lt;1)$ ,将乘法替换为三个移位和一个加法。</p>\n<p>在大多数机器上，整数除法比乘法更慢，需要30个左右的时钟周期。</p>\n<p>所以除法，也可以采用移位运算，相对于乘法这里采用的是右移，而不是左移。</p>\n<h2 id=\"4-浮点数\"><a href=\"#4-浮点数\" class=\"headerlink\" title=\"4. 浮点数\"></a>4. 浮点数</h2><blockquote>\n<p>固定范围的数字，小数点前代表大小范围，小数点后代表精度，浮动小数点即平衡范围和精度，所以叫浮点数</p>\n</blockquote>\n<h3 id=\"4-1-二进制小数\"><a href=\"#4-1-二进制小数\" class=\"headerlink\" title=\"4.1 二进制小数\"></a>4.1 二进制小数</h3><p>十进制数转换描述定义：<br>$$<br>d=\\sum_{i=-n}^{m} 10^{i} \\times d_{i}<br>$$</p>\n<p>例如：12.34 = $1 \\times 10^{1}+2 \\times 10^{0}+3 \\times 10^{-1}+4 \\times 10^{-2}=12 \\frac{34}{100}$</p>\n<p>二进制数转换描述定义：<br>$$<br>b=\\sum_{i=-n}^{m} 2^{i} \\times b_{i}<br>$$</p>\n<p>例如，$101.11_{2}= 1 \\times 2^{2}+0 \\times 2^{1}+1 \\times 2^{0}+1 \\times 2^{-1}+1 \\times 2^{-2}=4+0+1+\\frac{1}{2}+\\frac{1}{4}=5 \\frac{3}{4} $</p>\n<p>增加二进制表示的长度可以提高表示的精度：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/4aene.png\" alt=\"\"></p>\n<h3 id=\"4-2-IEEE浮点表示\"><a href=\"#4-2-IEEE浮点表示\" class=\"headerlink\" title=\"4.2 IEEE浮点表示\"></a>4.2 IEEE浮点表示</h3><p>IEEE浮点标准用 $V=(-1)^{s} \\times M \\times 2^{E}$ 的形式来表示一个数：</p>\n<ul>\n<li>符号（sign）s决定这数是负数（s=1）还是正数（s=0）。</li>\n<li>尾数（signnificand） M是一个二进制小数，它的范围是 $1 \\sim 2-\\varepsilon$。</li>\n<li>阶码（exponent） E的作用是对浮点数加权，权重是2的E次幂。</li>\n<li>一个单独的符号位s</li>\n<li>k位的阶码字段 编码阶码E</li>\n<li>n位小数字段 编码尾数M</li>\n</ul>\n<p>如下图：</p>\n<p>在单精度格式（float），s，exp 和 frac 字段分别为 s=1，k=8, n = 23,得到一个32位的表示。</p>\n<p>在双精度浮点格式（double）中，s=1、k=11、n=52位，得到一个64位的表示。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/vw19h.png\" alt=\"\"></p>\n<h3 id=\"4-3-C语言中的浮点数\"><a href=\"#4-3-C语言中的浮点数\" class=\"headerlink\" title=\"4.3 C语言中的浮点数\"></a>4.3 C语言中的浮点数</h3><ul>\n<li>从int转换成float，数字不会溢出，但可能会被舍入；</li>\n<li>从int或float转成double，因为double范围更大，精度更高，所以能够精确的保留数值；</li>\n<li>从double转成float，因为范围要小，所以值可能溢出成正无穷或者负无穷，另外由于精度较小，可能舍入。</li>\n<li>从float或者double转成int，值将会向零舍入，例如1.999转换成1，-1.999转成-1。进一步来说，值可能会溢出。</li>\n</ul>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><ul>\n<li>计算机将信息编码为位（比特），通常组成成字节序列。</li>\n<li>大多数机器对整数使用补码编码，而对浮点数使用IEEE标准754编码。在位级上理解这些编码有助于写出全部数值范围上正确运算的程序。</li>\n<li>由于编码长度有限，计算机运算会产生溢出。</li>\n<li>使用浮点运算要小心，因为只有有限的范围和精度。</li>\n</ul>\n<blockquote>\n<p>本文涉及的数学知识较多，看着比较枯燥。如果是计算机专业的同学，应该会有些熟悉。 不过我们如果要做一名高级程序员，计算机底层是绕不过去的，所以还是撸起袖子，加油干吧！</p>\n</blockquote>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&amp;mid=2247483654&amp;idx=1&amp;sn=25c528de5f245a65a27aa0b261382ca7&amp;chksm=9f999c2ba8ee153d79beb9db613c2f13594966c713ec889c1ade9463baf663b0e7fbb40e921a&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">计算机系统漫游</a></li>\n</ul>\n<p>​        </p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>如果能完全理解计算机系统以及它对应用程序的影响，那么恭喜你，你走上了一条为数不多的大牛道路。</p>\n</blockquote>\n<p>本文是深入理解计算机系统的第二篇文章，接着上一篇我们讲解的计算机系统开篇-<a href=\"http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483654&idx=1&sn=25c528de5f245a65a27aa0b261382ca7&chksm=9f999c2ba8ee153d79beb9db613c2f13594966c713ec889c1ade9463baf663b0e7fbb40e921a&token=1690272020&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">《计算机系统漫游》</a>，本篇文章继续深入，一起来学习 <strong>信息的表示和处理</strong>。</p>\n<p>本篇文章一共分为四部分，<strong>信息存储</strong>、<strong>整数的表示</strong>，<strong>整数的运算</strong> 和 <strong>浮点数</strong>。</p>\n<h2 id=\"1-信息存储\"><a href=\"#1-信息存储\" class=\"headerlink\" title=\"1. 信息存储\"></a>1. 信息存储</h2><p>程序将内存视为一个非常大的字节数组，称为<strong>虚拟内存</strong>。内存中的每一个字节都由一个唯一的数字来标识，称为它的<strong>地址</strong>，地址的集合就称为<strong>虚拟地址空间</strong>。</p>\n<blockquote>\n<p>每台计算都有一个字长，虚拟地址空间是以字来编码的，所以字长决定了虚拟地址空间的大小。对于一个字长为 w 位的机器而言，虚拟地址的范围为 0~$2^w$ -1 ,程序最多访问$2^w$ 个字节。</p>\n</blockquote>\n<h3 id=\"1-1-寻址和字节顺序\"><a href=\"#1-1-寻址和字节顺序\" class=\"headerlink\" title=\"1.1 寻址和字节顺序\"></a>1.1 寻址和字节顺序</h3><p>对于我们日常程序中的对象，它们在内存中往往是多字节的，那么我们必须知道两个规则：<strong>这个对象的地址是什么？</strong>以及<strong>内存中如何排列这些字节？</strong></p>\n<p>在几乎所有的机器上，字节都是被连续存储的，对象的地址为所使用字节中最小的地址。例如，一个int类型的变量x的地址为0x100，也就是地址表达式&amp;x 的值为0x100，x的四个字节存储在内存0x100、0x101、0x102、0x103位置。</p>\n<p>排列表示一个对象的字节，有两个通用的规则：</p>\n<ul>\n<li>大端法：最高有效字节在最前面</li>\n<li>小端法：最低有效字节在最前面</li>\n</ul>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/3dp1r.png\" alt></p>\n<p>对于我们程序员来说，机器使用的字节顺序对我们是不可见的，无论哪种字节顺序的机器，我们的程序编译后得到的结果都是一样的，不过有时候字节顺序也会成为问题，这里不再详述什么情况下会产生问题，只作学习验证机器的字节顺序不同产生的不同结果。</p>\n<pre><code class=\"c\"># include &lt;stdio.h&gt;\n\ntypedef unsigned char *byte_pointer;\n\nvoid show_bytes(byte_pointer start, size_t len)\n{\n    size_t i;\n    for(i =0; i &lt; len;i++)\n        printf(&quot;%.2x&quot;,start[i]);\n    printf(&quot;\\n&quot;);\n}\n\nvoid show_int(int x) {\n    show_bytes((byte_pointer) &amp;x,sizeof(int));\n}\n\nvoid show_float(float x) {\n    show_bytes((byte_pointer) &amp;x,sizeof(float));\n}\n\nvoid show_pointer(void *x) {\n    show_bytes((byte_pointer) &amp;x,sizeof(void *));\n}\n\nvoid test_show_bytes(int val) {\n    int ival = val;\n    float fval = (float) ival;\n    int *pval = &amp;ival;\n    show_int(ival);\n    show_float(fval);\n    show_pointer(pval);\n}\n\nint main() {\n    test_show_bytes(12345);\n    return 1;\n}\n</code></pre>\n<p>运行上面的c语言程序，得到的结果如下：</p>\n<p>39300000<br>00e44046<br>a8e7a4c2ff7f0000</p>\n<p>参数12345的十六进制表示为0x00000393,结合上面的结果 39300000 说明我的linux64是一个小端法机器。下面在放一张在各个机器测试的不同结果，更加全面的对比图：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/2gzok.png\" alt></p>\n<p>上图指针值完全不相同的原因是不同的操作系统使用不同的存储分配规则，不过需要注意的是Linux64使用的是8字节地址。</p>\n<h3 id=\"1-2-表示字符串\"><a href=\"#1-2-表示字符串\" class=\"headerlink\" title=\"1.2 表示字符串\"></a>1.2 表示字符串</h3><p>C语言的字符串：一个以null(值为0)字符结尾的字符数组 如字符串”12345”编码为 61 62 63 64 65 使用ASCII编码。 linux系统可以使用 man ascii 命令查看ASCII编码表。</p>\n<h3 id=\"1-3-布尔代数简介\"><a href=\"#1-3-布尔代数简介\" class=\"headerlink\" title=\"1.3 布尔代数简介\"></a>1.3 布尔代数简介</h3><p>二进制是计算机编码、存储和操作信息的核心。 将逻辑值 TRUE 和 FALSE 编码为1和0，能够设计一种代数，用来研究逻辑推理的基本原则。</p>\n<p>布尔运算：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/o8eeg.png\" alt></p>\n<h3 id=\"1-4-C语言中的位级运算\"><a href=\"#1-4-C语言中的位级运算\" class=\"headerlink\" title=\"1.4 C语言中的位级运算\"></a>1.4 C语言中的位级运算</h3><blockquote>\n<p>事实上，我们平时代码中写的 | 就是OR(或)，&amp; 就是AND(与)，~ 就是NOT（取反），^就是异或，本质上都是按位进行运算的。</p>\n</blockquote>\n<p>以下是一些对char数据类型表达式求值的例子：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/5z9tg.png\" alt></p>\n<p>正如示例说明的那样，确定一个位级表达式的结果最好的方法，就是将十六进制的参数扩展成二进制表示并执行二进制运算，然后再转换回十六进制。</p>\n<h3 id=\"1-5-C语言中的移位运算\"><a href=\"#1-5-C语言中的移位运算\" class=\"headerlink\" title=\"1.5 C语言中的移位运算\"></a>1.5 C语言中的移位运算</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/yc32u.png\" alt></p>\n<p>移位运算右移分为：逻辑右移和算术右移。</p>\n<ul>\n<li>逻辑右移：在左端补0；</li>\n<li>算术右移：如果操作数的最高位是1则左端补1，如果为0则补0；</li>\n</ul>\n<p>C语言中，几乎所有的编译器都对有符号数使用算术右移，无符号数使用逻辑右移。</p>\n<p>Java中有明确定义，x&gt;&gt;k 表示算术右移k个位置，而x&gt;&gt;&gt;k 会对x做逻辑右移。</p>\n<p>这里说明一个移位运算有关的操作符优先级问题：</p>\n<p>表达式 1&lt;&lt;2+3&lt;&lt;4 ，本意是（1&lt;&lt;2）+(3&lt;&lt;4),你可能也会犯这样的错误，其实前面的表达式等价于：1&lt;&lt;(2+3)&lt;&lt;4,因为<strong>加法（减法）的优先级比移位运算要高</strong>。</p>\n<h2 id=\"2-整数表示\"><a href=\"#2-整数表示\" class=\"headerlink\" title=\"2. 整数表示\"></a>2. 整数表示</h2><p>下面的数据术语用来精确定义和描述计算机如何编码和操作整数。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/5y3sx.png\" alt></p>\n<h3 id=\"2-1-无符号数的编码\"><a href=\"#2-1-无符号数的编码\" class=\"headerlink\" title=\"2.1 无符号数的编码\"></a>2.1 无符号数的编码</h3><p>假设一个整数有w位，每个位的取值即0非1。</p>\n<p><strong>原理：无符号数编码的定义</strong></p>\n<p>对向量<br>$$<br>\\vec{x}=\\left[\\begin{array}{cccc}{x_{w-1},} &amp; {x_{w-2}} &amp; {,} &amp; {\\cdots, \\quad x_{0}}\\end{array}\\right]<br>$$<br>用一个函数来表示：<br>$$<br>B 2 U_{w}(\\vec{x}) \\doteq \\sum_{i=0}^{w-1} x_{i} 2^{i}<br>$$<br>计算规则：<br>$$<br>\\begin{array}{l}{B 2 U_{4}([0001])=0 \\cdot 2^{3}+0 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+0+0+1=1} \\ {B 2 U_{4}([0101])=0 \\cdot 2^{3}+1 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+4+0+1=5} \\ {B 2 U_{4}([1011])=1 \\cdot 2^{3}+0 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=8+0+2+1=11} \\ {B 2 U_{4}([1111])=1 \\cdot 2^{3}+1 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=8+4+2+1=15}\\end{array}<br>$$</p>\n<h3 id=\"2-2-补码编码\"><a href=\"#2-2-补码编码\" class=\"headerlink\" title=\"2.2 补码编码\"></a>2.2 补码编码</h3><p>上面介绍的是无符号编码的表示形式，但是我们应用中，还是希望表示负数值。最常见的有符号数计算机表示方式就是补码。</p>\n<p><strong>原理：补码编码的定义</strong></p>\n<p>对向量：<br>$$<br>\\begin{aligned} \\vec{x}=\\left[x_{w-1}, x_{w-2},\\right.&amp;\\left.\\cdots, x_{0}\\right] \\ &amp; B 2 T_{w}(\\vec{x}) \\doteq-x_{u-1} 2^{w-1}+\\sum_{i=0}^{w-2} x_{i} 2^{i} \\end{aligned}<br>$$</p>\n<p>最高有效位即 $x_{w-1}$ 也称为符号位。符号位等于1时，表示值为负，等于0时，值为非负，下面来看实际的计算示例：</p>\n<p>$$\\begin{array}{l}{B 2 T_{4}([0001])=-0 \\cdot 2^{3}+0 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+0+0+1=1} \\ {B 2 T_{4}([0101])=-0 \\cdot 2^{3}+1 \\cdot 2^{2}+0 \\cdot 2^{1}+1 \\cdot 2^{0}=0+4+0+1=5} \\ {B 2 T_{4}([1011])=-1 \\cdot 2^{3}+0 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=-8+0+2+1=-5} \\ {B 2 T_{4}([1111])=-1 \\cdot 2^{3}+1 \\cdot 2^{2}+1 \\cdot 2^{1}+1 \\cdot 2^{0}=-8+4+2+1=-1}\\end{array}$$</p>\n<p>这里让我们一起来考虑下补码所能表示的值的范围，最小值为：$T M i n_{w} \\doteq-2^{w-1}$.</p>\n<p>最大值为：$T M a x_{w} \\doteq \\sum_{i=0}^{w-2} 2^{i}=2^{w-1}-1$</p>\n<p>例如以长度为4为例，$T M i n_{4}=B 2 T_{4}([1000])=-2^{3}=-8$, 而 $T M a x_{4}=B 2 T_{4}([0111])=2^{2}+2^{1}+2^{0}=4+2+1=7$</p>\n<p>补码编码也是取值范围内每个数字都有唯一的w位补码编码。</p>\n<h3 id=\"2-3-有符号数和无符号数之间的转换\"><a href=\"#2-3-有符号数和无符号数之间的转换\" class=\"headerlink\" title=\"2.3 有符号数和无符号数之间的转换\"></a>2.3 有符号数和无符号数之间的转换</h3><p><strong>原理：补码转换为无符号数</strong></p>\n<p>对满足$T M i n_{w} \\leqslant x \\leqslant T M a x_{w}$ 的 x 有：<br>$$<br>T 2 U_{w}(x)=\\left{\\begin{array}{ll}{x+2^{w},} &amp; {x&lt;0} \\ {x,} &amp; {x \\geqslant 0}\\end{array}\\right.<br>$$</p>\n<p>比如，$T 2 U_{16}(-12345)=-12345+2^{16}=53191$ ,同时 $T 2 U_{w}(-1)=-1+2^{w}=U M a x_{w}$。</p>\n<p><strong>原理：无符号数转换为补码</strong></p>\n<p>对满足 $0 \\leqslant u \\leqslant U M a x_{w}$ 的 u 有：<br>$$<br>U 2 T_{w}(u)=\\left{\\begin{array}{ll}{u,} &amp; {u \\leqslant T \\operatorname{Max}<em>{w}} \\ {u-2^{w},} &amp; {u&gt;\\operatorname{TMax}</em>{w}}\\end{array}\\right.<br>$$</p>\n<h2 id=\"3-整数运算\"><a href=\"#3-整数运算\" class=\"headerlink\" title=\"3. 整数运算\"></a>3. 整数运算</h2><p>在我们刚刚学习计算机时，大家有没有经历过，两个正数相加会得出一个负数，而比较表达式 x&lt;y 和 x-y&lt;0 会产生不同的结果呢？带着这些问题一起往下看吧。</p>\n<h3 id=\"3-1-无符号加法\"><a href=\"#3-1-无符号加法\" class=\"headerlink\" title=\"3.1 无符号加法\"></a>3.1 无符号加法</h3><p><strong>原理：无符号加法，对满足</strong> $0 \\leqslant x, \\quad y&lt;2^{w}$  的 x 和 y有：<br>$$<br>x+_{w}^{u} y=\\left{\\begin{array}{ll}{x+y,} &amp; {x+y&lt;2^{w}} \\ {x+y-2^{w},} &amp; {2^{w} \\leqslant  x+y&lt;2^{w+1}}\\end{array}\\right.<br>$$</p>\n<p>比如：x=9，y=12 的位表示分别为[1001] 和 [1100]。它们的和是21，表示为5位的[10101]，产生溢出，丢弃最高位。 </p>\n<p><strong>原理： 检测无符号数加法中的溢出</strong></p>\n<p>对在范围 $0 \\leqslant x, \\quad y \\leqslant U M a x_{w}$,s=x+y，若s &lt; x 或者等价的 s &lt; y时，发生了溢出。</p>\n<p><strong>原理： 无符号数求反</strong></p>\n<p>对满足 $0 \\leqslant x&lt;2^{w}$ ,的任意x，其w位的无符号逆元 $-_{w}^{u} x$ 表达式如下：</p>\n<p>$-_{w}^{u} x=\\left{\\begin{array}{ll}{x,} &amp; {x=0} \\ {2^{w}-x,} &amp; {x&gt;0}\\end{array}\\right.$</p>\n<h3 id=\"3-2-补码加法\"><a href=\"#3-2-补码加法\" class=\"headerlink\" title=\"3.2 补码加法\"></a>3.2 补码加法</h3><p><strong>原理： 补码加法</strong></p>\n<p>对满足$0 \\leqslant x, \\quad y \\leqslant U M a x_{w}$ 的整数x，y，有：</p>\n<p>$$<br>x+_{w}^{t} y=\\left{\\begin{array}{ll}{x+y-2^{w},} &amp; {2^{w-1} \\leqslant x+y}  \\ {x+y,} &amp; {-2^{w-1} \\leqslant x+y&lt;2^{w-1} \\quad \\begin{array}{l}\\ \\end{array}} \\ {x+y+2^{w},} &amp; {x+y&lt;-2^{w-1}} \\end{array}\\right.<br>$$</p>\n<p><strong>原理： 检测补码加法中的溢出</strong></p>\n<p>对满足 $T M i n_{w} \\leqslant x, \\quad y \\leqslant T M a x_{w}$ 的x 和 y，令 s = x + y。当且仅当x&gt;0,y&gt;0，但s&lt;=0时，计算s发生了正溢出。当且仅当 x&lt;0,y&lt;0，但s&gt;=0时，计算发生了负溢出。</p>\n<h3 id=\"3-3-乘法和除法\"><a href=\"#3-3-乘法和除法\" class=\"headerlink\" title=\"3.3 乘法和除法\"></a>3.3 乘法和除法</h3><p>在大多数机器上，整数乘法指令相当慢，需要10个或者更多的时钟周期，然而<strong>加法、减法、位运算、移位操作只需要一个时钟周期</strong>。</p>\n<p>因此，编译器使用了移位和加法运算的组合代替乘以常数因子的乘法。</p>\n<p><strong>原理： 乘以2的幂</strong></p>\n<p>例如：x*14，利用14 = $14=2^{3}+2^{2}+2^{1}$ ,编译器会将乘法重写为 $(x&lt;&lt;3)+(x&lt;2)+(x&lt;&lt;1)$ ,将乘法替换为三个移位和一个加法。</p>\n<p>在大多数机器上，整数除法比乘法更慢，需要30个左右的时钟周期。</p>\n<p>所以除法，也可以采用移位运算，相对于乘法这里采用的是右移，而不是左移。</p>\n<h2 id=\"4-浮点数\"><a href=\"#4-浮点数\" class=\"headerlink\" title=\"4. 浮点数\"></a>4. 浮点数</h2><blockquote>\n<p>固定范围的数字，小数点前代表大小范围，小数点后代表精度，浮动小数点即平衡范围和精度，所以叫浮点数</p>\n</blockquote>\n<h3 id=\"4-1-二进制小数\"><a href=\"#4-1-二进制小数\" class=\"headerlink\" title=\"4.1 二进制小数\"></a>4.1 二进制小数</h3><p>十进制数转换描述定义：<br>$$<br>d=\\sum_{i=-n}^{m} 10^{i} \\times d_{i}<br>$$</p>\n<p>例如：12.34 = $1 \\times 10^{1}+2 \\times 10^{0}+3 \\times 10^{-1}+4 \\times 10^{-2}=12 \\frac{34}{100}$</p>\n<p>二进制数转换描述定义：<br>$$<br>b=\\sum_{i=-n}^{m} 2^{i} \\times b_{i}<br>$$</p>\n<p>例如，$101.11_{2}= 1 \\times 2^{2}+0 \\times 2^{1}+1 \\times 2^{0}+1 \\times 2^{-1}+1 \\times 2^{-2}=4+0+1+\\frac{1}{2}+\\frac{1}{4}=5 \\frac{3}{4} $</p>\n<p>增加二进制表示的长度可以提高表示的精度：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/4aene.png\" alt></p>\n<h3 id=\"4-2-IEEE浮点表示\"><a href=\"#4-2-IEEE浮点表示\" class=\"headerlink\" title=\"4.2 IEEE浮点表示\"></a>4.2 IEEE浮点表示</h3><p>IEEE浮点标准用 $V=(-1)^{s} \\times M \\times 2^{E}$ 的形式来表示一个数：</p>\n<ul>\n<li>符号（sign）s决定这数是负数（s=1）还是正数（s=0）。</li>\n<li>尾数（signnificand） M是一个二进制小数，它的范围是 $1 \\sim 2-\\varepsilon$。</li>\n<li>阶码（exponent） E的作用是对浮点数加权，权重是2的E次幂。</li>\n<li>一个单独的符号位s</li>\n<li>k位的阶码字段 编码阶码E</li>\n<li>n位小数字段 编码尾数M</li>\n</ul>\n<p>如下图：</p>\n<p>在单精度格式（float），s，exp 和 frac 字段分别为 s=1，k=8, n = 23,得到一个32位的表示。</p>\n<p>在双精度浮点格式（double）中，s=1、k=11、n=52位，得到一个64位的表示。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/vw19h.png\" alt></p>\n<h3 id=\"4-3-C语言中的浮点数\"><a href=\"#4-3-C语言中的浮点数\" class=\"headerlink\" title=\"4.3 C语言中的浮点数\"></a>4.3 C语言中的浮点数</h3><ul>\n<li>从int转换成float，数字不会溢出，但可能会被舍入；</li>\n<li>从int或float转成double，因为double范围更大，精度更高，所以能够精确的保留数值；</li>\n<li>从double转成float，因为范围要小，所以值可能溢出成正无穷或者负无穷，另外由于精度较小，可能舍入。</li>\n<li>从float或者double转成int，值将会向零舍入，例如1.999转换成1，-1.999转成-1。进一步来说，值可能会溢出。</li>\n</ul>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><ul>\n<li>计算机将信息编码为位（比特），通常组成成字节序列。</li>\n<li>大多数机器对整数使用补码编码，而对浮点数使用IEEE标准754编码。在位级上理解这些编码有助于写出全部数值范围上正确运算的程序。</li>\n<li>由于编码长度有限，计算机运算会产生溢出。</li>\n<li>使用浮点运算要小心，因为只有有限的范围和精度。</li>\n</ul>\n<blockquote>\n<p>本文涉及的数学知识较多，看着比较枯燥。如果是计算机专业的同学，应该会有些熟悉。 不过我们如果要做一名高级程序员，计算机底层是绕不过去的，所以还是撸起袖子，加油干吧！</p>\n</blockquote>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzA4MTE4NTg1OA==&mid=2247483654&idx=1&sn=25c528de5f245a65a27aa0b261382ca7&chksm=9f999c2ba8ee153d79beb9db613c2f13594966c713ec889c1ade9463baf663b0e7fbb40e921a&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">计算机系统漫游</a></li>\n</ul>\n<p>​        </p>\n"},{"title":"Java线程堆栈分析","date":"2017-12-26T14:10:28.000Z","author":"coderluo","_content":"\n\n> 不知觉间工作已有一年了，闲下来的时候总会思考下，作为一名Java程序员，不能一直停留在开发业务使用框架上面。老话说得好，机会是留给有准备的人的，因此，开始计划看一些Java底层一点的东西，尝试开始在学习的过程中写博客，希望和大家一起交流学习。\n\n写在前面： 线程堆栈应该是多线程类应用程序非功能问题定位的最有效手段，可以说是杀手锏。线程堆栈最擅长与分析如下类型问题：\n\n- 系统无缘无故CPU过高。\n- 系统挂起，无响应。\n- 系统运行越来越慢。\n- 性能瓶颈（如无法充分利用CPU等）\n- 线程死锁、死循环，饿死等。\n- 由于线程数量太多导致系统失败（如无法创建线程等）。\n\n## 如何解读线程堆栈\n\n如下面一段Java源代码程序：\n\n```java\npackage org.ccgogoing.study.stacktrace;\n/** \n * @Author: LuoChong400\n * @Description: 测试线程\n * @Date: Create in 07:27 PM 2017/12/08\n */\npublic class MyTest {\n\n        Object obj1 = new Object();\n        Object obj2 = new Object();\n\n        public void fun1() {\n            synchronized (obj1) {\n                fun2();\n            }\n        }\n        public void fun2() {\n            synchronized (obj2) {\n                while (true) { //为了打印堆栈，该函数堆栈分析不退出\n                    System.out.print(\"\");\n                }\n            }\n        }\n        public static void main(String[] args) {\n            MyTest aa = new MyTest();\n            aa.fun1();\n        }\n    }\n```\n\n在Idea 中运行该程序，然后按下CTRL+BREAK键，打印出线程堆栈信息如下：\n\n```java\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (24.79-b02 mixed mode):\n\n\"Service Thread\" daemon prio=6 tid=0x000000000c53b000 nid=0xca58 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread1\" daemon prio=10 tid=0x000000000c516000 nid=0xd390 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread0\" daemon prio=10 tid=0x000000000c515000 nid=0xcbac waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Monitor Ctrl-Break\" daemon prio=6 tid=0x000000000c514000 nid=0xd148 runnable [0x000000000caee000]\n   java.lang.Thread.State: RUNNABLE\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:152)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:122)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)\n\t- locked <0x00000000d7858b50> (a java.io.InputStreamReader)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:184)\n\tat java.io.BufferedReader.fill(BufferedReader.java:154)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:317)\n\t- locked <0x00000000d7858b50> (a java.io.InputStreamReader)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:382)\n\tat com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:64)\n\n\"Attach Listener\" daemon prio=10 tid=0x000000000ad4a000 nid=0xd24c runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Signal Dispatcher\" daemon prio=10 tid=0x000000000c1a8800 nid=0xd200 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Finalizer\" daemon prio=8 tid=0x000000000ace6000 nid=0xcd74 in Object.wait() [0x000000000c13f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000d7284858> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)\n\t- locked <0x00000000d7284858> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\n\n\"Reference Handler\" daemon prio=10 tid=0x000000000ace4800 nid=0xce34 in Object.wait() [0x000000000bf4f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000d7284470> (a java.lang.ref.Reference$Lock)\n\tat java.lang.Object.wait(Object.java:503)\n\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)\n\t- locked <0x00000000d7284470> (a java.lang.ref.Reference$Lock)\n\n\"main\" prio=6 tid=0x000000000238e800 nid=0xc940 runnable [0x00000000027af000]\n   java.lang.Thread.State: RUNNABLE\n\tat org.ccgogoing.study.stacktrace.MyTest.fun2(MyTest.java:22)\n\t- locked <0x00000000d77d50c8> (a java.lang.Object)\n\tat org.ccgogoing.study.stacktrace.MyTest.fun1(MyTest.java:15)\n\t- locked <0x00000000d77d50b8> (a java.lang.Object)\n\tat org.ccgogoing.study.stacktrace.MyTest.main(MyTest.java:29)\n\n\"VM Thread\" prio=10 tid=0x000000000ace1000 nid=0xd0a8 runnable \n\n\"GC task thread#0 (ParallelGC)\" prio=6 tid=0x00000000023a4000 nid=0xd398 runnable \n\n\"GC task thread#1 (ParallelGC)\" prio=6 tid=0x00000000023a5800 nid=0xcc20 runnable \n\n\"GC task thread#2 (ParallelGC)\" prio=6 tid=0x00000000023a7000 nid=0xb914 runnable \n\n\"GC task thread#3 (ParallelGC)\" prio=6 tid=0x00000000023a9000 nid=0xd088 runnable \n\n\"VM Periodic Task Thread\" prio=10 tid=0x000000000c53f000 nid=0xc1b4 waiting on condition \n\nJNI global references: 138\n\nHeap\n PSYoungGen      total 36864K, used 6376K [0x00000000d7280000, 0x00000000d9b80000, 0x0000000100000000)\n  eden space 31744K, 20% used [0x00000000d7280000,0x00000000d78ba0d0,0x00000000d9180000)\n  from space 5120K, 0% used [0x00000000d9680000,0x00000000d9680000,0x00000000d9b80000)\n  to   space 5120K, 0% used [0x00000000d9180000,0x00000000d9180000,0x00000000d9680000)\n ParOldGen       total 83456K, used 0K [0x0000000085800000, 0x000000008a980000, 0x00000000d7280000)\n  object space 83456K, 0% used [0x0000000085800000,0x0000000085800000,0x000000008a980000)\n PSPermGen       total 21504K, used 3300K [0x0000000080600000, 0x0000000081b00000, 0x0000000085800000)\n  object space 21504K, 15% used [0x0000000080600000,0x0000000080939290,0x0000000081b00000)\n```\n\n在上面这段堆栈输出中，可以看到有很多后台线程和main线程，其中只有main线程属于Java用户线程，其他几个都是虚拟机自动创建的，我们分析的过程中，只关心用户线程即可。\n\n从上面的main线程中可以很直观的看到当前线程的调用上下文，其中一个线程的某一层调用含义如下：\n\n```\nat MyTest.fun1(MyTest.java:15)\n    |     |     |              |\n    |     |     |              +-----当前正在调用的函数所在的源代码文件的行号\n    |     |     +------------当前正在调用的函数所在的源代码文件\n    |     +---------------------当前正在调用的方法名\n    +---------------------------当前正在调用的类名\n```\n\n另外，堆栈中有：`- locked <0x00000000d77d50b8> (a java.lang.Object)`语句，表示该线程已经占有柯锁<0x00000000d77d50b8>,尖括号中表示锁ID，这个事系统自动产生的，我们只需要知道每次打印的堆栈，同一个ID表示是同一个锁即可。每一个线程堆栈的第一行含义如下：\n\n```\n\"main\" prio=1 tid=0x000000000238e800 nid=0xc940 runnable [0x00000000027af000]\n    |       |   |                       |           |           |\n    |       |   |                       |           |           +--线程占用内存地址\n    |       |   |                       |           +-----------线程的状态\n    |       |   |                       +----线程对应的本地线程id号\n    |       |   +-------------------线程id\n    |       +--------------------------线程优先级\n    +-------------------------------线程名称\n    \n其中需要说明的是，线程对应的本地线程id号，是指Java线程所对应的虚拟机中的本地线程。由于Java是解析型语言，执行的实体是Java虚拟机，因此Java语言中的线程是依附于虚拟机中的本地线程来运行的，实际上是本地线程在执行Java线程代码。\n```\n### 锁的解读\n\n从上面的线程堆栈看，线程堆栈中包含的直接信息为：线程的个数，每个线程调用的方法堆栈，当前锁的状态。线程的个数可以直接数出来；线程调用的方法堆栈，从下向上看，即表示当前的线程调用了哪个类上的哪个方法。而锁得状态看起来稍微有一点技巧。与锁相关的信息如下：\n\n- 当一个线程占有一个锁的时候，线程的堆栈中会打印--locked<0x00000000d77d50c8>\n- 当一个线程正在等待其它线程释放该锁，线程堆栈中会打印--waiting to lock<0x00000000d77d50c8>\n- 当一个线程占有一个锁，但又执行到该锁的wait()方法上，线程堆栈中首先打印locked，然后又会打印--waiting on <0x00000000d77d50c8>\n\n### 线程状态的解读\n\n借助线程堆栈，可以分析很多类型的问题，CPU的消耗分析即是线程堆栈分析的一个重要内容；\n\n处于TIMED_WAITING、WAITING状态的线程一定不消耗CPU。处于RUNNABLE的线程，要结合当前代码的性质判断，是否消耗CPU。\n\n- 如果是纯Java运算代码，则消耗CPU。\n- 如果是网络IO，很少消耗CPU。\n- 如果是本地代码，要结合本地代码的性质判断（可以通过pstack、gstack获取本地线程堆栈），如果是纯运算代码，则消耗CPU，如果被挂起，则不消耗CPU，如果是IO，则不怎么消耗CPU。\n\n\n### 如何借助线程堆栈分析问题\n\n**线程堆栈在定位如下类型的问题上非常有帮助：**\n\n* 线程死锁的分析\n* Java代码导致的CPU过高分析\n* 死循环分析\n* 资源不足分析\n* 性能瓶颈分析\n\n#### 线程死锁分析\n\n死锁的概念就不做过多解释了，不明白的可以去网上查查；\n\n两个或超过两个线程因为环路的锁依赖关系而形成的锁环，就形成了真正的死锁，如下为死锁喉打印的堆栈：\n\n```java\nFound one Java-level deadlock:\n=============================\n\"org.ccgogoing.study.stacktrace.deadlock.TestThread2\":\n  waiting to lock monitor 0x000000000a9ad118 (object 0x00000000d77363d0, a java.lang.Object),\n  which is held by \"org.ccgogoing.study.stacktrace.deadlock.TestThread1\"\n\"org.ccgogoing.study.stacktrace.deadlock.TestThread1\":\n  waiting to lock monitor 0x000000000a9abc78 (object 0x00000000d77363e0, a java.lang.Object),\n  which is held by \"org.ccgogoing.study.stacktrace.deadlock.TestThread2\"\n\nJava stack information for the threads listed above:\n===================================================\n\"org.ccgogoing.study.stacktrace.deadlock.TestThread2\":\n\tat org.ccgogoing.study.stacktrace.deadlock.TestThread2.fun(TestThread2.java:35)\n\t- waiting to lock <0x00000000d77363d0> (a java.lang.Object)\n\t- locked <0x00000000d77363e0> (a java.lang.Object)\n\tat org.ccgogoing.study.stacktrace.deadlock.TestThread2.run(TestThread2.java:22)\n\"org.ccgogoing.study.stacktrace.deadlock.TestThread1\":\n\tat org.ccgogoing.study.stacktrace.deadlock.TestThread1.fun(TestThread1.java:33)\n\t- waiting to lock <0x00000000d77363e0> (a java.lang.Object)\n\t- locked <0x00000000d77363d0> (a java.lang.Object)\n\tat org.ccgogoing.study.stacktrace.deadlock.TestThread1.run(TestThread1.java:20)\n\nFound 1 deadlock.\n```\n\n从打印的堆栈中我们能看到\"Found one Java-level deadlock:\",即如果存在死锁情况,堆栈中会直接给出死锁的分析结果.\n\n当一组Java线程发生死锁的时候,那么意味着Game Over,这些线程永远得被挂在那里了,永远不可能继续运行下去。当发生死锁的线程在执行系统的关键功能时，那么这个死锁可能会导致整个系统瘫痪，要想恢复系统，临时也是唯一的规避方法是*将系统重启。然后赶快去修改导致这个死锁的Bug。*\n\n注意：死锁的两个或多个线程是不消耗CPU的，有的人认为CPU100%的使用率是线程死锁导致的，这个说法是完全错误的。死循环，并且在循环中代码都是CPU密集型，才有可能导致CPU的100%使用率，像socket或者数据库等IO操作是不怎么消耗CPU的。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/java/Java线程堆栈分析.md","raw":"---\ntitle: Java线程堆栈分析\ndate: 2017-12-26 22:10:28\ntags:\n  - 线程堆栈\ncategories: JAVA\nauthor: coderluo\n---\n\n\n> 不知觉间工作已有一年了，闲下来的时候总会思考下，作为一名Java程序员，不能一直停留在开发业务使用框架上面。老话说得好，机会是留给有准备的人的，因此，开始计划看一些Java底层一点的东西，尝试开始在学习的过程中写博客，希望和大家一起交流学习。\n\n写在前面： 线程堆栈应该是多线程类应用程序非功能问题定位的最有效手段，可以说是杀手锏。线程堆栈最擅长与分析如下类型问题：\n\n- 系统无缘无故CPU过高。\n- 系统挂起，无响应。\n- 系统运行越来越慢。\n- 性能瓶颈（如无法充分利用CPU等）\n- 线程死锁、死循环，饿死等。\n- 由于线程数量太多导致系统失败（如无法创建线程等）。\n\n## 如何解读线程堆栈\n\n如下面一段Java源代码程序：\n\n```java\npackage org.ccgogoing.study.stacktrace;\n/** \n * @Author: LuoChong400\n * @Description: 测试线程\n * @Date: Create in 07:27 PM 2017/12/08\n */\npublic class MyTest {\n\n        Object obj1 = new Object();\n        Object obj2 = new Object();\n\n        public void fun1() {\n            synchronized (obj1) {\n                fun2();\n            }\n        }\n        public void fun2() {\n            synchronized (obj2) {\n                while (true) { //为了打印堆栈，该函数堆栈分析不退出\n                    System.out.print(\"\");\n                }\n            }\n        }\n        public static void main(String[] args) {\n            MyTest aa = new MyTest();\n            aa.fun1();\n        }\n    }\n```\n\n在Idea 中运行该程序，然后按下CTRL+BREAK键，打印出线程堆栈信息如下：\n\n```java\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (24.79-b02 mixed mode):\n\n\"Service Thread\" daemon prio=6 tid=0x000000000c53b000 nid=0xca58 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread1\" daemon prio=10 tid=0x000000000c516000 nid=0xd390 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread0\" daemon prio=10 tid=0x000000000c515000 nid=0xcbac waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Monitor Ctrl-Break\" daemon prio=6 tid=0x000000000c514000 nid=0xd148 runnable [0x000000000caee000]\n   java.lang.Thread.State: RUNNABLE\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:152)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:122)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)\n\t- locked <0x00000000d7858b50> (a java.io.InputStreamReader)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:184)\n\tat java.io.BufferedReader.fill(BufferedReader.java:154)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:317)\n\t- locked <0x00000000d7858b50> (a java.io.InputStreamReader)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:382)\n\tat com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:64)\n\n\"Attach Listener\" daemon prio=10 tid=0x000000000ad4a000 nid=0xd24c runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Signal Dispatcher\" daemon prio=10 tid=0x000000000c1a8800 nid=0xd200 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Finalizer\" daemon prio=8 tid=0x000000000ace6000 nid=0xcd74 in Object.wait() [0x000000000c13f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000d7284858> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)\n\t- locked <0x00000000d7284858> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\n\n\"Reference Handler\" daemon prio=10 tid=0x000000000ace4800 nid=0xce34 in Object.wait() [0x000000000bf4f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000d7284470> (a java.lang.ref.Reference$Lock)\n\tat java.lang.Object.wait(Object.java:503)\n\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)\n\t- locked <0x00000000d7284470> (a java.lang.ref.Reference$Lock)\n\n\"main\" prio=6 tid=0x000000000238e800 nid=0xc940 runnable [0x00000000027af000]\n   java.lang.Thread.State: RUNNABLE\n\tat org.ccgogoing.study.stacktrace.MyTest.fun2(MyTest.java:22)\n\t- locked <0x00000000d77d50c8> (a java.lang.Object)\n\tat org.ccgogoing.study.stacktrace.MyTest.fun1(MyTest.java:15)\n\t- locked <0x00000000d77d50b8> (a java.lang.Object)\n\tat org.ccgogoing.study.stacktrace.MyTest.main(MyTest.java:29)\n\n\"VM Thread\" prio=10 tid=0x000000000ace1000 nid=0xd0a8 runnable \n\n\"GC task thread#0 (ParallelGC)\" prio=6 tid=0x00000000023a4000 nid=0xd398 runnable \n\n\"GC task thread#1 (ParallelGC)\" prio=6 tid=0x00000000023a5800 nid=0xcc20 runnable \n\n\"GC task thread#2 (ParallelGC)\" prio=6 tid=0x00000000023a7000 nid=0xb914 runnable \n\n\"GC task thread#3 (ParallelGC)\" prio=6 tid=0x00000000023a9000 nid=0xd088 runnable \n\n\"VM Periodic Task Thread\" prio=10 tid=0x000000000c53f000 nid=0xc1b4 waiting on condition \n\nJNI global references: 138\n\nHeap\n PSYoungGen      total 36864K, used 6376K [0x00000000d7280000, 0x00000000d9b80000, 0x0000000100000000)\n  eden space 31744K, 20% used [0x00000000d7280000,0x00000000d78ba0d0,0x00000000d9180000)\n  from space 5120K, 0% used [0x00000000d9680000,0x00000000d9680000,0x00000000d9b80000)\n  to   space 5120K, 0% used [0x00000000d9180000,0x00000000d9180000,0x00000000d9680000)\n ParOldGen       total 83456K, used 0K [0x0000000085800000, 0x000000008a980000, 0x00000000d7280000)\n  object space 83456K, 0% used [0x0000000085800000,0x0000000085800000,0x000000008a980000)\n PSPermGen       total 21504K, used 3300K [0x0000000080600000, 0x0000000081b00000, 0x0000000085800000)\n  object space 21504K, 15% used [0x0000000080600000,0x0000000080939290,0x0000000081b00000)\n```\n\n在上面这段堆栈输出中，可以看到有很多后台线程和main线程，其中只有main线程属于Java用户线程，其他几个都是虚拟机自动创建的，我们分析的过程中，只关心用户线程即可。\n\n从上面的main线程中可以很直观的看到当前线程的调用上下文，其中一个线程的某一层调用含义如下：\n\n```\nat MyTest.fun1(MyTest.java:15)\n    |     |     |              |\n    |     |     |              +-----当前正在调用的函数所在的源代码文件的行号\n    |     |     +------------当前正在调用的函数所在的源代码文件\n    |     +---------------------当前正在调用的方法名\n    +---------------------------当前正在调用的类名\n```\n\n另外，堆栈中有：`- locked <0x00000000d77d50b8> (a java.lang.Object)`语句，表示该线程已经占有柯锁<0x00000000d77d50b8>,尖括号中表示锁ID，这个事系统自动产生的，我们只需要知道每次打印的堆栈，同一个ID表示是同一个锁即可。每一个线程堆栈的第一行含义如下：\n\n```\n\"main\" prio=1 tid=0x000000000238e800 nid=0xc940 runnable [0x00000000027af000]\n    |       |   |                       |           |           |\n    |       |   |                       |           |           +--线程占用内存地址\n    |       |   |                       |           +-----------线程的状态\n    |       |   |                       +----线程对应的本地线程id号\n    |       |   +-------------------线程id\n    |       +--------------------------线程优先级\n    +-------------------------------线程名称\n    \n其中需要说明的是，线程对应的本地线程id号，是指Java线程所对应的虚拟机中的本地线程。由于Java是解析型语言，执行的实体是Java虚拟机，因此Java语言中的线程是依附于虚拟机中的本地线程来运行的，实际上是本地线程在执行Java线程代码。\n```\n### 锁的解读\n\n从上面的线程堆栈看，线程堆栈中包含的直接信息为：线程的个数，每个线程调用的方法堆栈，当前锁的状态。线程的个数可以直接数出来；线程调用的方法堆栈，从下向上看，即表示当前的线程调用了哪个类上的哪个方法。而锁得状态看起来稍微有一点技巧。与锁相关的信息如下：\n\n- 当一个线程占有一个锁的时候，线程的堆栈中会打印--locked<0x00000000d77d50c8>\n- 当一个线程正在等待其它线程释放该锁，线程堆栈中会打印--waiting to lock<0x00000000d77d50c8>\n- 当一个线程占有一个锁，但又执行到该锁的wait()方法上，线程堆栈中首先打印locked，然后又会打印--waiting on <0x00000000d77d50c8>\n\n### 线程状态的解读\n\n借助线程堆栈，可以分析很多类型的问题，CPU的消耗分析即是线程堆栈分析的一个重要内容；\n\n处于TIMED_WAITING、WAITING状态的线程一定不消耗CPU。处于RUNNABLE的线程，要结合当前代码的性质判断，是否消耗CPU。\n\n- 如果是纯Java运算代码，则消耗CPU。\n- 如果是网络IO，很少消耗CPU。\n- 如果是本地代码，要结合本地代码的性质判断（可以通过pstack、gstack获取本地线程堆栈），如果是纯运算代码，则消耗CPU，如果被挂起，则不消耗CPU，如果是IO，则不怎么消耗CPU。\n\n\n### 如何借助线程堆栈分析问题\n\n**线程堆栈在定位如下类型的问题上非常有帮助：**\n\n* 线程死锁的分析\n* Java代码导致的CPU过高分析\n* 死循环分析\n* 资源不足分析\n* 性能瓶颈分析\n\n#### 线程死锁分析\n\n死锁的概念就不做过多解释了，不明白的可以去网上查查；\n\n两个或超过两个线程因为环路的锁依赖关系而形成的锁环，就形成了真正的死锁，如下为死锁喉打印的堆栈：\n\n```java\nFound one Java-level deadlock:\n=============================\n\"org.ccgogoing.study.stacktrace.deadlock.TestThread2\":\n  waiting to lock monitor 0x000000000a9ad118 (object 0x00000000d77363d0, a java.lang.Object),\n  which is held by \"org.ccgogoing.study.stacktrace.deadlock.TestThread1\"\n\"org.ccgogoing.study.stacktrace.deadlock.TestThread1\":\n  waiting to lock monitor 0x000000000a9abc78 (object 0x00000000d77363e0, a java.lang.Object),\n  which is held by \"org.ccgogoing.study.stacktrace.deadlock.TestThread2\"\n\nJava stack information for the threads listed above:\n===================================================\n\"org.ccgogoing.study.stacktrace.deadlock.TestThread2\":\n\tat org.ccgogoing.study.stacktrace.deadlock.TestThread2.fun(TestThread2.java:35)\n\t- waiting to lock <0x00000000d77363d0> (a java.lang.Object)\n\t- locked <0x00000000d77363e0> (a java.lang.Object)\n\tat org.ccgogoing.study.stacktrace.deadlock.TestThread2.run(TestThread2.java:22)\n\"org.ccgogoing.study.stacktrace.deadlock.TestThread1\":\n\tat org.ccgogoing.study.stacktrace.deadlock.TestThread1.fun(TestThread1.java:33)\n\t- waiting to lock <0x00000000d77363e0> (a java.lang.Object)\n\t- locked <0x00000000d77363d0> (a java.lang.Object)\n\tat org.ccgogoing.study.stacktrace.deadlock.TestThread1.run(TestThread1.java:20)\n\nFound 1 deadlock.\n```\n\n从打印的堆栈中我们能看到\"Found one Java-level deadlock:\",即如果存在死锁情况,堆栈中会直接给出死锁的分析结果.\n\n当一组Java线程发生死锁的时候,那么意味着Game Over,这些线程永远得被挂在那里了,永远不可能继续运行下去。当发生死锁的线程在执行系统的关键功能时，那么这个死锁可能会导致整个系统瘫痪，要想恢复系统，临时也是唯一的规避方法是*将系统重启。然后赶快去修改导致这个死锁的Bug。*\n\n注意：死锁的两个或多个线程是不消耗CPU的，有的人认为CPU100%的使用率是线程死锁导致的，这个说法是完全错误的。死循环，并且在循环中代码都是CPU密集型，才有可能导致CPU的100%使用率，像socket或者数据库等IO操作是不怎么消耗CPU的。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"java/Java线程堆栈分析","published":1,"updated":"2019-09-28T15:28:58.582Z","_id":"ck13pk9oc000dcno605soo0jd","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>不知觉间工作已有一年了，闲下来的时候总会思考下，作为一名Java程序员，不能一直停留在开发业务使用框架上面。老话说得好，机会是留给有准备的人的，因此，开始计划看一些Java底层一点的东西，尝试开始在学习的过程中写博客，希望和大家一起交流学习。</p>\n</blockquote>\n<p>写在前面： 线程堆栈应该是多线程类应用程序非功能问题定位的最有效手段，可以说是杀手锏。线程堆栈最擅长与分析如下类型问题：</p>\n<ul>\n<li>系统无缘无故CPU过高。</li>\n<li>系统挂起，无响应。</li>\n<li>系统运行越来越慢。</li>\n<li>性能瓶颈（如无法充分利用CPU等）</li>\n<li>线程死锁、死循环，饿死等。</li>\n<li>由于线程数量太多导致系统失败（如无法创建线程等）。</li>\n</ul>\n<h2 id=\"如何解读线程堆栈\"><a href=\"#如何解读线程堆栈\" class=\"headerlink\" title=\"如何解读线程堆栈\"></a>如何解读线程堆栈</h2><p>如下面一段Java源代码程序：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> org<span class=\"token punctuation\">.</span>ccgogoing<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">.</span>stacktrace<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/** \n * @Author: LuoChong400\n * @Description: 测试线程\n * @Date: Create in 07:27 PM 2017/12/08\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTest</span> <span class=\"token punctuation\">{</span>\n\n        Object obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//为了打印堆栈，该函数堆栈分析不退出</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            MyTest aa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            aa<span class=\"token punctuation\">.</span><span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>在Idea 中运行该程序，然后按下CTRL+BREAK键，打印出线程堆栈信息如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\">Full thread dump Java <span class=\"token function\">HotSpot</span><span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> <span class=\"token number\">64</span><span class=\"token operator\">-</span>Bit Server <span class=\"token function\">VM</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24.79</span><span class=\"token operator\">-</span>b02 mixed mode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\n<span class=\"token string\">\"Service Thread\"</span> daemon prio<span class=\"token operator\">=</span><span class=\"token number\">6</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000c53b000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xca58</span> runnable <span class=\"token punctuation\">[</span><span class=\"token number\">0x0000000000000000</span><span class=\"token punctuation\">]</span>\n   java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>State<span class=\"token operator\">:</span> RUNNABLE\n\n<span class=\"token string\">\"C2 CompilerThread1\"</span> daemon prio<span class=\"token operator\">=</span><span class=\"token number\">10</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000c516000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xd390</span> waiting on condition <span class=\"token punctuation\">[</span><span class=\"token number\">0x0000000000000000</span><span class=\"token punctuation\">]</span>\n   java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>State<span class=\"token operator\">:</span> RUNNABLE\n\n<span class=\"token string\">\"C2 CompilerThread0\"</span> daemon prio<span class=\"token operator\">=</span><span class=\"token number\">10</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000c515000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xcbac</span> waiting on condition <span class=\"token punctuation\">[</span><span class=\"token number\">0x0000000000000000</span><span class=\"token punctuation\">]</span>\n   java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>State<span class=\"token operator\">:</span> RUNNABLE\n\n<span class=\"token string\">\"Monitor Ctrl-Break\"</span> daemon prio<span class=\"token operator\">=</span><span class=\"token number\">6</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000c514000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xd148</span> runnable <span class=\"token punctuation\">[</span><span class=\"token number\">0x000000000caee000</span><span class=\"token punctuation\">]</span>\n   java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>State<span class=\"token operator\">:</span> RUNNABLE\n    at java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>SocketInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">socketRead0</span><span class=\"token punctuation\">(</span>Native Method<span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>SocketInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>SocketInputStream<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">152</span><span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>SocketInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>SocketInputStream<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n    at sun<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>cs<span class=\"token punctuation\">.</span>StreamDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span>StreamDecoder<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">283</span><span class=\"token punctuation\">)</span>\n    at sun<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>cs<span class=\"token punctuation\">.</span>StreamDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">implRead</span><span class=\"token punctuation\">(</span>StreamDecoder<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">325</span><span class=\"token punctuation\">)</span>\n    at sun<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>cs<span class=\"token punctuation\">.</span>StreamDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>StreamDecoder<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">177</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> locked <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d7858b50</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>InputStreamReader<span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>InputStreamReader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>InputStreamReader<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">184</span><span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>BufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>BufferedReader<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">154</span><span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>BufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span>BufferedReader<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">317</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> locked <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d7858b50</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>InputStreamReader<span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>BufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span>BufferedReader<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">382</span><span class=\"token punctuation\">)</span>\n    at com<span class=\"token punctuation\">.</span>intellij<span class=\"token punctuation\">.</span>rt<span class=\"token punctuation\">.</span>execution<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span>AppMainV2$<span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>AppMainV2<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token string\">\"Attach Listener\"</span> daemon prio<span class=\"token operator\">=</span><span class=\"token number\">10</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000ad4a000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xd24c</span> runnable <span class=\"token punctuation\">[</span><span class=\"token number\">0x0000000000000000</span><span class=\"token punctuation\">]</span>\n   java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>State<span class=\"token operator\">:</span> RUNNABLE\n\n<span class=\"token string\">\"Signal Dispatcher\"</span> daemon prio<span class=\"token operator\">=</span><span class=\"token number\">10</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000c1a8800</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xd200</span> waiting on condition <span class=\"token punctuation\">[</span><span class=\"token number\">0x0000000000000000</span><span class=\"token punctuation\">]</span>\n   java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>State<span class=\"token operator\">:</span> RUNNABLE\n\n<span class=\"token string\">\"Finalizer\"</span> daemon prio<span class=\"token operator\">=</span><span class=\"token number\">8</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000ace6000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xcd74</span> in Object<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x000000000c13f000</span><span class=\"token punctuation\">]</span>\n   java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>State<span class=\"token operator\">:</span> <span class=\"token function\">WAITING</span> <span class=\"token punctuation\">(</span>on object monitor<span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>Native Method<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> waiting on <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d7284858</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>ReferenceQueue$Lock<span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>ReferenceQueue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>ReferenceQueue<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> locked <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d7284858</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>ReferenceQueue$Lock<span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>ReferenceQueue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>ReferenceQueue<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">151</span><span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>Finalizer$FinalizerThread<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>Finalizer<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">209</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token string\">\"Reference Handler\"</span> daemon prio<span class=\"token operator\">=</span><span class=\"token number\">10</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000ace4800</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xce34</span> in Object<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x000000000bf4f000</span><span class=\"token punctuation\">]</span>\n   java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>State<span class=\"token operator\">:</span> <span class=\"token function\">WAITING</span> <span class=\"token punctuation\">(</span>on object monitor<span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>Native Method<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> waiting on <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d7284470</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>Reference$Lock<span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">503</span><span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>Reference$ReferenceHandler<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>Reference<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">133</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> locked <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d7284470</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>Reference$Lock<span class=\"token punctuation\">)</span>\n\n<span class=\"token string\">\"main\"</span> prio<span class=\"token operator\">=</span><span class=\"token number\">6</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000238e800</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xc940</span> runnable <span class=\"token punctuation\">[</span><span class=\"token number\">0x00000000027af000</span><span class=\"token punctuation\">]</span>\n   java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span>State<span class=\"token operator\">:</span> RUNNABLE\n    at org<span class=\"token punctuation\">.</span>ccgogoing<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">.</span>stacktrace<span class=\"token punctuation\">.</span>MyTest<span class=\"token punctuation\">.</span><span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span>MyTest<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> locked <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d77d50c8</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span>\n    at org<span class=\"token punctuation\">.</span>ccgogoing<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">.</span>stacktrace<span class=\"token punctuation\">.</span>MyTest<span class=\"token punctuation\">.</span><span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>MyTest<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> locked <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d77d50b8</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span>\n    at org<span class=\"token punctuation\">.</span>ccgogoing<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">.</span>stacktrace<span class=\"token punctuation\">.</span>MyTest<span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span>MyTest<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token string\">\"VM Thread\"</span> prio<span class=\"token operator\">=</span><span class=\"token number\">10</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000ace1000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xd0a8</span> runnable \n\n<span class=\"token string\">\"GC task thread#0 (ParallelGC)\"</span> prio<span class=\"token operator\">=</span><span class=\"token number\">6</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x00000000023a4000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xd398</span> runnable \n\n<span class=\"token string\">\"GC task thread#1 (ParallelGC)\"</span> prio<span class=\"token operator\">=</span><span class=\"token number\">6</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x00000000023a5800</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xcc20</span> runnable \n\n<span class=\"token string\">\"GC task thread#2 (ParallelGC)\"</span> prio<span class=\"token operator\">=</span><span class=\"token number\">6</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x00000000023a7000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xb914</span> runnable \n\n<span class=\"token string\">\"GC task thread#3 (ParallelGC)\"</span> prio<span class=\"token operator\">=</span><span class=\"token number\">6</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x00000000023a9000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xd088</span> runnable \n\n<span class=\"token string\">\"VM Periodic Task Thread\"</span> prio<span class=\"token operator\">=</span><span class=\"token number\">10</span> tid<span class=\"token operator\">=</span><span class=\"token number\">0x000000000c53f000</span> nid<span class=\"token operator\">=</span><span class=\"token number\">0xc1b4</span> waiting on condition \n\nJNI global references<span class=\"token operator\">:</span> <span class=\"token number\">138</span>\n\nHeap\n PSYoungGen      total 36864K<span class=\"token punctuation\">,</span> used 6376K <span class=\"token punctuation\">[</span><span class=\"token number\">0x00000000d7280000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00000000d9b80000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0000000100000000</span><span class=\"token punctuation\">)</span>\n  eden space 31744K<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token operator\">%</span> used <span class=\"token punctuation\">[</span><span class=\"token number\">0x00000000d7280000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000d78ba0d0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000d9180000</span><span class=\"token punctuation\">)</span>\n  from space 5120K<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">%</span> used <span class=\"token punctuation\">[</span><span class=\"token number\">0x00000000d9680000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000d9680000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000d9b80000</span><span class=\"token punctuation\">)</span>\n  to   space 5120K<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">%</span> used <span class=\"token punctuation\">[</span><span class=\"token number\">0x00000000d9180000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000d9180000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000d9680000</span><span class=\"token punctuation\">)</span>\n ParOldGen       total 83456K<span class=\"token punctuation\">,</span> used 0K <span class=\"token punctuation\">[</span><span class=\"token number\">0x0000000085800000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000008a980000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00000000d7280000</span><span class=\"token punctuation\">)</span>\n  object space 83456K<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">%</span> used <span class=\"token punctuation\">[</span><span class=\"token number\">0x0000000085800000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0000000085800000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x000000008a980000</span><span class=\"token punctuation\">)</span>\n PSPermGen       total 21504K<span class=\"token punctuation\">,</span> used 3300K <span class=\"token punctuation\">[</span><span class=\"token number\">0x0000000080600000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0000000081b00000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0000000085800000</span><span class=\"token punctuation\">)</span>\n  object space 21504K<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token operator\">%</span> used <span class=\"token punctuation\">[</span><span class=\"token number\">0x0000000080600000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0000000080939290</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0000000081b00000</span><span class=\"token punctuation\">)</span></code></pre>\n<p>在上面这段堆栈输出中，可以看到有很多后台线程和main线程，其中只有main线程属于Java用户线程，其他几个都是虚拟机自动创建的，我们分析的过程中，只关心用户线程即可。</p>\n<p>从上面的main线程中可以很直观的看到当前线程的调用上下文，其中一个线程的某一层调用含义如下：</p>\n<pre><code>at MyTest.fun1(MyTest.java:15)\n    |     |     |              |\n    |     |     |              +-----当前正在调用的函数所在的源代码文件的行号\n    |     |     +------------当前正在调用的函数所在的源代码文件\n    |     +---------------------当前正在调用的方法名\n    +---------------------------当前正在调用的类名</code></pre><p>另外，堆栈中有：<code>- locked &lt;0x00000000d77d50b8&gt; (a java.lang.Object)</code>语句，表示该线程已经占有柯锁&lt;0x00000000d77d50b8&gt;,尖括号中表示锁ID，这个事系统自动产生的，我们只需要知道每次打印的堆栈，同一个ID表示是同一个锁即可。每一个线程堆栈的第一行含义如下：</p>\n<pre><code>\"main\" prio=1 tid=0x000000000238e800 nid=0xc940 runnable [0x00000000027af000]\n    |       |   |                       |           |           |\n    |       |   |                       |           |           +--线程占用内存地址\n    |       |   |                       |           +-----------线程的状态\n    |       |   |                       +----线程对应的本地线程id号\n    |       |   +-------------------线程id\n    |       +--------------------------线程优先级\n    +-------------------------------线程名称\n\n其中需要说明的是，线程对应的本地线程id号，是指Java线程所对应的虚拟机中的本地线程。由于Java是解析型语言，执行的实体是Java虚拟机，因此Java语言中的线程是依附于虚拟机中的本地线程来运行的，实际上是本地线程在执行Java线程代码。</code></pre><h3 id=\"锁的解读\"><a href=\"#锁的解读\" class=\"headerlink\" title=\"锁的解读\"></a>锁的解读</h3><p>从上面的线程堆栈看，线程堆栈中包含的直接信息为：线程的个数，每个线程调用的方法堆栈，当前锁的状态。线程的个数可以直接数出来；线程调用的方法堆栈，从下向上看，即表示当前的线程调用了哪个类上的哪个方法。而锁得状态看起来稍微有一点技巧。与锁相关的信息如下：</p>\n<ul>\n<li>当一个线程占有一个锁的时候，线程的堆栈中会打印–locked&lt;0x00000000d77d50c8&gt;</li>\n<li>当一个线程正在等待其它线程释放该锁，线程堆栈中会打印–waiting to lock&lt;0x00000000d77d50c8&gt;</li>\n<li>当一个线程占有一个锁，但又执行到该锁的wait()方法上，线程堆栈中首先打印locked，然后又会打印–waiting on &lt;0x00000000d77d50c8&gt;</li>\n</ul>\n<h3 id=\"线程状态的解读\"><a href=\"#线程状态的解读\" class=\"headerlink\" title=\"线程状态的解读\"></a>线程状态的解读</h3><p>借助线程堆栈，可以分析很多类型的问题，CPU的消耗分析即是线程堆栈分析的一个重要内容；</p>\n<p>处于TIMED_WAITING、WAITING状态的线程一定不消耗CPU。处于RUNNABLE的线程，要结合当前代码的性质判断，是否消耗CPU。</p>\n<ul>\n<li>如果是纯Java运算代码，则消耗CPU。</li>\n<li>如果是网络IO，很少消耗CPU。</li>\n<li>如果是本地代码，要结合本地代码的性质判断（可以通过pstack、gstack获取本地线程堆栈），如果是纯运算代码，则消耗CPU，如果被挂起，则不消耗CPU，如果是IO，则不怎么消耗CPU。</li>\n</ul>\n<h3 id=\"如何借助线程堆栈分析问题\"><a href=\"#如何借助线程堆栈分析问题\" class=\"headerlink\" title=\"如何借助线程堆栈分析问题\"></a>如何借助线程堆栈分析问题</h3><p><strong>线程堆栈在定位如下类型的问题上非常有帮助：</strong></p>\n<ul>\n<li>线程死锁的分析</li>\n<li>Java代码导致的CPU过高分析</li>\n<li>死循环分析</li>\n<li>资源不足分析</li>\n<li>性能瓶颈分析</li>\n</ul>\n<h4 id=\"线程死锁分析\"><a href=\"#线程死锁分析\" class=\"headerlink\" title=\"线程死锁分析\"></a>线程死锁分析</h4><p>死锁的概念就不做过多解释了，不明白的可以去网上查查；</p>\n<p>两个或超过两个线程因为环路的锁依赖关系而形成的锁环，就形成了真正的死锁，如下为死锁喉打印的堆栈：</p>\n<pre class=\" language-java\"><code class=\"language-java\">Found one Java<span class=\"token operator\">-</span>level deadlock<span class=\"token operator\">:</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token string\">\"org.ccgogoing.study.stacktrace.deadlock.TestThread2\"</span><span class=\"token operator\">:</span>\n  waiting to lock monitor <span class=\"token function\">0x000000000a9ad118</span> <span class=\"token punctuation\">(</span>object <span class=\"token number\">0x00000000d77363d0</span><span class=\"token punctuation\">,</span> a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  which is held by <span class=\"token string\">\"org.ccgogoing.study.stacktrace.deadlock.TestThread1\"</span>\n<span class=\"token string\">\"org.ccgogoing.study.stacktrace.deadlock.TestThread1\"</span><span class=\"token operator\">:</span>\n  waiting to lock monitor <span class=\"token function\">0x000000000a9abc78</span> <span class=\"token punctuation\">(</span>object <span class=\"token number\">0x00000000d77363e0</span><span class=\"token punctuation\">,</span> a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  which is held by <span class=\"token string\">\"org.ccgogoing.study.stacktrace.deadlock.TestThread2\"</span>\n\nJava stack information <span class=\"token keyword\">for</span> the threads listed above<span class=\"token operator\">:</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token string\">\"org.ccgogoing.study.stacktrace.deadlock.TestThread2\"</span><span class=\"token operator\">:</span>\n    at org<span class=\"token punctuation\">.</span>ccgogoing<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">.</span>stacktrace<span class=\"token punctuation\">.</span>deadlock<span class=\"token punctuation\">.</span>TestThread2<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>TestThread2<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> waiting to lock <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d77363d0</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> locked <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d77363e0</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span>\n    at org<span class=\"token punctuation\">.</span>ccgogoing<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">.</span>stacktrace<span class=\"token punctuation\">.</span>deadlock<span class=\"token punctuation\">.</span>TestThread2<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>TestThread2<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"org.ccgogoing.study.stacktrace.deadlock.TestThread1\"</span><span class=\"token operator\">:</span>\n    at org<span class=\"token punctuation\">.</span>ccgogoing<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">.</span>stacktrace<span class=\"token punctuation\">.</span>deadlock<span class=\"token punctuation\">.</span>TestThread1<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>TestThread1<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> waiting to lock <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d77363e0</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span> locked <span class=\"token operator\">&lt;</span><span class=\"token number\">0x00000000d77363d0</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>a java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span>\n    at org<span class=\"token punctuation\">.</span>ccgogoing<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">.</span>stacktrace<span class=\"token punctuation\">.</span>deadlock<span class=\"token punctuation\">.</span>TestThread1<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>TestThread1<span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\nFound <span class=\"token number\">1</span> deadlock<span class=\"token punctuation\">.</span></code></pre>\n<p>从打印的堆栈中我们能看到”Found one Java-level deadlock:”,即如果存在死锁情况,堆栈中会直接给出死锁的分析结果.</p>\n<p>当一组Java线程发生死锁的时候,那么意味着Game Over,这些线程永远得被挂在那里了,永远不可能继续运行下去。当发生死锁的线程在执行系统的关键功能时，那么这个死锁可能会导致整个系统瘫痪，要想恢复系统，临时也是唯一的规避方法是<em>将系统重启。然后赶快去修改导致这个死锁的Bug。</em></p>\n<p>注意：死锁的两个或多个线程是不消耗CPU的，有的人认为CPU100%的使用率是线程死锁导致的，这个说法是完全错误的。死循环，并且在循环中代码都是CPU密集型，才有可能导致CPU的100%使用率，像socket或者数据库等IO操作是不怎么消耗CPU的。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>不知觉间工作已有一年了，闲下来的时候总会思考下，作为一名Java程序员，不能一直停留在开发业务使用框架上面。老话说得好，机会是留给有准备的人的，因此，开始计划看一些Java底层一点的东西，尝试开始在学习的过程中写博客，希望和大家一起交流学习。</p>\n</blockquote>\n<p>写在前面： 线程堆栈应该是多线程类应用程序非功能问题定位的最有效手段，可以说是杀手锏。线程堆栈最擅长与分析如下类型问题：</p>\n<ul>\n<li>系统无缘无故CPU过高。</li>\n<li>系统挂起，无响应。</li>\n<li>系统运行越来越慢。</li>\n<li>性能瓶颈（如无法充分利用CPU等）</li>\n<li>线程死锁、死循环，饿死等。</li>\n<li>由于线程数量太多导致系统失败（如无法创建线程等）。</li>\n</ul>\n<h2 id=\"如何解读线程堆栈\"><a href=\"#如何解读线程堆栈\" class=\"headerlink\" title=\"如何解读线程堆栈\"></a>如何解读线程堆栈</h2><p>如下面一段Java源代码程序：</p>\n<pre><code class=\"java\">package org.ccgogoing.study.stacktrace;\n/** \n * @Author: LuoChong400\n * @Description: 测试线程\n * @Date: Create in 07:27 PM 2017/12/08\n */\npublic class MyTest {\n\n        Object obj1 = new Object();\n        Object obj2 = new Object();\n\n        public void fun1() {\n            synchronized (obj1) {\n                fun2();\n            }\n        }\n        public void fun2() {\n            synchronized (obj2) {\n                while (true) { //为了打印堆栈，该函数堆栈分析不退出\n                    System.out.print(&quot;&quot;);\n                }\n            }\n        }\n        public static void main(String[] args) {\n            MyTest aa = new MyTest();\n            aa.fun1();\n        }\n    }</code></pre>\n<p>在Idea 中运行该程序，然后按下CTRL+BREAK键，打印出线程堆栈信息如下：</p>\n<pre><code class=\"java\">Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.79-b02 mixed mode):\n\n&quot;Service Thread&quot; daemon prio=6 tid=0x000000000c53b000 nid=0xca58 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n&quot;C2 CompilerThread1&quot; daemon prio=10 tid=0x000000000c516000 nid=0xd390 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n&quot;C2 CompilerThread0&quot; daemon prio=10 tid=0x000000000c515000 nid=0xcbac waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n&quot;Monitor Ctrl-Break&quot; daemon prio=6 tid=0x000000000c514000 nid=0xd148 runnable [0x000000000caee000]\n   java.lang.Thread.State: RUNNABLE\n    at java.net.SocketInputStream.socketRead0(Native Method)\n    at java.net.SocketInputStream.read(SocketInputStream.java:152)\n    at java.net.SocketInputStream.read(SocketInputStream.java:122)\n    at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)\n    at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)\n    at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)\n    - locked &lt;0x00000000d7858b50&gt; (a java.io.InputStreamReader)\n    at java.io.InputStreamReader.read(InputStreamReader.java:184)\n    at java.io.BufferedReader.fill(BufferedReader.java:154)\n    at java.io.BufferedReader.readLine(BufferedReader.java:317)\n    - locked &lt;0x00000000d7858b50&gt; (a java.io.InputStreamReader)\n    at java.io.BufferedReader.readLine(BufferedReader.java:382)\n    at com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:64)\n\n&quot;Attach Listener&quot; daemon prio=10 tid=0x000000000ad4a000 nid=0xd24c runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n&quot;Signal Dispatcher&quot; daemon prio=10 tid=0x000000000c1a8800 nid=0xd200 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n&quot;Finalizer&quot; daemon prio=8 tid=0x000000000ace6000 nid=0xcd74 in Object.wait() [0x000000000c13f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n    - waiting on &lt;0x00000000d7284858&gt; (a java.lang.ref.ReferenceQueue$Lock)\n    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)\n    - locked &lt;0x00000000d7284858&gt; (a java.lang.ref.ReferenceQueue$Lock)\n    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)\n    at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\n\n&quot;Reference Handler&quot; daemon prio=10 tid=0x000000000ace4800 nid=0xce34 in Object.wait() [0x000000000bf4f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n    - waiting on &lt;0x00000000d7284470&gt; (a java.lang.ref.Reference$Lock)\n    at java.lang.Object.wait(Object.java:503)\n    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)\n    - locked &lt;0x00000000d7284470&gt; (a java.lang.ref.Reference$Lock)\n\n&quot;main&quot; prio=6 tid=0x000000000238e800 nid=0xc940 runnable [0x00000000027af000]\n   java.lang.Thread.State: RUNNABLE\n    at org.ccgogoing.study.stacktrace.MyTest.fun2(MyTest.java:22)\n    - locked &lt;0x00000000d77d50c8&gt; (a java.lang.Object)\n    at org.ccgogoing.study.stacktrace.MyTest.fun1(MyTest.java:15)\n    - locked &lt;0x00000000d77d50b8&gt; (a java.lang.Object)\n    at org.ccgogoing.study.stacktrace.MyTest.main(MyTest.java:29)\n\n&quot;VM Thread&quot; prio=10 tid=0x000000000ace1000 nid=0xd0a8 runnable \n\n&quot;GC task thread#0 (ParallelGC)&quot; prio=6 tid=0x00000000023a4000 nid=0xd398 runnable \n\n&quot;GC task thread#1 (ParallelGC)&quot; prio=6 tid=0x00000000023a5800 nid=0xcc20 runnable \n\n&quot;GC task thread#2 (ParallelGC)&quot; prio=6 tid=0x00000000023a7000 nid=0xb914 runnable \n\n&quot;GC task thread#3 (ParallelGC)&quot; prio=6 tid=0x00000000023a9000 nid=0xd088 runnable \n\n&quot;VM Periodic Task Thread&quot; prio=10 tid=0x000000000c53f000 nid=0xc1b4 waiting on condition \n\nJNI global references: 138\n\nHeap\n PSYoungGen      total 36864K, used 6376K [0x00000000d7280000, 0x00000000d9b80000, 0x0000000100000000)\n  eden space 31744K, 20% used [0x00000000d7280000,0x00000000d78ba0d0,0x00000000d9180000)\n  from space 5120K, 0% used [0x00000000d9680000,0x00000000d9680000,0x00000000d9b80000)\n  to   space 5120K, 0% used [0x00000000d9180000,0x00000000d9180000,0x00000000d9680000)\n ParOldGen       total 83456K, used 0K [0x0000000085800000, 0x000000008a980000, 0x00000000d7280000)\n  object space 83456K, 0% used [0x0000000085800000,0x0000000085800000,0x000000008a980000)\n PSPermGen       total 21504K, used 3300K [0x0000000080600000, 0x0000000081b00000, 0x0000000085800000)\n  object space 21504K, 15% used [0x0000000080600000,0x0000000080939290,0x0000000081b00000)</code></pre>\n<p>在上面这段堆栈输出中，可以看到有很多后台线程和main线程，其中只有main线程属于Java用户线程，其他几个都是虚拟机自动创建的，我们分析的过程中，只关心用户线程即可。</p>\n<p>从上面的main线程中可以很直观的看到当前线程的调用上下文，其中一个线程的某一层调用含义如下：</p>\n<pre><code>at MyTest.fun1(MyTest.java:15)\n    |     |     |              |\n    |     |     |              +-----当前正在调用的函数所在的源代码文件的行号\n    |     |     +------------当前正在调用的函数所在的源代码文件\n    |     +---------------------当前正在调用的方法名\n    +---------------------------当前正在调用的类名</code></pre><p>另外，堆栈中有：<code>- locked &lt;0x00000000d77d50b8&gt; (a java.lang.Object)</code>语句，表示该线程已经占有柯锁&lt;0x00000000d77d50b8&gt;,尖括号中表示锁ID，这个事系统自动产生的，我们只需要知道每次打印的堆栈，同一个ID表示是同一个锁即可。每一个线程堆栈的第一行含义如下：</p>\n<pre><code>&quot;main&quot; prio=1 tid=0x000000000238e800 nid=0xc940 runnable [0x00000000027af000]\n    |       |   |                       |           |           |\n    |       |   |                       |           |           +--线程占用内存地址\n    |       |   |                       |           +-----------线程的状态\n    |       |   |                       +----线程对应的本地线程id号\n    |       |   +-------------------线程id\n    |       +--------------------------线程优先级\n    +-------------------------------线程名称\n\n其中需要说明的是，线程对应的本地线程id号，是指Java线程所对应的虚拟机中的本地线程。由于Java是解析型语言，执行的实体是Java虚拟机，因此Java语言中的线程是依附于虚拟机中的本地线程来运行的，实际上是本地线程在执行Java线程代码。</code></pre><h3 id=\"锁的解读\"><a href=\"#锁的解读\" class=\"headerlink\" title=\"锁的解读\"></a>锁的解读</h3><p>从上面的线程堆栈看，线程堆栈中包含的直接信息为：线程的个数，每个线程调用的方法堆栈，当前锁的状态。线程的个数可以直接数出来；线程调用的方法堆栈，从下向上看，即表示当前的线程调用了哪个类上的哪个方法。而锁得状态看起来稍微有一点技巧。与锁相关的信息如下：</p>\n<ul>\n<li>当一个线程占有一个锁的时候，线程的堆栈中会打印–locked&lt;0x00000000d77d50c8&gt;</li>\n<li>当一个线程正在等待其它线程释放该锁，线程堆栈中会打印–waiting to lock&lt;0x00000000d77d50c8&gt;</li>\n<li>当一个线程占有一个锁，但又执行到该锁的wait()方法上，线程堆栈中首先打印locked，然后又会打印–waiting on &lt;0x00000000d77d50c8&gt;</li>\n</ul>\n<h3 id=\"线程状态的解读\"><a href=\"#线程状态的解读\" class=\"headerlink\" title=\"线程状态的解读\"></a>线程状态的解读</h3><p>借助线程堆栈，可以分析很多类型的问题，CPU的消耗分析即是线程堆栈分析的一个重要内容；</p>\n<p>处于TIMED_WAITING、WAITING状态的线程一定不消耗CPU。处于RUNNABLE的线程，要结合当前代码的性质判断，是否消耗CPU。</p>\n<ul>\n<li>如果是纯Java运算代码，则消耗CPU。</li>\n<li>如果是网络IO，很少消耗CPU。</li>\n<li>如果是本地代码，要结合本地代码的性质判断（可以通过pstack、gstack获取本地线程堆栈），如果是纯运算代码，则消耗CPU，如果被挂起，则不消耗CPU，如果是IO，则不怎么消耗CPU。</li>\n</ul>\n<h3 id=\"如何借助线程堆栈分析问题\"><a href=\"#如何借助线程堆栈分析问题\" class=\"headerlink\" title=\"如何借助线程堆栈分析问题\"></a>如何借助线程堆栈分析问题</h3><p><strong>线程堆栈在定位如下类型的问题上非常有帮助：</strong></p>\n<ul>\n<li>线程死锁的分析</li>\n<li>Java代码导致的CPU过高分析</li>\n<li>死循环分析</li>\n<li>资源不足分析</li>\n<li>性能瓶颈分析</li>\n</ul>\n<h4 id=\"线程死锁分析\"><a href=\"#线程死锁分析\" class=\"headerlink\" title=\"线程死锁分析\"></a>线程死锁分析</h4><p>死锁的概念就不做过多解释了，不明白的可以去网上查查；</p>\n<p>两个或超过两个线程因为环路的锁依赖关系而形成的锁环，就形成了真正的死锁，如下为死锁喉打印的堆栈：</p>\n<pre><code class=\"java\">Found one Java-level deadlock:\n=============================\n&quot;org.ccgogoing.study.stacktrace.deadlock.TestThread2&quot;:\n  waiting to lock monitor 0x000000000a9ad118 (object 0x00000000d77363d0, a java.lang.Object),\n  which is held by &quot;org.ccgogoing.study.stacktrace.deadlock.TestThread1&quot;\n&quot;org.ccgogoing.study.stacktrace.deadlock.TestThread1&quot;:\n  waiting to lock monitor 0x000000000a9abc78 (object 0x00000000d77363e0, a java.lang.Object),\n  which is held by &quot;org.ccgogoing.study.stacktrace.deadlock.TestThread2&quot;\n\nJava stack information for the threads listed above:\n===================================================\n&quot;org.ccgogoing.study.stacktrace.deadlock.TestThread2&quot;:\n    at org.ccgogoing.study.stacktrace.deadlock.TestThread2.fun(TestThread2.java:35)\n    - waiting to lock &lt;0x00000000d77363d0&gt; (a java.lang.Object)\n    - locked &lt;0x00000000d77363e0&gt; (a java.lang.Object)\n    at org.ccgogoing.study.stacktrace.deadlock.TestThread2.run(TestThread2.java:22)\n&quot;org.ccgogoing.study.stacktrace.deadlock.TestThread1&quot;:\n    at org.ccgogoing.study.stacktrace.deadlock.TestThread1.fun(TestThread1.java:33)\n    - waiting to lock &lt;0x00000000d77363e0&gt; (a java.lang.Object)\n    - locked &lt;0x00000000d77363d0&gt; (a java.lang.Object)\n    at org.ccgogoing.study.stacktrace.deadlock.TestThread1.run(TestThread1.java:20)\n\nFound 1 deadlock.</code></pre>\n<p>从打印的堆栈中我们能看到”Found one Java-level deadlock:”,即如果存在死锁情况,堆栈中会直接给出死锁的分析结果.</p>\n<p>当一组Java线程发生死锁的时候,那么意味着Game Over,这些线程永远得被挂在那里了,永远不可能继续运行下去。当发生死锁的线程在执行系统的关键功能时，那么这个死锁可能会导致整个系统瘫痪，要想恢复系统，临时也是唯一的规避方法是<em>将系统重启。然后赶快去修改导致这个死锁的Bug。</em></p>\n<p>注意：死锁的两个或多个线程是不消耗CPU的，有的人认为CPU100%的使用率是线程死锁导致的，这个说法是完全错误的。死循环，并且在循环中代码都是CPU密集型，才有可能导致CPU的100%使用率，像socket或者数据库等IO操作是不怎么消耗CPU的。</p>\n"},{"title":"Mybatis源码分析","date":"2019-07-27T02:18:30.000Z","cover":true,"author":"coderluo","_content":"\n\n\n> 这篇文章我们来深入阅读下Mybatis的源码，希望以后可以对底层框架不那么畏惧，学习框架设计中好的思想；\n\n\n\n## 架构原理\n\n\n\n### 架构图\n\n\n\n![](http://media.coderluo.top/计算机系统漫游/6sf4i.png)\n\n\n\n### 架构流程图\n\n![架构流程图](http://media.coderluo.top/计算机系统漫游/mwc26.png)\n\n\n\n上面这两幅图来源于网络，不过画的很好，基本说明了Mybatis的架构流程。\n\n\n\n说明：\n\n1. Mybatis配置文件\n\n   - SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。\n\n   - Mapper.xml，此文件作为mybatis的sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在 \n\n   SqlMapConfig.xml中加载。\n\n2. SqlSessionFactory\n\n   - 通过mybatis环境等配置信息构造SqlSessionFactory，即会话工厂。\n\n3. SqlSession\n\n   - 通过会话工厂创建sqlSession即会话，程序员通过sqlsession会话接口对数据库进行增删改查操作。\n\n4. Executor执行器\n\n   - mybatis底层自定义了Executor执行器接口来具体操作数据库，Executor接口有两个实现，一个是基本执行器 \n\n   （默认）、一个是缓存执行器，sqlsession底层是通过executor接口操作数据库的。\n\n5. MappedStatement\n\n   - 它也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个 \n\n   select\\insert\\update\\delete标签对应一个Mapped Statement对象，select\\insert\\update\\delete \n\n   标签的id即是Mapped statement的id。\n\n   - Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped \n\n   Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对\n\n\n\n### 调用流程图\n\n![结构](http://media.coderluo.top/计算机系统漫游/bwkyg.png)\n\n\n\n**Executor**\n\n​\tMyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护\n\n**StatementHandler**\n\n​\t封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集 \n\n合。\n\n**ParameterHandler**\n\n​\t负责对用户传递的参数转换成JDBC Statement 所需要的参数\n\n**ResultSetHandler**\n\n​\t负责将JDBC返回的ResultSet结果集对象转换成List类型的集合\n\n**TypeHandler**\n\n​\t负责java数据类型和jdbc数据类型之间的映射和转换\n\n**SqlSource**\n\n​\t负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回BoundSql表 \n\n示动态生成的SQL语句以及相应的参数信息\n\n\n\n\n\n## 源码解析\n\n\n\n### 加载全局配置文件\n\n- 找入口：SqlSessionFactoryBuilder#build方法\n\n\n\n```\nSqlSessionFactoryBuilder#build 构建SqlSessionFactory\n\n\tXMLConfigBuilder#parse 全局配置文件解析，封装成Configuration对象\n\n\t\t#parseConfiguration 从根路径开始解析，加载的信息设置到Configuration对象中\n\n\t\t\t#mapperElement 解析mapper映射文件\n\n\t\t\t\tXMLMapperBuilder#parse 具体解析mapper映射文件\n\n\t\t\t\t\tSqlSessionFactoryBuilder#build：创建SqlSessionFactory接口的默认实现类\n\n```\n\n\n\n\n\n- 总结\n\n```java\n1.SqlSessionFactoryBuilder创建SqlsessionFactory时，需要传入一个Configuration对象。 \n2.XMLConfigBuilder对象会去实例化Configuration。 \n3.XMLConfigBuilder对象会去初始化Configuration对象。 \n\t通过XPathParser去解析全局配置文件，形成Document对象 \n\t通过XPathParser去获取指定节点的XNode对象。 \n\t解析Xnode对象的信息，然后封装到Configuration对象中\n```\n\n- 相关类和接口\n\n```java\n|--SqlSessionFactoryBuilder \n|--XMLConfigBuilder \n|--XPathParser \n|--Configuration\n```\n\n\n\n\n\n### 加载映射配置文件\n\n- 找入口：XMLConfigBuilder#mapperElement方法\n\n\n\n```java\nXMLConfigBuilder#mapperElement:解析全局配置文件中的<mappers>标签 \n\t|--XMLMapperBuilder#构造方法：专门用来解析映射文件的 \n\t\t|--XPathParser#构造方法： \n\t\t\t|--XPathParser#createDocument()：创建Mapper映射文件对应的Document对象 \n\t\t\t|--MapperBuilderAssistant#构造方法：用于构建MappedStatement对象的 \n\t\t|--XMLMapperBuilder#parse()： \n\t\t\t|--XMLMapperBuilder#configurationElement：专门用来解析mapper映射文件 \n\t\t\t\t|--XMLMapperBuilder#buildStatementFromContext：用来创建MappedStatement对象的 \n\t\t\t\t\t|--XMLMapperBuilder#buildStatementFromContext \n\t\t\t\t\t\t|--XMLStatementBuilder#构造方法：专门用来解析MappedStatement \n\t\t\t\t\t\t|--XMLStatementBuilder#parseStatementNode: \n\t\t\t\t\t\t\t|--MapperBuilderAssistant#addMappedStatement:创建 MappedStatement对象 \n\t\t\t\t\t\t\t\t|--MappedStatement.Builder#构造方法 \n\t\t\t\t\t\t\t\t|--MappedStatement.Builder#build方法：创建MappedStatement对象，并存储 到Configuration对象中\n```\n\n\n\n- 相关接口和类\n\n```java\n|--XMLConfigBuilder \n|--XMLMapperBuilder \n|--XPathParser \n|--MapperBuilderAssistant \n|--XMLStatementBuilder \n|--MappedStatement\n```\n\n\n\n\n\n### SqlSource创建流程\n\n\n\n- 找入口：XMLLanguageDriver#createSqlSource\n\n\n\n```java\nXMLLanguageDriver#createSqlSource 创建SqlSource，解析SQL，封装SQL语句（出参数绑定）和入参信息\n\n​\tXMLScriptBuilder 构造函数：初始化动态SQL中的节点处理器集合\n​\t\tXMLScriptBuilder#parseScriptNode \n​\t\t\t#parseDynamicTags 解析select\\insert\\ update\\delete标签中的SQL语句，最终将解析到的SqlNode封装到MixedSqlNode中的List集合中\n​\t\t\tDynamicSqlSource 构造方法：如果SQL中包含${}和动态SQL语句，则将SqlNode封装到DynamicSqlSource\n​\t\t\tRawSqlSource 构造方法：如果SQL中包含#{}，则将SqlNode封装到RawSqlSource中，并指定parameterType\n​\t\t\t\tSqlSourceBuilder#parse\n​\t\t\t\t\tParameterMappingTokenHandler 构造方法\n​\t\t\t\t\t\tGenericTokenParser#构造方法,指定待分析的openToken和closeToken并指定处理器\n​\t\t\t\t\t\t\tGenericTokenParser#parse 解析#{}\n​\t\t\t\t\t\t\t\tParameterMappingTokenHandler#handleToken  处理token（#{}/${}）\n​\t\t\t\t\t\t\t\t\t#buildParameterMapping 创建ParameterMapping对象\n​\t\t\t\t\t\t\t\tStaticSqlSource 构造方法，将解析之后的sql信息，封装到StaticSqlSource 对象\n```\n\n\n\n- 相关类和接口\n\n```java\n|--XMLLanguageDriver \n|--XMLScriptBuilder \n|--SqlSource \n|--SqlSourceBuilder\n```\n\n\n\n\n\n### 创建Mapper代理对象\n\n- 找入口：DefaultSqlSession#getMapper\n\n\n\n```java\n|--DefaultSqlSession#getMapper：获取Mapper代理对象 \n​\t|--Configuration#getMapper：获取Mapper代理对象 \n​\t\t|--MapperRegistry#getMapper：通过代理对象工厂，获取代理对象 \n​\t\t\t|--MapperProxyFactory#newInstance：调用JDK的动态代理方式，创建Mapper代理\n```\n\n\n\n### SqlSession执行主流程\n\n- 找入口：DefaultSqlSession#selectList()\n\n\n\n```java\nDefaultSqlSession#selectList\n​\tCachingExecutor#query\n​\t\tBaseExecutor#query 委托给BaseExecutor执行\n​\t\t\t#queryFromDatabase\n​\t\t\tSimpleExecutor#doQuery  执行查询\n​\t\t\t\tConfiguration#newStatementHandler  创建路由功能的StatementHandler，根据MappedStatement中的StatementType\n​\t\t\tSimpleExecutor#prepareStatement  设置PreapreStatement 的参数\n​\t\t\tBaseExecutor#getConnection 获取数据库连接\n​\t\t\t\tBaseStatementHandler#prepare 创建Statement PrepareStatement、Statement、CallableStatement）\n​\t\t\t\tPreparedStatementHandler#parameterize 设置参数\n​\t\t\t\tPreparedStatementHandler#query 执行SQL语句（已经设置过参数），并且映射结果集\n​\t\t\t\t\tcom.mysql.jdbc.PreparedStatement#execute 调用JDBC的api执行Statement\n​\t\t\t\t\t\tDefaultResultSetHandler#handleResultSets  处理结果集\n```\n\n\n\n- 相关接口和类\n\n```java\n|--DefaultSqlSession \n|--Executor \n\t|--CachingExecutor \n\t|--BaseExecutor \n\t|--SimpleExecutor \n|--StatementHandler \n\t|--RoutingStatementHandler \n\t|--PreparedStatementHandler \n|--ResultSetHandler \n\t|--DefaultResultSetHandler \n```\n\n​\t\t\t\t\t\n\n### BoundSql获取流程\n\n- **找入口：MappedStatement#getBoundSql方法**\n\n```java\nMappedStatement#getBoundSql\n​\tDynamicSqlSource#getBoundSql \n​\t\tSqlSourceBuilder#parse 执行解析：将带有#{}的SQL语句进行解析，然后封装到StaticSqlSource中\n​\t\t\tGenericTokenParser  #构造方法，指定待分析的openToken和closeToken，并指定处理器\n​\t\t\t\tGenericTokenParser#parse 解析SQL语句，处理openToken和closeToken中的内容 \n​\t\t\t\t\tParameterMappingTokenHandler#handleToken 处理token（#{}/${}）  \n​\t\t\t\t\t\t#buildParameterMapping  创建 ParameterMapping对象\n​\t\t\t\t\t\t\tStaticSqlSource#构造方法 ： 将解析之后的SQL信息，封装到StaticSqlSource\n|--RawSqlSource#getBoundSql \n​\t|--StaticSqlSource#getBoundSql \n​\t\t|--BoundSql#构造方法：将解析后的sql信息、参数映射信息、入参对象组合到BoundSql对象中 \n```\n\n\n\n### 参数映射流程\n\n- 找入口： 其实就是SqlSession执行流程中的 PreparedStatementHandler#parameterize \n\n```\n\n|--PreparedStatementHandler#parameterize：设置PreparedStatement的参数 \n​\t|--DefaultParameterHandler#setParameters：设置参数 \n​\t\t|--BaseTypeHandler#setParameter： \n​\t\t\t|--xxxTypeHandler#setNonNullParameter:调用PreparedStatement的setxxx方法\n```\n\n\n\n\n\n### 处理结果集\n\n\n\n- 找入口：其实就是SqlSession执行流程中的 DefaultResultSetHandler#handleResultSets\n\n\n\n```\n|--DefaultResultSetHandler#handleResultSets \n​\t|--DefaultResultSetHandler#handleResultSet \n​\t\t|--DefaultResultSetHandler#handleRowValues \n​\t\t\t|--DefaultResultSetHandler#handleRowValuesForSimpleResultMap \n​\t\t\t\t|--DefaultResultSetHandler#getRowValue \n​\t\t\t\t\t|--DefaultResultSetHandler#createResultObject：创建映射结果对象 \n​\t\t\t\t\t|--DefaultResultSetHandler#applyAutomaticMappings \n​\t\t\t\t\t|--DefaultResultSetHandler#applyPropertyMappings \n```\n\n\n\n基本上Mybatis的流程就是这样了，其中还有很多实现细节暂时看不太懂。 我认为学习框架源码分为两步：\n\n1. 抓住主线，掌握框架的原理和流程；\n2. 理解了处理思路之后，再去理解面向对象思想和设计模式的用法；\n\n目前第一步尚有问题，需要多走几遍源码，加深下理解，一起加油~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/java/MyBatis源码分析.md","raw":"---\ntitle: Mybatis源码分析\ntags:\n  - Mybatis\ndate: 2019-07-27 10:18:30\ncategories:\n  - 源码阅读\ncover: true\nauthor: coderluo\n\n---\n\n\n\n> 这篇文章我们来深入阅读下Mybatis的源码，希望以后可以对底层框架不那么畏惧，学习框架设计中好的思想；\n\n\n\n## 架构原理\n\n\n\n### 架构图\n\n\n\n![](http://media.coderluo.top/计算机系统漫游/6sf4i.png)\n\n\n\n### 架构流程图\n\n![架构流程图](http://media.coderluo.top/计算机系统漫游/mwc26.png)\n\n\n\n上面这两幅图来源于网络，不过画的很好，基本说明了Mybatis的架构流程。\n\n\n\n说明：\n\n1. Mybatis配置文件\n\n   - SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。\n\n   - Mapper.xml，此文件作为mybatis的sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在 \n\n   SqlMapConfig.xml中加载。\n\n2. SqlSessionFactory\n\n   - 通过mybatis环境等配置信息构造SqlSessionFactory，即会话工厂。\n\n3. SqlSession\n\n   - 通过会话工厂创建sqlSession即会话，程序员通过sqlsession会话接口对数据库进行增删改查操作。\n\n4. Executor执行器\n\n   - mybatis底层自定义了Executor执行器接口来具体操作数据库，Executor接口有两个实现，一个是基本执行器 \n\n   （默认）、一个是缓存执行器，sqlsession底层是通过executor接口操作数据库的。\n\n5. MappedStatement\n\n   - 它也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个 \n\n   select\\insert\\update\\delete标签对应一个Mapped Statement对象，select\\insert\\update\\delete \n\n   标签的id即是Mapped statement的id。\n\n   - Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped \n\n   Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对\n\n\n\n### 调用流程图\n\n![结构](http://media.coderluo.top/计算机系统漫游/bwkyg.png)\n\n\n\n**Executor**\n\n​\tMyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护\n\n**StatementHandler**\n\n​\t封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集 \n\n合。\n\n**ParameterHandler**\n\n​\t负责对用户传递的参数转换成JDBC Statement 所需要的参数\n\n**ResultSetHandler**\n\n​\t负责将JDBC返回的ResultSet结果集对象转换成List类型的集合\n\n**TypeHandler**\n\n​\t负责java数据类型和jdbc数据类型之间的映射和转换\n\n**SqlSource**\n\n​\t负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回BoundSql表 \n\n示动态生成的SQL语句以及相应的参数信息\n\n\n\n\n\n## 源码解析\n\n\n\n### 加载全局配置文件\n\n- 找入口：SqlSessionFactoryBuilder#build方法\n\n\n\n```\nSqlSessionFactoryBuilder#build 构建SqlSessionFactory\n\n\tXMLConfigBuilder#parse 全局配置文件解析，封装成Configuration对象\n\n\t\t#parseConfiguration 从根路径开始解析，加载的信息设置到Configuration对象中\n\n\t\t\t#mapperElement 解析mapper映射文件\n\n\t\t\t\tXMLMapperBuilder#parse 具体解析mapper映射文件\n\n\t\t\t\t\tSqlSessionFactoryBuilder#build：创建SqlSessionFactory接口的默认实现类\n\n```\n\n\n\n\n\n- 总结\n\n```java\n1.SqlSessionFactoryBuilder创建SqlsessionFactory时，需要传入一个Configuration对象。 \n2.XMLConfigBuilder对象会去实例化Configuration。 \n3.XMLConfigBuilder对象会去初始化Configuration对象。 \n\t通过XPathParser去解析全局配置文件，形成Document对象 \n\t通过XPathParser去获取指定节点的XNode对象。 \n\t解析Xnode对象的信息，然后封装到Configuration对象中\n```\n\n- 相关类和接口\n\n```java\n|--SqlSessionFactoryBuilder \n|--XMLConfigBuilder \n|--XPathParser \n|--Configuration\n```\n\n\n\n\n\n### 加载映射配置文件\n\n- 找入口：XMLConfigBuilder#mapperElement方法\n\n\n\n```java\nXMLConfigBuilder#mapperElement:解析全局配置文件中的<mappers>标签 \n\t|--XMLMapperBuilder#构造方法：专门用来解析映射文件的 \n\t\t|--XPathParser#构造方法： \n\t\t\t|--XPathParser#createDocument()：创建Mapper映射文件对应的Document对象 \n\t\t\t|--MapperBuilderAssistant#构造方法：用于构建MappedStatement对象的 \n\t\t|--XMLMapperBuilder#parse()： \n\t\t\t|--XMLMapperBuilder#configurationElement：专门用来解析mapper映射文件 \n\t\t\t\t|--XMLMapperBuilder#buildStatementFromContext：用来创建MappedStatement对象的 \n\t\t\t\t\t|--XMLMapperBuilder#buildStatementFromContext \n\t\t\t\t\t\t|--XMLStatementBuilder#构造方法：专门用来解析MappedStatement \n\t\t\t\t\t\t|--XMLStatementBuilder#parseStatementNode: \n\t\t\t\t\t\t\t|--MapperBuilderAssistant#addMappedStatement:创建 MappedStatement对象 \n\t\t\t\t\t\t\t\t|--MappedStatement.Builder#构造方法 \n\t\t\t\t\t\t\t\t|--MappedStatement.Builder#build方法：创建MappedStatement对象，并存储 到Configuration对象中\n```\n\n\n\n- 相关接口和类\n\n```java\n|--XMLConfigBuilder \n|--XMLMapperBuilder \n|--XPathParser \n|--MapperBuilderAssistant \n|--XMLStatementBuilder \n|--MappedStatement\n```\n\n\n\n\n\n### SqlSource创建流程\n\n\n\n- 找入口：XMLLanguageDriver#createSqlSource\n\n\n\n```java\nXMLLanguageDriver#createSqlSource 创建SqlSource，解析SQL，封装SQL语句（出参数绑定）和入参信息\n\n​\tXMLScriptBuilder 构造函数：初始化动态SQL中的节点处理器集合\n​\t\tXMLScriptBuilder#parseScriptNode \n​\t\t\t#parseDynamicTags 解析select\\insert\\ update\\delete标签中的SQL语句，最终将解析到的SqlNode封装到MixedSqlNode中的List集合中\n​\t\t\tDynamicSqlSource 构造方法：如果SQL中包含${}和动态SQL语句，则将SqlNode封装到DynamicSqlSource\n​\t\t\tRawSqlSource 构造方法：如果SQL中包含#{}，则将SqlNode封装到RawSqlSource中，并指定parameterType\n​\t\t\t\tSqlSourceBuilder#parse\n​\t\t\t\t\tParameterMappingTokenHandler 构造方法\n​\t\t\t\t\t\tGenericTokenParser#构造方法,指定待分析的openToken和closeToken并指定处理器\n​\t\t\t\t\t\t\tGenericTokenParser#parse 解析#{}\n​\t\t\t\t\t\t\t\tParameterMappingTokenHandler#handleToken  处理token（#{}/${}）\n​\t\t\t\t\t\t\t\t\t#buildParameterMapping 创建ParameterMapping对象\n​\t\t\t\t\t\t\t\tStaticSqlSource 构造方法，将解析之后的sql信息，封装到StaticSqlSource 对象\n```\n\n\n\n- 相关类和接口\n\n```java\n|--XMLLanguageDriver \n|--XMLScriptBuilder \n|--SqlSource \n|--SqlSourceBuilder\n```\n\n\n\n\n\n### 创建Mapper代理对象\n\n- 找入口：DefaultSqlSession#getMapper\n\n\n\n```java\n|--DefaultSqlSession#getMapper：获取Mapper代理对象 \n​\t|--Configuration#getMapper：获取Mapper代理对象 \n​\t\t|--MapperRegistry#getMapper：通过代理对象工厂，获取代理对象 \n​\t\t\t|--MapperProxyFactory#newInstance：调用JDK的动态代理方式，创建Mapper代理\n```\n\n\n\n### SqlSession执行主流程\n\n- 找入口：DefaultSqlSession#selectList()\n\n\n\n```java\nDefaultSqlSession#selectList\n​\tCachingExecutor#query\n​\t\tBaseExecutor#query 委托给BaseExecutor执行\n​\t\t\t#queryFromDatabase\n​\t\t\tSimpleExecutor#doQuery  执行查询\n​\t\t\t\tConfiguration#newStatementHandler  创建路由功能的StatementHandler，根据MappedStatement中的StatementType\n​\t\t\tSimpleExecutor#prepareStatement  设置PreapreStatement 的参数\n​\t\t\tBaseExecutor#getConnection 获取数据库连接\n​\t\t\t\tBaseStatementHandler#prepare 创建Statement PrepareStatement、Statement、CallableStatement）\n​\t\t\t\tPreparedStatementHandler#parameterize 设置参数\n​\t\t\t\tPreparedStatementHandler#query 执行SQL语句（已经设置过参数），并且映射结果集\n​\t\t\t\t\tcom.mysql.jdbc.PreparedStatement#execute 调用JDBC的api执行Statement\n​\t\t\t\t\t\tDefaultResultSetHandler#handleResultSets  处理结果集\n```\n\n\n\n- 相关接口和类\n\n```java\n|--DefaultSqlSession \n|--Executor \n\t|--CachingExecutor \n\t|--BaseExecutor \n\t|--SimpleExecutor \n|--StatementHandler \n\t|--RoutingStatementHandler \n\t|--PreparedStatementHandler \n|--ResultSetHandler \n\t|--DefaultResultSetHandler \n```\n\n​\t\t\t\t\t\n\n### BoundSql获取流程\n\n- **找入口：MappedStatement#getBoundSql方法**\n\n```java\nMappedStatement#getBoundSql\n​\tDynamicSqlSource#getBoundSql \n​\t\tSqlSourceBuilder#parse 执行解析：将带有#{}的SQL语句进行解析，然后封装到StaticSqlSource中\n​\t\t\tGenericTokenParser  #构造方法，指定待分析的openToken和closeToken，并指定处理器\n​\t\t\t\tGenericTokenParser#parse 解析SQL语句，处理openToken和closeToken中的内容 \n​\t\t\t\t\tParameterMappingTokenHandler#handleToken 处理token（#{}/${}）  \n​\t\t\t\t\t\t#buildParameterMapping  创建 ParameterMapping对象\n​\t\t\t\t\t\t\tStaticSqlSource#构造方法 ： 将解析之后的SQL信息，封装到StaticSqlSource\n|--RawSqlSource#getBoundSql \n​\t|--StaticSqlSource#getBoundSql \n​\t\t|--BoundSql#构造方法：将解析后的sql信息、参数映射信息、入参对象组合到BoundSql对象中 \n```\n\n\n\n### 参数映射流程\n\n- 找入口： 其实就是SqlSession执行流程中的 PreparedStatementHandler#parameterize \n\n```\n\n|--PreparedStatementHandler#parameterize：设置PreparedStatement的参数 \n​\t|--DefaultParameterHandler#setParameters：设置参数 \n​\t\t|--BaseTypeHandler#setParameter： \n​\t\t\t|--xxxTypeHandler#setNonNullParameter:调用PreparedStatement的setxxx方法\n```\n\n\n\n\n\n### 处理结果集\n\n\n\n- 找入口：其实就是SqlSession执行流程中的 DefaultResultSetHandler#handleResultSets\n\n\n\n```\n|--DefaultResultSetHandler#handleResultSets \n​\t|--DefaultResultSetHandler#handleResultSet \n​\t\t|--DefaultResultSetHandler#handleRowValues \n​\t\t\t|--DefaultResultSetHandler#handleRowValuesForSimpleResultMap \n​\t\t\t\t|--DefaultResultSetHandler#getRowValue \n​\t\t\t\t\t|--DefaultResultSetHandler#createResultObject：创建映射结果对象 \n​\t\t\t\t\t|--DefaultResultSetHandler#applyAutomaticMappings \n​\t\t\t\t\t|--DefaultResultSetHandler#applyPropertyMappings \n```\n\n\n\n基本上Mybatis的流程就是这样了，其中还有很多实现细节暂时看不太懂。 我认为学习框架源码分为两步：\n\n1. 抓住主线，掌握框架的原理和流程；\n2. 理解了处理思路之后，再去理解面向对象思想和设计模式的用法；\n\n目前第一步尚有问题，需要多走几遍源码，加深下理解，一起加油~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"java/MyBatis源码分析","published":1,"updated":"2019-09-28T15:35:49.253Z","_id":"ck13psdji000pcno6cbtymgxu","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>这篇文章我们来深入阅读下Mybatis的源码，希望以后可以对底层框架不那么畏惧，学习框架设计中好的思想；</p>\n</blockquote>\n<h2 id=\"架构原理\"><a href=\"#架构原理\" class=\"headerlink\" title=\"架构原理\"></a>架构原理</h2><h3 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/6sf4i.png\" alt=\"\"></p>\n<h3 id=\"架构流程图\"><a href=\"#架构流程图\" class=\"headerlink\" title=\"架构流程图\"></a>架构流程图</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/mwc26.png\" alt=\"架构流程图\"></p>\n<p>上面这两幅图来源于网络，不过画的很好，基本说明了Mybatis的架构流程。</p>\n<p>说明：</p>\n<ol>\n<li><p>Mybatis配置文件</p>\n<ul>\n<li><p>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。</p>\n</li>\n<li><p>Mapper.xml，此文件作为mybatis的sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在 </p>\n</li>\n</ul>\n<p>SqlMapConfig.xml中加载。</p>\n</li>\n<li><p>SqlSessionFactory</p>\n<ul>\n<li>通过mybatis环境等配置信息构造SqlSessionFactory，即会话工厂。</li>\n</ul>\n</li>\n<li><p>SqlSession</p>\n<ul>\n<li>通过会话工厂创建sqlSession即会话，程序员通过sqlsession会话接口对数据库进行增删改查操作。</li>\n</ul>\n</li>\n<li><p>Executor执行器</p>\n<ul>\n<li>mybatis底层自定义了Executor执行器接口来具体操作数据库，Executor接口有两个实现，一个是基本执行器 </li>\n</ul>\n<p>（默认）、一个是缓存执行器，sqlsession底层是通过executor接口操作数据库的。</p>\n</li>\n<li><p>MappedStatement</p>\n<ul>\n<li>它也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个 </li>\n</ul>\n<p>select\\insert\\update\\delete标签对应一个Mapped Statement对象，select\\insert\\update\\delete </p>\n<p>标签的id即是Mapped statement的id。</p>\n<ul>\n<li>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped </li>\n</ul>\n<p>Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对</p>\n</li>\n</ol>\n<h3 id=\"调用流程图\"><a href=\"#调用流程图\" class=\"headerlink\" title=\"调用流程图\"></a>调用流程图</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/bwkyg.png\" alt=\"结构\"></p>\n<p><strong>Executor</strong></p>\n<p>​    MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护</p>\n<p><strong>StatementHandler</strong></p>\n<p>​    封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集 </p>\n<p>合。</p>\n<p><strong>ParameterHandler</strong></p>\n<p>​    负责对用户传递的参数转换成JDBC Statement 所需要的参数</p>\n<p><strong>ResultSetHandler</strong></p>\n<p>​    负责将JDBC返回的ResultSet结果集对象转换成List类型的集合</p>\n<p><strong>TypeHandler</strong></p>\n<p>​    负责java数据类型和jdbc数据类型之间的映射和转换</p>\n<p><strong>SqlSource</strong></p>\n<p>​    负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回BoundSql表 </p>\n<p>示动态生成的SQL语句以及相应的参数信息</p>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"加载全局配置文件\"><a href=\"#加载全局配置文件\" class=\"headerlink\" title=\"加载全局配置文件\"></a>加载全局配置文件</h3><ul>\n<li>找入口：SqlSessionFactoryBuilder#build方法</li>\n</ul>\n<pre><code>SqlSessionFactoryBuilder#build 构建SqlSessionFactory\n\n    XMLConfigBuilder#parse 全局配置文件解析，封装成Configuration对象\n\n        #parseConfiguration 从根路径开始解析，加载的信息设置到Configuration对象中\n\n            #mapperElement 解析mapper映射文件\n\n                XMLMapperBuilder#parse 具体解析mapper映射文件\n\n                    SqlSessionFactoryBuilder#build：创建SqlSessionFactory接口的默认实现类\n</code></pre><ul>\n<li>总结</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>SqlSessionFactoryBuilder创建SqlsessionFactory时，需要传入一个Configuration对象。 \n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>XMLConfigBuilder对象会去实例化Configuration。 \n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>XMLConfigBuilder对象会去初始化Configuration对象。 \n    通过XPathParser去解析全局配置文件，形成Document对象 \n    通过XPathParser去获取指定节点的XNode对象。 \n    解析Xnode对象的信息，然后封装到Configuration对象中</code></pre>\n<ul>\n<li>相关类和接口</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">|</span><span class=\"token operator\">--</span>SqlSessionFactoryBuilder \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLConfigBuilder \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>XPathParser \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>Configuration</code></pre>\n<h3 id=\"加载映射配置文件\"><a href=\"#加载映射配置文件\" class=\"headerlink\" title=\"加载映射配置文件\"></a>加载映射配置文件</h3><ul>\n<li>找入口：XMLConfigBuilder#mapperElement方法</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">XMLConfigBuilder#mapperElement<span class=\"token operator\">:</span>解析全局配置文件中的<span class=\"token operator\">&lt;</span>mappers<span class=\"token operator\">&gt;</span>标签 \n    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLMapperBuilder#构造方法：专门用来解析映射文件的 \n        <span class=\"token operator\">|</span><span class=\"token operator\">--</span>XPathParser#构造方法： \n            <span class=\"token operator\">|</span><span class=\"token operator\">--</span>XPathParser#<span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：创建Mapper映射文件对应的Document对象 \n            <span class=\"token operator\">|</span><span class=\"token operator\">--</span>MapperBuilderAssistant#构造方法：用于构建MappedStatement对象的 \n        <span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLMapperBuilder#<span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>： \n            <span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLMapperBuilder#configurationElement：专门用来解析mapper映射文件 \n                <span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLMapperBuilder#buildStatementFromContext：用来创建MappedStatement对象的 \n                    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLMapperBuilder#buildStatementFromContext \n                        <span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLStatementBuilder#构造方法：专门用来解析MappedStatement \n                        <span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLStatementBuilder#parseStatementNode<span class=\"token operator\">:</span> \n                            <span class=\"token operator\">|</span><span class=\"token operator\">--</span>MapperBuilderAssistant#addMappedStatement<span class=\"token operator\">:</span>创建 MappedStatement对象 \n                                <span class=\"token operator\">|</span><span class=\"token operator\">--</span>MappedStatement<span class=\"token punctuation\">.</span>Builder#构造方法 \n                                <span class=\"token operator\">|</span><span class=\"token operator\">--</span>MappedStatement<span class=\"token punctuation\">.</span>Builder#build方法：创建MappedStatement对象，并存储 到Configuration对象中</code></pre>\n<ul>\n<li>相关接口和类</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLConfigBuilder \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLMapperBuilder \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>XPathParser \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>MapperBuilderAssistant \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLStatementBuilder \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>MappedStatement</code></pre>\n<h3 id=\"SqlSource创建流程\"><a href=\"#SqlSource创建流程\" class=\"headerlink\" title=\"SqlSource创建流程\"></a>SqlSource创建流程</h3><ul>\n<li>找入口：XMLLanguageDriver#createSqlSource</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">XMLLanguageDriver#createSqlSource 创建SqlSource，解析SQL，封装SQL语句（出参数绑定）和入参信息\n\n​    XMLScriptBuilder 构造函数：初始化动态SQL中的节点处理器集合\n​        XMLScriptBuilder#parseScriptNode \n​            #parseDynamicTags 解析select\\insert\\ update\\delete标签中的SQL语句，最终将解析到的SqlNode封装到MixedSqlNode中的List集合中\n​            DynamicSqlSource 构造方法：如果SQL中包含$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>和动态SQL语句，则将SqlNode封装到DynamicSqlSource\n​            RawSqlSource 构造方法：如果SQL中包含#<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>，则将SqlNode封装到RawSqlSource中，并指定parameterType\n​                SqlSourceBuilder#parse\n​                    ParameterMappingTokenHandler 构造方法\n​                        GenericTokenParser#构造方法<span class=\"token punctuation\">,</span>指定待分析的openToken和closeToken并指定处理器\n​                            GenericTokenParser#parse 解析#<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n​                                ParameterMappingTokenHandler#handleToken  处理token（#<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>）\n​                                    #buildParameterMapping 创建ParameterMapping对象\n​                                StaticSqlSource 构造方法，将解析之后的sql信息，封装到StaticSqlSource 对象</code></pre>\n<ul>\n<li>相关类和接口</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLLanguageDriver \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>XMLScriptBuilder \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>SqlSource \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>SqlSourceBuilder</code></pre>\n<h3 id=\"创建Mapper代理对象\"><a href=\"#创建Mapper代理对象\" class=\"headerlink\" title=\"创建Mapper代理对象\"></a>创建Mapper代理对象</h3><ul>\n<li>找入口：DefaultSqlSession#getMapper</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">|</span><span class=\"token operator\">--</span>DefaultSqlSession#getMapper：获取Mapper代理对象 \n​    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>Configuration#getMapper：获取Mapper代理对象 \n​        <span class=\"token operator\">|</span><span class=\"token operator\">--</span>MapperRegistry#getMapper：通过代理对象工厂，获取代理对象 \n​            <span class=\"token operator\">|</span><span class=\"token operator\">--</span>MapperProxyFactory#newInstance：调用JDK的动态代理方式，创建Mapper代理</code></pre>\n<h3 id=\"SqlSession执行主流程\"><a href=\"#SqlSession执行主流程\" class=\"headerlink\" title=\"SqlSession执行主流程\"></a>SqlSession执行主流程</h3><ul>\n<li>找入口：DefaultSqlSession#selectList()</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">DefaultSqlSession#selectList\n​    CachingExecutor#query\n​        BaseExecutor#query 委托给BaseExecutor执行\n​            #queryFromDatabase\n​            SimpleExecutor#doQuery  执行查询\n​                Configuration#newStatementHandler  创建路由功能的StatementHandler，根据MappedStatement中的StatementType\n​            SimpleExecutor#prepareStatement  设置PreapreStatement 的参数\n​            BaseExecutor#getConnection 获取数据库连接\n​                BaseStatementHandler#prepare 创建Statement PrepareStatement、Statement、CallableStatement）\n​                PreparedStatementHandler#parameterize 设置参数\n​                PreparedStatementHandler#query 执行SQL语句（已经设置过参数），并且映射结果集\n​                    com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>PreparedStatement#execute 调用JDBC的api执行Statement\n​                        DefaultResultSetHandler#handleResultSets  处理结果集</code></pre>\n<ul>\n<li>相关接口和类</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">|</span><span class=\"token operator\">--</span>DefaultSqlSession \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>Executor \n    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>CachingExecutor \n    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>BaseExecutor \n    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>SimpleExecutor \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>StatementHandler \n    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>RoutingStatementHandler \n    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>PreparedStatementHandler \n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>ResultSetHandler \n    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>DefaultResultSetHandler </code></pre>\n<p>​                    </p>\n<h3 id=\"BoundSql获取流程\"><a href=\"#BoundSql获取流程\" class=\"headerlink\" title=\"BoundSql获取流程\"></a>BoundSql获取流程</h3><ul>\n<li><strong>找入口：MappedStatement#getBoundSql方法</strong></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">MappedStatement#getBoundSql\n​    DynamicSqlSource#getBoundSql \n​        SqlSourceBuilder#parse 执行解析：将带有#<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>的SQL语句进行解析，然后封装到StaticSqlSource中\n​            GenericTokenParser  #构造方法，指定待分析的openToken和closeToken，并指定处理器\n​                GenericTokenParser#parse 解析SQL语句，处理openToken和closeToken中的内容 \n​                    ParameterMappingTokenHandler#handleToken 处理token（#<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>）  \n​                        #buildParameterMapping  创建 ParameterMapping对象\n​                            StaticSqlSource#构造方法 ： 将解析之后的SQL信息，封装到StaticSqlSource\n<span class=\"token operator\">|</span><span class=\"token operator\">--</span>RawSqlSource#getBoundSql \n​    <span class=\"token operator\">|</span><span class=\"token operator\">--</span>StaticSqlSource#getBoundSql \n​        <span class=\"token operator\">|</span><span class=\"token operator\">--</span>BoundSql#构造方法：将解析后的sql信息、参数映射信息、入参对象组合到BoundSql对象中 </code></pre>\n<h3 id=\"参数映射流程\"><a href=\"#参数映射流程\" class=\"headerlink\" title=\"参数映射流程\"></a>参数映射流程</h3><ul>\n<li>找入口： 其实就是SqlSession执行流程中的 PreparedStatementHandler#parameterize </li>\n</ul>\n<pre><code>\n|--PreparedStatementHandler#parameterize：设置PreparedStatement的参数 \n​    |--DefaultParameterHandler#setParameters：设置参数 \n​        |--BaseTypeHandler#setParameter： \n​            |--xxxTypeHandler#setNonNullParameter:调用PreparedStatement的setxxx方法</code></pre><h3 id=\"处理结果集\"><a href=\"#处理结果集\" class=\"headerlink\" title=\"处理结果集\"></a>处理结果集</h3><ul>\n<li>找入口：其实就是SqlSession执行流程中的 DefaultResultSetHandler#handleResultSets</li>\n</ul>\n<pre><code>|--DefaultResultSetHandler#handleResultSets \n​    |--DefaultResultSetHandler#handleResultSet \n​        |--DefaultResultSetHandler#handleRowValues \n​            |--DefaultResultSetHandler#handleRowValuesForSimpleResultMap \n​                |--DefaultResultSetHandler#getRowValue \n​                    |--DefaultResultSetHandler#createResultObject：创建映射结果对象 \n​                    |--DefaultResultSetHandler#applyAutomaticMappings \n​                    |--DefaultResultSetHandler#applyPropertyMappings </code></pre><p>基本上Mybatis的流程就是这样了，其中还有很多实现细节暂时看不太懂。 我认为学习框架源码分为两步：</p>\n<ol>\n<li>抓住主线，掌握框架的原理和流程；</li>\n<li>理解了处理思路之后，再去理解面向对象思想和设计模式的用法；</li>\n</ol>\n<p>目前第一步尚有问题，需要多走几遍源码，加深下理解，一起加油~~</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>这篇文章我们来深入阅读下Mybatis的源码，希望以后可以对底层框架不那么畏惧，学习框架设计中好的思想；</p>\n</blockquote>\n<h2 id=\"架构原理\"><a href=\"#架构原理\" class=\"headerlink\" title=\"架构原理\"></a>架构原理</h2><h3 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/6sf4i.png\" alt></p>\n<h3 id=\"架构流程图\"><a href=\"#架构流程图\" class=\"headerlink\" title=\"架构流程图\"></a>架构流程图</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/mwc26.png\" alt=\"架构流程图\"></p>\n<p>上面这两幅图来源于网络，不过画的很好，基本说明了Mybatis的架构流程。</p>\n<p>说明：</p>\n<ol>\n<li><p>Mybatis配置文件</p>\n<ul>\n<li><p>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。</p>\n</li>\n<li><p>Mapper.xml，此文件作为mybatis的sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在 </p>\n</li>\n</ul>\n<p>SqlMapConfig.xml中加载。</p>\n</li>\n<li><p>SqlSessionFactory</p>\n<ul>\n<li>通过mybatis环境等配置信息构造SqlSessionFactory，即会话工厂。</li>\n</ul>\n</li>\n<li><p>SqlSession</p>\n<ul>\n<li>通过会话工厂创建sqlSession即会话，程序员通过sqlsession会话接口对数据库进行增删改查操作。</li>\n</ul>\n</li>\n<li><p>Executor执行器</p>\n<ul>\n<li>mybatis底层自定义了Executor执行器接口来具体操作数据库，Executor接口有两个实现，一个是基本执行器 </li>\n</ul>\n<p>（默认）、一个是缓存执行器，sqlsession底层是通过executor接口操作数据库的。</p>\n</li>\n<li><p>MappedStatement</p>\n<ul>\n<li>它也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个 </li>\n</ul>\n<p>select\\insert\\update\\delete标签对应一个Mapped Statement对象，select\\insert\\update\\delete </p>\n<p>标签的id即是Mapped statement的id。</p>\n<ul>\n<li>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped </li>\n</ul>\n<p>Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对</p>\n</li>\n</ol>\n<h3 id=\"调用流程图\"><a href=\"#调用流程图\" class=\"headerlink\" title=\"调用流程图\"></a>调用流程图</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/bwkyg.png\" alt=\"结构\"></p>\n<p><strong>Executor</strong></p>\n<p>​    MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护</p>\n<p><strong>StatementHandler</strong></p>\n<p>​    封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集 </p>\n<p>合。</p>\n<p><strong>ParameterHandler</strong></p>\n<p>​    负责对用户传递的参数转换成JDBC Statement 所需要的参数</p>\n<p><strong>ResultSetHandler</strong></p>\n<p>​    负责将JDBC返回的ResultSet结果集对象转换成List类型的集合</p>\n<p><strong>TypeHandler</strong></p>\n<p>​    负责java数据类型和jdbc数据类型之间的映射和转换</p>\n<p><strong>SqlSource</strong></p>\n<p>​    负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回BoundSql表 </p>\n<p>示动态生成的SQL语句以及相应的参数信息</p>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"加载全局配置文件\"><a href=\"#加载全局配置文件\" class=\"headerlink\" title=\"加载全局配置文件\"></a>加载全局配置文件</h3><ul>\n<li>找入口：SqlSessionFactoryBuilder#build方法</li>\n</ul>\n<pre><code>SqlSessionFactoryBuilder#build 构建SqlSessionFactory\n\n    XMLConfigBuilder#parse 全局配置文件解析，封装成Configuration对象\n\n        #parseConfiguration 从根路径开始解析，加载的信息设置到Configuration对象中\n\n            #mapperElement 解析mapper映射文件\n\n                XMLMapperBuilder#parse 具体解析mapper映射文件\n\n                    SqlSessionFactoryBuilder#build：创建SqlSessionFactory接口的默认实现类\n</code></pre><ul>\n<li>总结</li>\n</ul>\n<pre><code class=\"java\">1.SqlSessionFactoryBuilder创建SqlsessionFactory时，需要传入一个Configuration对象。 \n2.XMLConfigBuilder对象会去实例化Configuration。 \n3.XMLConfigBuilder对象会去初始化Configuration对象。 \n    通过XPathParser去解析全局配置文件，形成Document对象 \n    通过XPathParser去获取指定节点的XNode对象。 \n    解析Xnode对象的信息，然后封装到Configuration对象中</code></pre>\n<ul>\n<li>相关类和接口</li>\n</ul>\n<pre><code class=\"java\">|--SqlSessionFactoryBuilder \n|--XMLConfigBuilder \n|--XPathParser \n|--Configuration</code></pre>\n<h3 id=\"加载映射配置文件\"><a href=\"#加载映射配置文件\" class=\"headerlink\" title=\"加载映射配置文件\"></a>加载映射配置文件</h3><ul>\n<li>找入口：XMLConfigBuilder#mapperElement方法</li>\n</ul>\n<pre><code class=\"java\">XMLConfigBuilder#mapperElement:解析全局配置文件中的&lt;mappers&gt;标签 \n    |--XMLMapperBuilder#构造方法：专门用来解析映射文件的 \n        |--XPathParser#构造方法： \n            |--XPathParser#createDocument()：创建Mapper映射文件对应的Document对象 \n            |--MapperBuilderAssistant#构造方法：用于构建MappedStatement对象的 \n        |--XMLMapperBuilder#parse()： \n            |--XMLMapperBuilder#configurationElement：专门用来解析mapper映射文件 \n                |--XMLMapperBuilder#buildStatementFromContext：用来创建MappedStatement对象的 \n                    |--XMLMapperBuilder#buildStatementFromContext \n                        |--XMLStatementBuilder#构造方法：专门用来解析MappedStatement \n                        |--XMLStatementBuilder#parseStatementNode: \n                            |--MapperBuilderAssistant#addMappedStatement:创建 MappedStatement对象 \n                                |--MappedStatement.Builder#构造方法 \n                                |--MappedStatement.Builder#build方法：创建MappedStatement对象，并存储 到Configuration对象中</code></pre>\n<ul>\n<li>相关接口和类</li>\n</ul>\n<pre><code class=\"java\">|--XMLConfigBuilder \n|--XMLMapperBuilder \n|--XPathParser \n|--MapperBuilderAssistant \n|--XMLStatementBuilder \n|--MappedStatement</code></pre>\n<h3 id=\"SqlSource创建流程\"><a href=\"#SqlSource创建流程\" class=\"headerlink\" title=\"SqlSource创建流程\"></a>SqlSource创建流程</h3><ul>\n<li>找入口：XMLLanguageDriver#createSqlSource</li>\n</ul>\n<pre><code class=\"java\">XMLLanguageDriver#createSqlSource 创建SqlSource，解析SQL，封装SQL语句（出参数绑定）和入参信息\n\n​    XMLScriptBuilder 构造函数：初始化动态SQL中的节点处理器集合\n​        XMLScriptBuilder#parseScriptNode \n​            #parseDynamicTags 解析select\\insert\\ update\\delete标签中的SQL语句，最终将解析到的SqlNode封装到MixedSqlNode中的List集合中\n​            DynamicSqlSource 构造方法：如果SQL中包含${}和动态SQL语句，则将SqlNode封装到DynamicSqlSource\n​            RawSqlSource 构造方法：如果SQL中包含#{}，则将SqlNode封装到RawSqlSource中，并指定parameterType\n​                SqlSourceBuilder#parse\n​                    ParameterMappingTokenHandler 构造方法\n​                        GenericTokenParser#构造方法,指定待分析的openToken和closeToken并指定处理器\n​                            GenericTokenParser#parse 解析#{}\n​                                ParameterMappingTokenHandler#handleToken  处理token（#{}/${}）\n​                                    #buildParameterMapping 创建ParameterMapping对象\n​                                StaticSqlSource 构造方法，将解析之后的sql信息，封装到StaticSqlSource 对象</code></pre>\n<ul>\n<li>相关类和接口</li>\n</ul>\n<pre><code class=\"java\">|--XMLLanguageDriver \n|--XMLScriptBuilder \n|--SqlSource \n|--SqlSourceBuilder</code></pre>\n<h3 id=\"创建Mapper代理对象\"><a href=\"#创建Mapper代理对象\" class=\"headerlink\" title=\"创建Mapper代理对象\"></a>创建Mapper代理对象</h3><ul>\n<li>找入口：DefaultSqlSession#getMapper</li>\n</ul>\n<pre><code class=\"java\">|--DefaultSqlSession#getMapper：获取Mapper代理对象 \n​    |--Configuration#getMapper：获取Mapper代理对象 \n​        |--MapperRegistry#getMapper：通过代理对象工厂，获取代理对象 \n​            |--MapperProxyFactory#newInstance：调用JDK的动态代理方式，创建Mapper代理</code></pre>\n<h3 id=\"SqlSession执行主流程\"><a href=\"#SqlSession执行主流程\" class=\"headerlink\" title=\"SqlSession执行主流程\"></a>SqlSession执行主流程</h3><ul>\n<li>找入口：DefaultSqlSession#selectList()</li>\n</ul>\n<pre><code class=\"java\">DefaultSqlSession#selectList\n​    CachingExecutor#query\n​        BaseExecutor#query 委托给BaseExecutor执行\n​            #queryFromDatabase\n​            SimpleExecutor#doQuery  执行查询\n​                Configuration#newStatementHandler  创建路由功能的StatementHandler，根据MappedStatement中的StatementType\n​            SimpleExecutor#prepareStatement  设置PreapreStatement 的参数\n​            BaseExecutor#getConnection 获取数据库连接\n​                BaseStatementHandler#prepare 创建Statement PrepareStatement、Statement、CallableStatement）\n​                PreparedStatementHandler#parameterize 设置参数\n​                PreparedStatementHandler#query 执行SQL语句（已经设置过参数），并且映射结果集\n​                    com.mysql.jdbc.PreparedStatement#execute 调用JDBC的api执行Statement\n​                        DefaultResultSetHandler#handleResultSets  处理结果集</code></pre>\n<ul>\n<li>相关接口和类</li>\n</ul>\n<pre><code class=\"java\">|--DefaultSqlSession \n|--Executor \n    |--CachingExecutor \n    |--BaseExecutor \n    |--SimpleExecutor \n|--StatementHandler \n    |--RoutingStatementHandler \n    |--PreparedStatementHandler \n|--ResultSetHandler \n    |--DefaultResultSetHandler </code></pre>\n<p>​                    </p>\n<h3 id=\"BoundSql获取流程\"><a href=\"#BoundSql获取流程\" class=\"headerlink\" title=\"BoundSql获取流程\"></a>BoundSql获取流程</h3><ul>\n<li><strong>找入口：MappedStatement#getBoundSql方法</strong></li>\n</ul>\n<pre><code class=\"java\">MappedStatement#getBoundSql\n​    DynamicSqlSource#getBoundSql \n​        SqlSourceBuilder#parse 执行解析：将带有#{}的SQL语句进行解析，然后封装到StaticSqlSource中\n​            GenericTokenParser  #构造方法，指定待分析的openToken和closeToken，并指定处理器\n​                GenericTokenParser#parse 解析SQL语句，处理openToken和closeToken中的内容 \n​                    ParameterMappingTokenHandler#handleToken 处理token（#{}/${}）  \n​                        #buildParameterMapping  创建 ParameterMapping对象\n​                            StaticSqlSource#构造方法 ： 将解析之后的SQL信息，封装到StaticSqlSource\n|--RawSqlSource#getBoundSql \n​    |--StaticSqlSource#getBoundSql \n​        |--BoundSql#构造方法：将解析后的sql信息、参数映射信息、入参对象组合到BoundSql对象中 </code></pre>\n<h3 id=\"参数映射流程\"><a href=\"#参数映射流程\" class=\"headerlink\" title=\"参数映射流程\"></a>参数映射流程</h3><ul>\n<li>找入口： 其实就是SqlSession执行流程中的 PreparedStatementHandler#parameterize </li>\n</ul>\n<pre><code>\n|--PreparedStatementHandler#parameterize：设置PreparedStatement的参数 \n​    |--DefaultParameterHandler#setParameters：设置参数 \n​        |--BaseTypeHandler#setParameter： \n​            |--xxxTypeHandler#setNonNullParameter:调用PreparedStatement的setxxx方法</code></pre><h3 id=\"处理结果集\"><a href=\"#处理结果集\" class=\"headerlink\" title=\"处理结果集\"></a>处理结果集</h3><ul>\n<li>找入口：其实就是SqlSession执行流程中的 DefaultResultSetHandler#handleResultSets</li>\n</ul>\n<pre><code>|--DefaultResultSetHandler#handleResultSets \n​    |--DefaultResultSetHandler#handleResultSet \n​        |--DefaultResultSetHandler#handleRowValues \n​            |--DefaultResultSetHandler#handleRowValuesForSimpleResultMap \n​                |--DefaultResultSetHandler#getRowValue \n​                    |--DefaultResultSetHandler#createResultObject：创建映射结果对象 \n​                    |--DefaultResultSetHandler#applyAutomaticMappings \n​                    |--DefaultResultSetHandler#applyPropertyMappings </code></pre><p>基本上Mybatis的流程就是这样了，其中还有很多实现细节暂时看不太懂。 我认为学习框架源码分为两步：</p>\n<ol>\n<li>抓住主线，掌握框架的原理和流程；</li>\n<li>理解了处理思路之后，再去理解面向对象思想和设计模式的用法；</li>\n</ol>\n<p>目前第一步尚有问题，需要多走几遍源码，加深下理解，一起加油~~</p>\n"},{"title":"chapter4-网络层","date":"2019-09-14T07:13:56.000Z","_content":"\n\n\n\n\n## 网络层提供的两种服务\n虚电路服务 可靠通信应当由网络来保证\n数据报服务 可靠通信应当由用户主机来保证\n因特网网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。\n\n## 转发和路由选择\n转发和路由选择这两个概念很重要，一定要区分开，他们的严格定义如下：\n**转发**：将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作。\n**路由选择**：确定分组从源到目的地所采取的端到端路径的网络范围过程。\n\n注：\n转发发生的时间尺度很短（通常为几纳秒），因此通常用硬件来实现\n路由选择发生的时间尺度长得多（通常为几秒），因此通常用软件来实现\n\n本章数据平面的主要工作就是转发。\n\n\n链路层交换机和路由器\n某些分组交换机称为链路层交换机，基于链路层帧中的字段值做出转发决定，这些交换机因此被称为链路层设备\n其他分组交换机称为路由器，基于网络层数据报中的首部字段值做出转发决定\n\n每个路由器都有一个转发表，路由器根据分组目的地前缀与该路由表中的表项进行匹配，找到对应的出口进行转发。 \n\n## 路由器工作原理\n路由器最主要的作用就是把接收到的一个包通过另一个端口转发出去，这个过程中就涉及到很多问题了，比如路由器怎么知道向哪个口转发？它怎么选择转发链路等等。\n\n当路由器的输入端口接收到网络包时，理论上可以用三种方式来交换要转发的网络包。分别为内存交换、总线交换、网络交换。其中内存交换我个人觉得可以理解为共享内存；总线交换即所有的输入输出端口都连接到同一条总线上去；而网络交换着更高级了，因为它不止一条线路，所以只要两个包不是走同一条线路，那么路由器就能实现非阻塞式的转发。\n\n当然，如果对一个输入端口狂输入网络包，或者输出端口来不及转发网络包，那很容易就会出现丢包的情况，因为缓存已经撑爆了，要解决这个问题要么加大缓存、要么提升交换速率。\n\n但是再怎么样都会出现丢包的问题，所以就搞个排队机制，只要您进了队列，那么就不会被抛弃，但是进了队列就不代表一定就会把你发出去\n\n## 分组调度的几种规则\n1、先进先出\n如果链路当前忙于传输另一个分组，到达链路输出队列的分组要排队等待传输。如果没有足够的缓存空间来容纳到达的分组，队列的分组丢弃策略则确定该分组是否将被丢弃或者从队列中去除以便为到达的分组腾出空间\n2、优先权排队\n通常由源或目的TCP、UDP端口号来进行分组。如实时话音分组可能获得超过非实时流量的优先权。\n同一个队列中的还是采用先进先出的策略。\n3、循环和加权公平排队\n把分组进行分类然后赋予一个权重w，然后调度器循环的在各个类之间进行分组的传输\n\n## IP地址\n\n1、与 IP 协议配套使用的还有三个协议：\n- 地址解析协议 ARP\n- 网际控制报文协议 ICMP\n- 网际组管理协议 IGMP\n\n2、网络互相连接起来要使用一些中间设备\n\n3、互联网可以由许多异构网络互联组成\n\n4、分类的 IP 地址\nIP 地址定义：就是给每个连接在因特网上的主机（或路由器）分配一个在全世界范围是唯一的 32 位的标识符。\n\n 5、IP 地址的编址方法 分类的 IP 地址，子网的划分，构成超网。\n两级的 IP 地址 ：IP 地址 ::= { <网络号>, <主机号>}\n分类的 IP 地址：A类，B类，C类地址都是单播地址\nD类地址用于多播，E类地址保留\n实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口。 \nIp地址不仅可以指明一个主机，还指明了主机所连接到的网络\n点分十进制记法：192.168.1.1\n一些特殊的ip地址：保留地址0.0.0.0 本地软件环回测试地址127.0.0.1 \n不指派地址 128.0.0.0 192.0.0.0 \n6、ip地址与硬件地址的区别：IP地址放在IP数据报首部，硬件地址放在MAC帧首部，在网络层及网络层以上使用IP地址，在链路层及以下使用硬件地址\n\n7、解析协议 ARP 每一个主机都设有一个 ARP 高速缓存(ARP cache)，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表，这个映射表还经常动态更新。\n\n8、如何知道同一个局域网内其他主机的mac地址？\nA在局域网内广播arp请求分组，其他主机接收分组，IP地址与报文中一致的主机收下分组，并在自己的arp缓存中写入主机A的IP地址到mac地址的映射，并发送arp响应报文，A收到响应报文后在自己的arp缓存中写入主机B的IP地址到mac地址的映射。\n\n9、若主机不在同一个局域网内，arp映射表怎样建立？ 交给连接不同网络的路由器\n\n10、 为什么不直接使用mac地址通信，要加上ip地址\n为了完成异构网络之间的通讯，mac地址比较复杂，ip方便用户操作，提高CPU的效率，这样在网络传输中就可以由网卡来识别mac地址，不用再上传到CPU识别\n\n\n## 网络地址转换 NAT\n1、需要在专用网连接到因特网的路由器上安装 NAT 软件。装有 NAT 软件的路由器叫做 NAT路由器，它至少有一个有效的外部全球地址 IPG。\n2、在专用网络内使用专用IP地址，仅在连接到英特网上的路由器时使用全球IP地址。并且一定要使用全球IP才能和英特网连接\n3、通过NAT地址转换表可以把IP数据报上的旧目的IP地址转换为新的目的IP地址\n4、使用端口号的NAT也叫网络地址与端口号转换NAPT","source":"_posts/计算机网络/chapter4-网络层.md","raw":"---\ntitle: chapter4-网络层\ntags:\n  - 网络层\ndate: 2019-09-14 15:13:56\ncategories: 计算机网络\n---\n\n\n\n\n\n## 网络层提供的两种服务\n虚电路服务 可靠通信应当由网络来保证\n数据报服务 可靠通信应当由用户主机来保证\n因特网网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。\n\n## 转发和路由选择\n转发和路由选择这两个概念很重要，一定要区分开，他们的严格定义如下：\n**转发**：将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作。\n**路由选择**：确定分组从源到目的地所采取的端到端路径的网络范围过程。\n\n注：\n转发发生的时间尺度很短（通常为几纳秒），因此通常用硬件来实现\n路由选择发生的时间尺度长得多（通常为几秒），因此通常用软件来实现\n\n本章数据平面的主要工作就是转发。\n\n\n链路层交换机和路由器\n某些分组交换机称为链路层交换机，基于链路层帧中的字段值做出转发决定，这些交换机因此被称为链路层设备\n其他分组交换机称为路由器，基于网络层数据报中的首部字段值做出转发决定\n\n每个路由器都有一个转发表，路由器根据分组目的地前缀与该路由表中的表项进行匹配，找到对应的出口进行转发。 \n\n## 路由器工作原理\n路由器最主要的作用就是把接收到的一个包通过另一个端口转发出去，这个过程中就涉及到很多问题了，比如路由器怎么知道向哪个口转发？它怎么选择转发链路等等。\n\n当路由器的输入端口接收到网络包时，理论上可以用三种方式来交换要转发的网络包。分别为内存交换、总线交换、网络交换。其中内存交换我个人觉得可以理解为共享内存；总线交换即所有的输入输出端口都连接到同一条总线上去；而网络交换着更高级了，因为它不止一条线路，所以只要两个包不是走同一条线路，那么路由器就能实现非阻塞式的转发。\n\n当然，如果对一个输入端口狂输入网络包，或者输出端口来不及转发网络包，那很容易就会出现丢包的情况，因为缓存已经撑爆了，要解决这个问题要么加大缓存、要么提升交换速率。\n\n但是再怎么样都会出现丢包的问题，所以就搞个排队机制，只要您进了队列，那么就不会被抛弃，但是进了队列就不代表一定就会把你发出去\n\n## 分组调度的几种规则\n1、先进先出\n如果链路当前忙于传输另一个分组，到达链路输出队列的分组要排队等待传输。如果没有足够的缓存空间来容纳到达的分组，队列的分组丢弃策略则确定该分组是否将被丢弃或者从队列中去除以便为到达的分组腾出空间\n2、优先权排队\n通常由源或目的TCP、UDP端口号来进行分组。如实时话音分组可能获得超过非实时流量的优先权。\n同一个队列中的还是采用先进先出的策略。\n3、循环和加权公平排队\n把分组进行分类然后赋予一个权重w，然后调度器循环的在各个类之间进行分组的传输\n\n## IP地址\n\n1、与 IP 协议配套使用的还有三个协议：\n- 地址解析协议 ARP\n- 网际控制报文协议 ICMP\n- 网际组管理协议 IGMP\n\n2、网络互相连接起来要使用一些中间设备\n\n3、互联网可以由许多异构网络互联组成\n\n4、分类的 IP 地址\nIP 地址定义：就是给每个连接在因特网上的主机（或路由器）分配一个在全世界范围是唯一的 32 位的标识符。\n\n 5、IP 地址的编址方法 分类的 IP 地址，子网的划分，构成超网。\n两级的 IP 地址 ：IP 地址 ::= { <网络号>, <主机号>}\n分类的 IP 地址：A类，B类，C类地址都是单播地址\nD类地址用于多播，E类地址保留\n实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口。 \nIp地址不仅可以指明一个主机，还指明了主机所连接到的网络\n点分十进制记法：192.168.1.1\n一些特殊的ip地址：保留地址0.0.0.0 本地软件环回测试地址127.0.0.1 \n不指派地址 128.0.0.0 192.0.0.0 \n6、ip地址与硬件地址的区别：IP地址放在IP数据报首部，硬件地址放在MAC帧首部，在网络层及网络层以上使用IP地址，在链路层及以下使用硬件地址\n\n7、解析协议 ARP 每一个主机都设有一个 ARP 高速缓存(ARP cache)，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表，这个映射表还经常动态更新。\n\n8、如何知道同一个局域网内其他主机的mac地址？\nA在局域网内广播arp请求分组，其他主机接收分组，IP地址与报文中一致的主机收下分组，并在自己的arp缓存中写入主机A的IP地址到mac地址的映射，并发送arp响应报文，A收到响应报文后在自己的arp缓存中写入主机B的IP地址到mac地址的映射。\n\n9、若主机不在同一个局域网内，arp映射表怎样建立？ 交给连接不同网络的路由器\n\n10、 为什么不直接使用mac地址通信，要加上ip地址\n为了完成异构网络之间的通讯，mac地址比较复杂，ip方便用户操作，提高CPU的效率，这样在网络传输中就可以由网卡来识别mac地址，不用再上传到CPU识别\n\n\n## 网络地址转换 NAT\n1、需要在专用网连接到因特网的路由器上安装 NAT 软件。装有 NAT 软件的路由器叫做 NAT路由器，它至少有一个有效的外部全球地址 IPG。\n2、在专用网络内使用专用IP地址，仅在连接到英特网上的路由器时使用全球IP地址。并且一定要使用全球IP才能和英特网连接\n3、通过NAT地址转换表可以把IP数据报上的旧目的IP地址转换为新的目的IP地址\n4、使用端口号的NAT也叫网络地址与端口号转换NAPT","slug":"计算机网络/chapter4-网络层","published":1,"updated":"2019-09-28T15:54:26.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck13qknjf0000veo61mjj3qd2","content":"<h2 id=\"网络层提供的两种服务\"><a href=\"#网络层提供的两种服务\" class=\"headerlink\" title=\"网络层提供的两种服务\"></a>网络层提供的两种服务</h2><p>虚电路服务 可靠通信应当由网络来保证<br>数据报服务 可靠通信应当由用户主机来保证<br>因特网网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。</p>\n<h2 id=\"转发和路由选择\"><a href=\"#转发和路由选择\" class=\"headerlink\" title=\"转发和路由选择\"></a>转发和路由选择</h2><p>转发和路由选择这两个概念很重要，一定要区分开，他们的严格定义如下：<br><strong>转发</strong>：将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作。<br><strong>路由选择</strong>：确定分组从源到目的地所采取的端到端路径的网络范围过程。</p>\n<p>注：<br>转发发生的时间尺度很短（通常为几纳秒），因此通常用硬件来实现<br>路由选择发生的时间尺度长得多（通常为几秒），因此通常用软件来实现</p>\n<p>本章数据平面的主要工作就是转发。</p>\n<p>链路层交换机和路由器<br>某些分组交换机称为链路层交换机，基于链路层帧中的字段值做出转发决定，这些交换机因此被称为链路层设备<br>其他分组交换机称为路由器，基于网络层数据报中的首部字段值做出转发决定</p>\n<p>每个路由器都有一个转发表，路由器根据分组目的地前缀与该路由表中的表项进行匹配，找到对应的出口进行转发。 </p>\n<h2 id=\"路由器工作原理\"><a href=\"#路由器工作原理\" class=\"headerlink\" title=\"路由器工作原理\"></a>路由器工作原理</h2><p>路由器最主要的作用就是把接收到的一个包通过另一个端口转发出去，这个过程中就涉及到很多问题了，比如路由器怎么知道向哪个口转发？它怎么选择转发链路等等。</p>\n<p>当路由器的输入端口接收到网络包时，理论上可以用三种方式来交换要转发的网络包。分别为内存交换、总线交换、网络交换。其中内存交换我个人觉得可以理解为共享内存；总线交换即所有的输入输出端口都连接到同一条总线上去；而网络交换着更高级了，因为它不止一条线路，所以只要两个包不是走同一条线路，那么路由器就能实现非阻塞式的转发。</p>\n<p>当然，如果对一个输入端口狂输入网络包，或者输出端口来不及转发网络包，那很容易就会出现丢包的情况，因为缓存已经撑爆了，要解决这个问题要么加大缓存、要么提升交换速率。</p>\n<p>但是再怎么样都会出现丢包的问题，所以就搞个排队机制，只要您进了队列，那么就不会被抛弃，但是进了队列就不代表一定就会把你发出去</p>\n<h2 id=\"分组调度的几种规则\"><a href=\"#分组调度的几种规则\" class=\"headerlink\" title=\"分组调度的几种规则\"></a>分组调度的几种规则</h2><p>1、先进先出<br>如果链路当前忙于传输另一个分组，到达链路输出队列的分组要排队等待传输。如果没有足够的缓存空间来容纳到达的分组，队列的分组丢弃策略则确定该分组是否将被丢弃或者从队列中去除以便为到达的分组腾出空间<br>2、优先权排队<br>通常由源或目的TCP、UDP端口号来进行分组。如实时话音分组可能获得超过非实时流量的优先权。<br>同一个队列中的还是采用先进先出的策略。<br>3、循环和加权公平排队<br>把分组进行分类然后赋予一个权重w，然后调度器循环的在各个类之间进行分组的传输</p>\n<h2 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h2><p>1、与 IP 协议配套使用的还有三个协议：</p>\n<ul>\n<li>地址解析协议 ARP</li>\n<li>网际控制报文协议 ICMP</li>\n<li>网际组管理协议 IGMP</li>\n</ul>\n<p>2、网络互相连接起来要使用一些中间设备</p>\n<p>3、互联网可以由许多异构网络互联组成</p>\n<p>4、分类的 IP 地址<br>IP 地址定义：就是给每个连接在因特网上的主机（或路由器）分配一个在全世界范围是唯一的 32 位的标识符。</p>\n<p> 5、IP 地址的编址方法 分类的 IP 地址，子网的划分，构成超网。<br>两级的 IP 地址 ：IP 地址 ::= { &lt;网络号&gt;, &lt;主机号&gt;}<br>分类的 IP 地址：A类，B类，C类地址都是单播地址<br>D类地址用于多播，E类地址保留<br>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口。<br>Ip地址不仅可以指明一个主机，还指明了主机所连接到的网络<br>点分十进制记法：192.168.1.1<br>一些特殊的ip地址：保留地址0.0.0.0 本地软件环回测试地址127.0.0.1<br>不指派地址 128.0.0.0 192.0.0.0<br>6、ip地址与硬件地址的区别：IP地址放在IP数据报首部，硬件地址放在MAC帧首部，在网络层及网络层以上使用IP地址，在链路层及以下使用硬件地址</p>\n<p>7、解析协议 ARP 每一个主机都设有一个 ARP 高速缓存(ARP cache)，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表，这个映射表还经常动态更新。</p>\n<p>8、如何知道同一个局域网内其他主机的mac地址？<br>A在局域网内广播arp请求分组，其他主机接收分组，IP地址与报文中一致的主机收下分组，并在自己的arp缓存中写入主机A的IP地址到mac地址的映射，并发送arp响应报文，A收到响应报文后在自己的arp缓存中写入主机B的IP地址到mac地址的映射。</p>\n<p>9、若主机不在同一个局域网内，arp映射表怎样建立？ 交给连接不同网络的路由器</p>\n<p>10、 为什么不直接使用mac地址通信，要加上ip地址<br>为了完成异构网络之间的通讯，mac地址比较复杂，ip方便用户操作，提高CPU的效率，这样在网络传输中就可以由网卡来识别mac地址，不用再上传到CPU识别</p>\n<h2 id=\"网络地址转换-NAT\"><a href=\"#网络地址转换-NAT\" class=\"headerlink\" title=\"网络地址转换 NAT\"></a>网络地址转换 NAT</h2><p>1、需要在专用网连接到因特网的路由器上安装 NAT 软件。装有 NAT 软件的路由器叫做 NAT路由器，它至少有一个有效的外部全球地址 IPG。<br>2、在专用网络内使用专用IP地址，仅在连接到英特网上的路由器时使用全球IP地址。并且一定要使用全球IP才能和英特网连接<br>3、通过NAT地址转换表可以把IP数据报上的旧目的IP地址转换为新的目的IP地址<br>4、使用端口号的NAT也叫网络地址与端口号转换NAPT</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"网络层提供的两种服务\"><a href=\"#网络层提供的两种服务\" class=\"headerlink\" title=\"网络层提供的两种服务\"></a>网络层提供的两种服务</h2><p>虚电路服务 可靠通信应当由网络来保证<br>数据报服务 可靠通信应当由用户主机来保证<br>因特网网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。</p>\n<h2 id=\"转发和路由选择\"><a href=\"#转发和路由选择\" class=\"headerlink\" title=\"转发和路由选择\"></a>转发和路由选择</h2><p>转发和路由选择这两个概念很重要，一定要区分开，他们的严格定义如下：<br><strong>转发</strong>：将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作。<br><strong>路由选择</strong>：确定分组从源到目的地所采取的端到端路径的网络范围过程。</p>\n<p>注：<br>转发发生的时间尺度很短（通常为几纳秒），因此通常用硬件来实现<br>路由选择发生的时间尺度长得多（通常为几秒），因此通常用软件来实现</p>\n<p>本章数据平面的主要工作就是转发。</p>\n<p>链路层交换机和路由器<br>某些分组交换机称为链路层交换机，基于链路层帧中的字段值做出转发决定，这些交换机因此被称为链路层设备<br>其他分组交换机称为路由器，基于网络层数据报中的首部字段值做出转发决定</p>\n<p>每个路由器都有一个转发表，路由器根据分组目的地前缀与该路由表中的表项进行匹配，找到对应的出口进行转发。 </p>\n<h2 id=\"路由器工作原理\"><a href=\"#路由器工作原理\" class=\"headerlink\" title=\"路由器工作原理\"></a>路由器工作原理</h2><p>路由器最主要的作用就是把接收到的一个包通过另一个端口转发出去，这个过程中就涉及到很多问题了，比如路由器怎么知道向哪个口转发？它怎么选择转发链路等等。</p>\n<p>当路由器的输入端口接收到网络包时，理论上可以用三种方式来交换要转发的网络包。分别为内存交换、总线交换、网络交换。其中内存交换我个人觉得可以理解为共享内存；总线交换即所有的输入输出端口都连接到同一条总线上去；而网络交换着更高级了，因为它不止一条线路，所以只要两个包不是走同一条线路，那么路由器就能实现非阻塞式的转发。</p>\n<p>当然，如果对一个输入端口狂输入网络包，或者输出端口来不及转发网络包，那很容易就会出现丢包的情况，因为缓存已经撑爆了，要解决这个问题要么加大缓存、要么提升交换速率。</p>\n<p>但是再怎么样都会出现丢包的问题，所以就搞个排队机制，只要您进了队列，那么就不会被抛弃，但是进了队列就不代表一定就会把你发出去</p>\n<h2 id=\"分组调度的几种规则\"><a href=\"#分组调度的几种规则\" class=\"headerlink\" title=\"分组调度的几种规则\"></a>分组调度的几种规则</h2><p>1、先进先出<br>如果链路当前忙于传输另一个分组，到达链路输出队列的分组要排队等待传输。如果没有足够的缓存空间来容纳到达的分组，队列的分组丢弃策略则确定该分组是否将被丢弃或者从队列中去除以便为到达的分组腾出空间<br>2、优先权排队<br>通常由源或目的TCP、UDP端口号来进行分组。如实时话音分组可能获得超过非实时流量的优先权。<br>同一个队列中的还是采用先进先出的策略。<br>3、循环和加权公平排队<br>把分组进行分类然后赋予一个权重w，然后调度器循环的在各个类之间进行分组的传输</p>\n<h2 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h2><p>1、与 IP 协议配套使用的还有三个协议：</p>\n<ul>\n<li>地址解析协议 ARP</li>\n<li>网际控制报文协议 ICMP</li>\n<li>网际组管理协议 IGMP</li>\n</ul>\n<p>2、网络互相连接起来要使用一些中间设备</p>\n<p>3、互联网可以由许多异构网络互联组成</p>\n<p>4、分类的 IP 地址<br>IP 地址定义：就是给每个连接在因特网上的主机（或路由器）分配一个在全世界范围是唯一的 32 位的标识符。</p>\n<p> 5、IP 地址的编址方法 分类的 IP 地址，子网的划分，构成超网。<br>两级的 IP 地址 ：IP 地址 ::= { &lt;网络号&gt;, &lt;主机号&gt;}<br>分类的 IP 地址：A类，B类，C类地址都是单播地址<br>D类地址用于多播，E类地址保留<br>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口。<br>Ip地址不仅可以指明一个主机，还指明了主机所连接到的网络<br>点分十进制记法：192.168.1.1<br>一些特殊的ip地址：保留地址0.0.0.0 本地软件环回测试地址127.0.0.1<br>不指派地址 128.0.0.0 192.0.0.0<br>6、ip地址与硬件地址的区别：IP地址放在IP数据报首部，硬件地址放在MAC帧首部，在网络层及网络层以上使用IP地址，在链路层及以下使用硬件地址</p>\n<p>7、解析协议 ARP 每一个主机都设有一个 ARP 高速缓存(ARP cache)，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表，这个映射表还经常动态更新。</p>\n<p>8、如何知道同一个局域网内其他主机的mac地址？<br>A在局域网内广播arp请求分组，其他主机接收分组，IP地址与报文中一致的主机收下分组，并在自己的arp缓存中写入主机A的IP地址到mac地址的映射，并发送arp响应报文，A收到响应报文后在自己的arp缓存中写入主机B的IP地址到mac地址的映射。</p>\n<p>9、若主机不在同一个局域网内，arp映射表怎样建立？ 交给连接不同网络的路由器</p>\n<p>10、 为什么不直接使用mac地址通信，要加上ip地址<br>为了完成异构网络之间的通讯，mac地址比较复杂，ip方便用户操作，提高CPU的效率，这样在网络传输中就可以由网卡来识别mac地址，不用再上传到CPU识别</p>\n<h2 id=\"网络地址转换-NAT\"><a href=\"#网络地址转换-NAT\" class=\"headerlink\" title=\"网络地址转换 NAT\"></a>网络地址转换 NAT</h2><p>1、需要在专用网连接到因特网的路由器上安装 NAT 软件。装有 NAT 软件的路由器叫做 NAT路由器，它至少有一个有效的外部全球地址 IPG。<br>2、在专用网络内使用专用IP地址，仅在连接到英特网上的路由器时使用全球IP地址。并且一定要使用全球IP才能和英特网连接<br>3、通过NAT地址转换表可以把IP数据报上的旧目的IP地址转换为新的目的IP地址<br>4、使用端口号的NAT也叫网络地址与端口号转换NAPT</p>\n"},{"title":"chapter3-传输层","date":"2019-09-14T07:07:08.000Z","cover":true,"_content":"\n\n\n\n\n> 这周来到，《自算计网络自顶向下》 这本书的第三章，传输层的学习。\n\n## 运输层和网络层的关系\n  在协议栈中，我们都知道运输层位于网络层之上。网络层提供了主机之间的通信，而运输层为位于主机上的不同进程之间提供了逻辑通信。\n\n## 多路复用与多路分解\n首先我们需要明确，一个进程有一个或者多个套接字，它相当于从网络向进程传递数据和从进程向网络传递数据的门户。在接收主机上的运输层实际上并没有将数据报直接交给进程，而是将数据报交给了一个中间套接字。\n现在我们就可以考虑接收主机怎样将一个运输层报文段传输到适当的套接字。为此目的，每个运输层的报文段中具有几个字段。在接收端运输层通过检查这几个字段，进而标识将数据定向到指定套接字。将运输层报文段正确交付给套接字的工作成为**多路分解**。\n对应的在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息生成报文段，然后将此报文段传递到网络层，所有这些工作成为**多路复用**。\n\n在主机中如果将报文段识别定向到对应的套接字是通过**端口号**来标识的。\n**总结：** 在主机上的每个套接字能分配一个对应的端口号，当报文段到达主机时，运输层检查报文段中的目的端口号，并将其定向到对应的套接字。最后通过套接字进入到其所连接的进程。\n\n\n## 无连接传输：UDP\n\nUDP协议是不需要建立连接的传输，也就是无需三次握手，是一种不可靠传输，而且没有提供拥塞控制。\n\n有可能引发，所有基于UDP协议的应用程序客户端，都没有流量控制，可能会使整条链路流量带宽被耗尽，其他UDP客户端的高丢包率，也可能使TCP应用没有带宽可用，因为它的拥塞控制，会限制数据报的发送。\n\nUDP提供了**检验和**来验证数据报的正确性，之所以提供这种手段，原因在于不能保证源和目的之间的所有链路都提供了差错校验； 也就是说，这些链路中也许某一条使用没有差错校验的协议。此外，即使报文经链路正确的传输，当报文段存储在某台路由器内存时，也可能引入比特差错，因此UDP 在端到端基础上在运输层提供差错校验。\n\n## 可靠数据传输原理\n\n\n\n![可靠数据传输：服务模型与服务实现](http://media.coderluo.top/计算机网络/kj2u4.png)\n\n在可靠传输协议中，为了提高发送效率一般采用流水线，即无需等待确认回复，继续发送下一个分组，下面记录下解决流水线差错恢复的两种基本方法： **回退N步（Go_Back_N,GBN）** 和 **选择重传(Selective Repeat, SR)**\n\n### 回退N步\n\n> 在回退N步协议中，允许发送方发送多个分组（当有多个分组可用时）而不需要等待确认，但它也受限于在流水线中未确认的分组数不能超过某个最大允许数N。\n\n\n![在GBN中发送方看到的序号](http://media.coderluo.top/计算机网络/k07p7.png)\n\n在上图中，展示了发送方看到的GBN协议的序号范围。如果我们将基序号（base）定义为最早的未被确认的分组序号，将 下一个序号（nextseqnum） 定义为最小的未使用序号（即下一个待发分组号），则可以将序号范围划分为4段：\n1. 在[0,base-1] 段内的序号对应于已经发送b并被确认的分组。\n2. [base,nextseqnum-1]段内对应已经发送但未被确认的分组。\n3. [nextseqnum,base+N-1] 段内的序号能用于那些要被立即发送的分组，如果有数据来自上层的话。\n4. 最后，大于或者等于base+N的序号是不能使用的，直到当前流水线中未被确认的分组已得到确认为止。\n\nGBN协议也被称为**滑动窗口协议**\n\n![可靠数据传输机制及其用途的总结](http://media.coderluo.top/计算机网络/csxo3.png)\n\n## TCP连接\n\nTCP是一个全双工通信模型，简要概括如下图所示：\n![TCP发送缓存和接收缓存](http://media.coderluo.top/计算机网络/a3e21.png)\n\n\n### TCP 报文段结构\n![TCP报文结构](http://media.coderluo.top/计算机网络/jl4qk.png)\n\n1. 序号和确认号\n  TCP报文段首部中最重要的字段是序号和确认号。因为他们是TCP可靠传输服务的关键部分。\n\nTCP 将数据看成是一个无结构的，有序的字节流。这里需要强调序号是建立在传送的字节流上的，而不是建立在传输的报文段的序列之上。\n\n**一个报文段的编号** 是该报文段首字节的字节流编号。 \n\n![文件数据划分成TCP报文段](http://media.coderluo.top/计算机网络/i12ey.png)\n\n确认号是接收主机期望从发送主机收到的下一字节的序号。\n\n### 可靠数据传输\n\nTCP在发送数据后，假设丢包采用累计确认，后面的确认了则前面未确认的都认为已经接收到了，不在重传。\n\n\n![TCP三次握手-报文交换](http://media.coderluo.top/计算机网络/2cwdd.png)\n\n![关闭一条TCP连接](http://media.coderluo.top/计算机网络/997bg.png)\n\n\n![客户TCP经历的典型TCP状态序列](http://media.coderluo.top/计算机网络/c6k3s.png)\n\n![服务端TCP经历的典型TCP状态序列](http://media.coderluo.top/计算机网络/rjr8k.png)\n\n\n## TCP 拥塞控制\n\nTCP使用的端到端的拥塞控制，而不是使用网络辅助的拥塞控制，因为IP层不向端系统提供显式的网络拥塞反馈。\n\nTCP拥塞控制算法：\n1. 慢启动\n2. 拥塞避免\n3. 快速恢复\n\n总结：TCP控制是：每个RTT内cwnd线性（加性）增加1MSS，然后出现3个冗余ACK事件时 cwnd减半（乘性减）。因此，TCP拥塞控制常被称为 **加性增，乘性减**拥塞控制方式。\n\n**TCP是非常复杂的，它涉及了连接管理（三次握手，四次挥手）、流量控制（滑动窗口）、往返时间估计（RTT加权）、以及可靠数据传送（确认、定时器、重传以及序号机制）**","source":"_posts/计算机网络/chapter3-传输层.md","raw":"---\ntitle: chapter3-传输层\ntags:\n  - 传输层\ndate: 2019-09-14 15:07:08\ncategories: 计算机网络\ncover: true\n---\n\n\n\n\n\n> 这周来到，《自算计网络自顶向下》 这本书的第三章，传输层的学习。\n\n## 运输层和网络层的关系\n  在协议栈中，我们都知道运输层位于网络层之上。网络层提供了主机之间的通信，而运输层为位于主机上的不同进程之间提供了逻辑通信。\n\n## 多路复用与多路分解\n首先我们需要明确，一个进程有一个或者多个套接字，它相当于从网络向进程传递数据和从进程向网络传递数据的门户。在接收主机上的运输层实际上并没有将数据报直接交给进程，而是将数据报交给了一个中间套接字。\n现在我们就可以考虑接收主机怎样将一个运输层报文段传输到适当的套接字。为此目的，每个运输层的报文段中具有几个字段。在接收端运输层通过检查这几个字段，进而标识将数据定向到指定套接字。将运输层报文段正确交付给套接字的工作成为**多路分解**。\n对应的在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息生成报文段，然后将此报文段传递到网络层，所有这些工作成为**多路复用**。\n\n在主机中如果将报文段识别定向到对应的套接字是通过**端口号**来标识的。\n**总结：** 在主机上的每个套接字能分配一个对应的端口号，当报文段到达主机时，运输层检查报文段中的目的端口号，并将其定向到对应的套接字。最后通过套接字进入到其所连接的进程。\n\n\n## 无连接传输：UDP\n\nUDP协议是不需要建立连接的传输，也就是无需三次握手，是一种不可靠传输，而且没有提供拥塞控制。\n\n有可能引发，所有基于UDP协议的应用程序客户端，都没有流量控制，可能会使整条链路流量带宽被耗尽，其他UDP客户端的高丢包率，也可能使TCP应用没有带宽可用，因为它的拥塞控制，会限制数据报的发送。\n\nUDP提供了**检验和**来验证数据报的正确性，之所以提供这种手段，原因在于不能保证源和目的之间的所有链路都提供了差错校验； 也就是说，这些链路中也许某一条使用没有差错校验的协议。此外，即使报文经链路正确的传输，当报文段存储在某台路由器内存时，也可能引入比特差错，因此UDP 在端到端基础上在运输层提供差错校验。\n\n## 可靠数据传输原理\n\n\n\n![可靠数据传输：服务模型与服务实现](http://media.coderluo.top/计算机网络/kj2u4.png)\n\n在可靠传输协议中，为了提高发送效率一般采用流水线，即无需等待确认回复，继续发送下一个分组，下面记录下解决流水线差错恢复的两种基本方法： **回退N步（Go_Back_N,GBN）** 和 **选择重传(Selective Repeat, SR)**\n\n### 回退N步\n\n> 在回退N步协议中，允许发送方发送多个分组（当有多个分组可用时）而不需要等待确认，但它也受限于在流水线中未确认的分组数不能超过某个最大允许数N。\n\n\n![在GBN中发送方看到的序号](http://media.coderluo.top/计算机网络/k07p7.png)\n\n在上图中，展示了发送方看到的GBN协议的序号范围。如果我们将基序号（base）定义为最早的未被确认的分组序号，将 下一个序号（nextseqnum） 定义为最小的未使用序号（即下一个待发分组号），则可以将序号范围划分为4段：\n1. 在[0,base-1] 段内的序号对应于已经发送b并被确认的分组。\n2. [base,nextseqnum-1]段内对应已经发送但未被确认的分组。\n3. [nextseqnum,base+N-1] 段内的序号能用于那些要被立即发送的分组，如果有数据来自上层的话。\n4. 最后，大于或者等于base+N的序号是不能使用的，直到当前流水线中未被确认的分组已得到确认为止。\n\nGBN协议也被称为**滑动窗口协议**\n\n![可靠数据传输机制及其用途的总结](http://media.coderluo.top/计算机网络/csxo3.png)\n\n## TCP连接\n\nTCP是一个全双工通信模型，简要概括如下图所示：\n![TCP发送缓存和接收缓存](http://media.coderluo.top/计算机网络/a3e21.png)\n\n\n### TCP 报文段结构\n![TCP报文结构](http://media.coderluo.top/计算机网络/jl4qk.png)\n\n1. 序号和确认号\n  TCP报文段首部中最重要的字段是序号和确认号。因为他们是TCP可靠传输服务的关键部分。\n\nTCP 将数据看成是一个无结构的，有序的字节流。这里需要强调序号是建立在传送的字节流上的，而不是建立在传输的报文段的序列之上。\n\n**一个报文段的编号** 是该报文段首字节的字节流编号。 \n\n![文件数据划分成TCP报文段](http://media.coderluo.top/计算机网络/i12ey.png)\n\n确认号是接收主机期望从发送主机收到的下一字节的序号。\n\n### 可靠数据传输\n\nTCP在发送数据后，假设丢包采用累计确认，后面的确认了则前面未确认的都认为已经接收到了，不在重传。\n\n\n![TCP三次握手-报文交换](http://media.coderluo.top/计算机网络/2cwdd.png)\n\n![关闭一条TCP连接](http://media.coderluo.top/计算机网络/997bg.png)\n\n\n![客户TCP经历的典型TCP状态序列](http://media.coderluo.top/计算机网络/c6k3s.png)\n\n![服务端TCP经历的典型TCP状态序列](http://media.coderluo.top/计算机网络/rjr8k.png)\n\n\n## TCP 拥塞控制\n\nTCP使用的端到端的拥塞控制，而不是使用网络辅助的拥塞控制，因为IP层不向端系统提供显式的网络拥塞反馈。\n\nTCP拥塞控制算法：\n1. 慢启动\n2. 拥塞避免\n3. 快速恢复\n\n总结：TCP控制是：每个RTT内cwnd线性（加性）增加1MSS，然后出现3个冗余ACK事件时 cwnd减半（乘性减）。因此，TCP拥塞控制常被称为 **加性增，乘性减**拥塞控制方式。\n\n**TCP是非常复杂的，它涉及了连接管理（三次握手，四次挥手）、流量控制（滑动窗口）、往返时间估计（RTT加权）、以及可靠数据传送（确认、定时器、重传以及序号机制）**","slug":"计算机网络/chapter3-传输层","published":1,"updated":"2019-09-28T15:54:18.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck13qknjo0001veo6zt6t86sz","content":"<blockquote>\n<p>这周来到，《自算计网络自顶向下》 这本书的第三章，传输层的学习。</p>\n</blockquote>\n<h2 id=\"运输层和网络层的关系\"><a href=\"#运输层和网络层的关系\" class=\"headerlink\" title=\"运输层和网络层的关系\"></a>运输层和网络层的关系</h2><p>  在协议栈中，我们都知道运输层位于网络层之上。网络层提供了主机之间的通信，而运输层为位于主机上的不同进程之间提供了逻辑通信。</p>\n<h2 id=\"多路复用与多路分解\"><a href=\"#多路复用与多路分解\" class=\"headerlink\" title=\"多路复用与多路分解\"></a>多路复用与多路分解</h2><p>首先我们需要明确，一个进程有一个或者多个套接字，它相当于从网络向进程传递数据和从进程向网络传递数据的门户。在接收主机上的运输层实际上并没有将数据报直接交给进程，而是将数据报交给了一个中间套接字。<br>现在我们就可以考虑接收主机怎样将一个运输层报文段传输到适当的套接字。为此目的，每个运输层的报文段中具有几个字段。在接收端运输层通过检查这几个字段，进而标识将数据定向到指定套接字。将运输层报文段正确交付给套接字的工作成为<strong>多路分解</strong>。<br>对应的在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息生成报文段，然后将此报文段传递到网络层，所有这些工作成为<strong>多路复用</strong>。</p>\n<p>在主机中如果将报文段识别定向到对应的套接字是通过<strong>端口号</strong>来标识的。<br><strong>总结：</strong> 在主机上的每个套接字能分配一个对应的端口号，当报文段到达主机时，运输层检查报文段中的目的端口号，并将其定向到对应的套接字。最后通过套接字进入到其所连接的进程。</p>\n<h2 id=\"无连接传输：UDP\"><a href=\"#无连接传输：UDP\" class=\"headerlink\" title=\"无连接传输：UDP\"></a>无连接传输：UDP</h2><p>UDP协议是不需要建立连接的传输，也就是无需三次握手，是一种不可靠传输，而且没有提供拥塞控制。</p>\n<p>有可能引发，所有基于UDP协议的应用程序客户端，都没有流量控制，可能会使整条链路流量带宽被耗尽，其他UDP客户端的高丢包率，也可能使TCP应用没有带宽可用，因为它的拥塞控制，会限制数据报的发送。</p>\n<p>UDP提供了<strong>检验和</strong>来验证数据报的正确性，之所以提供这种手段，原因在于不能保证源和目的之间的所有链路都提供了差错校验； 也就是说，这些链路中也许某一条使用没有差错校验的协议。此外，即使报文经链路正确的传输，当报文段存储在某台路由器内存时，也可能引入比特差错，因此UDP 在端到端基础上在运输层提供差错校验。</p>\n<h2 id=\"可靠数据传输原理\"><a href=\"#可靠数据传输原理\" class=\"headerlink\" title=\"可靠数据传输原理\"></a>可靠数据传输原理</h2><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/kj2u4.png\" alt=\"可靠数据传输：服务模型与服务实现\"></p>\n<p>在可靠传输协议中，为了提高发送效率一般采用流水线，即无需等待确认回复，继续发送下一个分组，下面记录下解决流水线差错恢复的两种基本方法： <strong>回退N步（Go_Back_N,GBN）</strong> 和 <strong>选择重传(Selective Repeat, SR)</strong></p>\n<h3 id=\"回退N步\"><a href=\"#回退N步\" class=\"headerlink\" title=\"回退N步\"></a>回退N步</h3><blockquote>\n<p>在回退N步协议中，允许发送方发送多个分组（当有多个分组可用时）而不需要等待确认，但它也受限于在流水线中未确认的分组数不能超过某个最大允许数N。</p>\n</blockquote>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/k07p7.png\" alt=\"在GBN中发送方看到的序号\"></p>\n<p>在上图中，展示了发送方看到的GBN协议的序号范围。如果我们将基序号（base）定义为最早的未被确认的分组序号，将 下一个序号（nextseqnum） 定义为最小的未使用序号（即下一个待发分组号），则可以将序号范围划分为4段：</p>\n<ol>\n<li>在[0,base-1] 段内的序号对应于已经发送b并被确认的分组。</li>\n<li>[base,nextseqnum-1]段内对应已经发送但未被确认的分组。</li>\n<li>[nextseqnum,base+N-1] 段内的序号能用于那些要被立即发送的分组，如果有数据来自上层的话。</li>\n<li>最后，大于或者等于base+N的序号是不能使用的，直到当前流水线中未被确认的分组已得到确认为止。</li>\n</ol>\n<p>GBN协议也被称为<strong>滑动窗口协议</strong></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/csxo3.png\" alt=\"可靠数据传输机制及其用途的总结\"></p>\n<h2 id=\"TCP连接\"><a href=\"#TCP连接\" class=\"headerlink\" title=\"TCP连接\"></a>TCP连接</h2><p>TCP是一个全双工通信模型，简要概括如下图所示：<br><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/a3e21.png\" alt=\"TCP发送缓存和接收缓存\"></p>\n<h3 id=\"TCP-报文段结构\"><a href=\"#TCP-报文段结构\" class=\"headerlink\" title=\"TCP 报文段结构\"></a>TCP 报文段结构</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jl4qk.png\" alt=\"TCP报文结构\"></p>\n<ol>\n<li>序号和确认号<br>TCP报文段首部中最重要的字段是序号和确认号。因为他们是TCP可靠传输服务的关键部分。</li>\n</ol>\n<p>TCP 将数据看成是一个无结构的，有序的字节流。这里需要强调序号是建立在传送的字节流上的，而不是建立在传输的报文段的序列之上。</p>\n<p><strong>一个报文段的编号</strong> 是该报文段首字节的字节流编号。 </p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/i12ey.png\" alt=\"文件数据划分成TCP报文段\"></p>\n<p>确认号是接收主机期望从发送主机收到的下一字节的序号。</p>\n<h3 id=\"可靠数据传输\"><a href=\"#可靠数据传输\" class=\"headerlink\" title=\"可靠数据传输\"></a>可靠数据传输</h3><p>TCP在发送数据后，假设丢包采用累计确认，后面的确认了则前面未确认的都认为已经接收到了，不在重传。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2cwdd.png\" alt=\"TCP三次握手-报文交换\"></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/997bg.png\" alt=\"关闭一条TCP连接\"></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/c6k3s.png\" alt=\"客户TCP经历的典型TCP状态序列\"></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/rjr8k.png\" alt=\"服务端TCP经历的典型TCP状态序列\"></p>\n<h2 id=\"TCP-拥塞控制\"><a href=\"#TCP-拥塞控制\" class=\"headerlink\" title=\"TCP 拥塞控制\"></a>TCP 拥塞控制</h2><p>TCP使用的端到端的拥塞控制，而不是使用网络辅助的拥塞控制，因为IP层不向端系统提供显式的网络拥塞反馈。</p>\n<p>TCP拥塞控制算法：</p>\n<ol>\n<li>慢启动</li>\n<li>拥塞避免</li>\n<li>快速恢复</li>\n</ol>\n<p>总结：TCP控制是：每个RTT内cwnd线性（加性）增加1MSS，然后出现3个冗余ACK事件时 cwnd减半（乘性减）。因此，TCP拥塞控制常被称为 <strong>加性增，乘性减</strong>拥塞控制方式。</p>\n<p><strong>TCP是非常复杂的，它涉及了连接管理（三次握手，四次挥手）、流量控制（滑动窗口）、往返时间估计（RTT加权）、以及可靠数据传送（确认、定时器、重传以及序号机制）</strong></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>这周来到，《自算计网络自顶向下》 这本书的第三章，传输层的学习。</p>\n</blockquote>\n<h2 id=\"运输层和网络层的关系\"><a href=\"#运输层和网络层的关系\" class=\"headerlink\" title=\"运输层和网络层的关系\"></a>运输层和网络层的关系</h2><p>  在协议栈中，我们都知道运输层位于网络层之上。网络层提供了主机之间的通信，而运输层为位于主机上的不同进程之间提供了逻辑通信。</p>\n<h2 id=\"多路复用与多路分解\"><a href=\"#多路复用与多路分解\" class=\"headerlink\" title=\"多路复用与多路分解\"></a>多路复用与多路分解</h2><p>首先我们需要明确，一个进程有一个或者多个套接字，它相当于从网络向进程传递数据和从进程向网络传递数据的门户。在接收主机上的运输层实际上并没有将数据报直接交给进程，而是将数据报交给了一个中间套接字。<br>现在我们就可以考虑接收主机怎样将一个运输层报文段传输到适当的套接字。为此目的，每个运输层的报文段中具有几个字段。在接收端运输层通过检查这几个字段，进而标识将数据定向到指定套接字。将运输层报文段正确交付给套接字的工作成为<strong>多路分解</strong>。<br>对应的在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息生成报文段，然后将此报文段传递到网络层，所有这些工作成为<strong>多路复用</strong>。</p>\n<p>在主机中如果将报文段识别定向到对应的套接字是通过<strong>端口号</strong>来标识的。<br><strong>总结：</strong> 在主机上的每个套接字能分配一个对应的端口号，当报文段到达主机时，运输层检查报文段中的目的端口号，并将其定向到对应的套接字。最后通过套接字进入到其所连接的进程。</p>\n<h2 id=\"无连接传输：UDP\"><a href=\"#无连接传输：UDP\" class=\"headerlink\" title=\"无连接传输：UDP\"></a>无连接传输：UDP</h2><p>UDP协议是不需要建立连接的传输，也就是无需三次握手，是一种不可靠传输，而且没有提供拥塞控制。</p>\n<p>有可能引发，所有基于UDP协议的应用程序客户端，都没有流量控制，可能会使整条链路流量带宽被耗尽，其他UDP客户端的高丢包率，也可能使TCP应用没有带宽可用，因为它的拥塞控制，会限制数据报的发送。</p>\n<p>UDP提供了<strong>检验和</strong>来验证数据报的正确性，之所以提供这种手段，原因在于不能保证源和目的之间的所有链路都提供了差错校验； 也就是说，这些链路中也许某一条使用没有差错校验的协议。此外，即使报文经链路正确的传输，当报文段存储在某台路由器内存时，也可能引入比特差错，因此UDP 在端到端基础上在运输层提供差错校验。</p>\n<h2 id=\"可靠数据传输原理\"><a href=\"#可靠数据传输原理\" class=\"headerlink\" title=\"可靠数据传输原理\"></a>可靠数据传输原理</h2><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/kj2u4.png\" alt=\"可靠数据传输：服务模型与服务实现\"></p>\n<p>在可靠传输协议中，为了提高发送效率一般采用流水线，即无需等待确认回复，继续发送下一个分组，下面记录下解决流水线差错恢复的两种基本方法： <strong>回退N步（Go_Back_N,GBN）</strong> 和 <strong>选择重传(Selective Repeat, SR)</strong></p>\n<h3 id=\"回退N步\"><a href=\"#回退N步\" class=\"headerlink\" title=\"回退N步\"></a>回退N步</h3><blockquote>\n<p>在回退N步协议中，允许发送方发送多个分组（当有多个分组可用时）而不需要等待确认，但它也受限于在流水线中未确认的分组数不能超过某个最大允许数N。</p>\n</blockquote>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/k07p7.png\" alt=\"在GBN中发送方看到的序号\"></p>\n<p>在上图中，展示了发送方看到的GBN协议的序号范围。如果我们将基序号（base）定义为最早的未被确认的分组序号，将 下一个序号（nextseqnum） 定义为最小的未使用序号（即下一个待发分组号），则可以将序号范围划分为4段：</p>\n<ol>\n<li>在[0,base-1] 段内的序号对应于已经发送b并被确认的分组。</li>\n<li>[base,nextseqnum-1]段内对应已经发送但未被确认的分组。</li>\n<li>[nextseqnum,base+N-1] 段内的序号能用于那些要被立即发送的分组，如果有数据来自上层的话。</li>\n<li>最后，大于或者等于base+N的序号是不能使用的，直到当前流水线中未被确认的分组已得到确认为止。</li>\n</ol>\n<p>GBN协议也被称为<strong>滑动窗口协议</strong></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/csxo3.png\" alt=\"可靠数据传输机制及其用途的总结\"></p>\n<h2 id=\"TCP连接\"><a href=\"#TCP连接\" class=\"headerlink\" title=\"TCP连接\"></a>TCP连接</h2><p>TCP是一个全双工通信模型，简要概括如下图所示：<br><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/a3e21.png\" alt=\"TCP发送缓存和接收缓存\"></p>\n<h3 id=\"TCP-报文段结构\"><a href=\"#TCP-报文段结构\" class=\"headerlink\" title=\"TCP 报文段结构\"></a>TCP 报文段结构</h3><p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jl4qk.png\" alt=\"TCP报文结构\"></p>\n<ol>\n<li>序号和确认号<br>TCP报文段首部中最重要的字段是序号和确认号。因为他们是TCP可靠传输服务的关键部分。</li>\n</ol>\n<p>TCP 将数据看成是一个无结构的，有序的字节流。这里需要强调序号是建立在传送的字节流上的，而不是建立在传输的报文段的序列之上。</p>\n<p><strong>一个报文段的编号</strong> 是该报文段首字节的字节流编号。 </p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/i12ey.png\" alt=\"文件数据划分成TCP报文段\"></p>\n<p>确认号是接收主机期望从发送主机收到的下一字节的序号。</p>\n<h3 id=\"可靠数据传输\"><a href=\"#可靠数据传输\" class=\"headerlink\" title=\"可靠数据传输\"></a>可靠数据传输</h3><p>TCP在发送数据后，假设丢包采用累计确认，后面的确认了则前面未确认的都认为已经接收到了，不在重传。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2cwdd.png\" alt=\"TCP三次握手-报文交换\"></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/997bg.png\" alt=\"关闭一条TCP连接\"></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/c6k3s.png\" alt=\"客户TCP经历的典型TCP状态序列\"></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/rjr8k.png\" alt=\"服务端TCP经历的典型TCP状态序列\"></p>\n<h2 id=\"TCP-拥塞控制\"><a href=\"#TCP-拥塞控制\" class=\"headerlink\" title=\"TCP 拥塞控制\"></a>TCP 拥塞控制</h2><p>TCP使用的端到端的拥塞控制，而不是使用网络辅助的拥塞控制，因为IP层不向端系统提供显式的网络拥塞反馈。</p>\n<p>TCP拥塞控制算法：</p>\n<ol>\n<li>慢启动</li>\n<li>拥塞避免</li>\n<li>快速恢复</li>\n</ol>\n<p>总结：TCP控制是：每个RTT内cwnd线性（加性）增加1MSS，然后出现3个冗余ACK事件时 cwnd减半（乘性减）。因此，TCP拥塞控制常被称为 <strong>加性增，乘性减</strong>拥塞控制方式。</p>\n<p><strong>TCP是非常复杂的，它涉及了连接管理（三次握手，四次挥手）、流量控制（滑动窗口）、往返时间估计（RTT加权）、以及可靠数据传送（确认、定时器、重传以及序号机制）</strong></p>\n"},{"title":"chapter2-应用层","date":"2019-09-14T07:01:57.000Z","_content":"\n\n\n\n\n> 本周进入到第二章应用层的学习，不得不说自顶向下学习果然能激发兴趣，因为平时开发工作经常也就是和应用层打交道，但是对具体原理总是一知半解，随着这章的阅读，能让自己对我们开发的应用程序，是怎样利用网络实现其功能的，有了更深入的了解。\n\n我们日常中所用到的，开发的软件基本都是基于应用层的软件。不需要关心数据包到底是如何传输的，只需要按照应用层对接下一层的协议接口进行开发就可以了。 \n\n应用程序体系结构，我们最常用的是客户-服务器体系结构，比如生活中最常用的浏览器就是这种模式的。有一个总是打开的服务器用来接收各个客户端的请求，返回对应的数据。  另一个就是P2P 体系结构，和客户-服务器相反，这些应用程序在间断连接的主机之间使用直接通信，这些主机也被称为对等方。\n\n\n在操作系统中，程序之间的通信是通过进行来进行的，而不是程序。一个进程可以被认为是一个端系统中的一个程序，当进程运行在同一个端系统上时，它们使用进程间通信机制进行通信。进程间的通信规则有端系统山的操作系统决定。\n\n我们现在知道了多数应用程序是通过通信进程对组成，每对中的两个进行 互相发动报文。从一个进程向另一个进行发送报文必须通过下层的计算机网络。这里进程是通过一个被称之为套接字的软件接口向网络发送报文和从网络接收报文的。\n\n**进程寻址** \n\n为了向特定的目的地的主机上的进程发送分组，接收进程需要一个地址，而为了标识接收进程是需要通过：\n1. 主机的地址；\n2. 定义在目标主机的进程的端口号；\n\n我们在开发应用层程序时，是不需要考虑具体是怎样将发送的数据分组发送到目的主机的，对于应用层程序来说，只需要将数据分组推送进套接字。而在套接字的另一侧， 运输层协议负责使该数据分组进入接收进程的套接字。\n\n因特网提供的运输层的协议不止一种，我们最常见的当属 TCP、UDP 了，具体使用需要从以下几个方面进行衡量：\n1. 可靠数据传输；\n2. 吞吐量；\n3. 定时\n4. 安全性；\n\n总结来说，TCP 提供了可靠地数据传输，因为其建立在三次握手的基础上，能够保证数据到达目的进程。UDP 是一种轻量级运输协议，没有拥塞控制，提供一种不可靠数据传输服务，也就是说，UDP客户端可以用任何它选定的速率向其下层注入数据，一般网络电话可以容忍范围内的数据丢失，更愿意应用运行在UDP上。\n\n### 应用层协议\n\n说到Web其应用层协议就是HTTP。\nHTTP 请求报文：\n\n```html\nGET /api/monitoring/converged-status HTTP/1.1\\r\\n\nHost: 192.168.8.1\\r\\n\nConnection: keep-alive\\r\\n\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\\r\\n\nAccept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8\\r\\n\n\n```\n\n第一行为请求航，其后的都叫做首部行。\n\n请求行的三个字段代表的是 方法字段、URL字段、HTTP版本字段\n当请求为POST方式时，在首部行下方还有一个实体体，用来存放表单提交的数据。\n\n\nHTTP响应报文：\n\n```\nHTTP/1.1 200 OK\\r\\n\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\n\nContent-Type: text/html\\r\\n\nConnection: Keep-Alive\\r\\n\nContent-Length: 1073\\r\\n\n\nFile Data: 1073 bytes\n\n\n```\n\n响应报文，也有三个部分，状态行、首部行、然后是实体体。实体体是报文的主要部分，即它包含了所请求对象的本身。\n\n\n### FTP文件传输协议\n\n应用层协议FTP，作为一个文件传输协议，其和HTTP有相似的地方，底层都采用TCP传输协议，然而这两个应用也有也有一些重要的区别，其中最显著的就是 **FTP** 使用了两个并行的 **TCP** 连接来传输文件，一个是控制连接，一个是数据连接。 **控制链接** 用来在两主机之间传入控制信息，如用户表示、口令、改变远程目录的命令以及存放和获取文件的命令。数据连接用来实际发送一个文件。\n\n### SMTP\n\nSMTP 是因特网电子邮件应用的核心，这个协议是用来从发送方的邮件服务器发送报文到接收方的邮件服务器的。\n\n\n![](http://media.coderluo.top/计算机网络/poj7j.png)\n\n如上图所示，SMTP 的作用就是将邮件报文从发送邮件服务器送到接收邮件服务器。 下面大概解释下具体流程。\n首先，客户SMTP（运行在发送邮件服务器上）在25 端口建立一个到服务器SMTP（运行在接收邮件服务器上）的TCP连接。 如果服务器没有开机，客户会在稍后进行重试，一旦连接建立，服务器和客户执行某些应用层的握手后，就向人们在互相交流前先进行自我介绍一样。在SMTP握手阶段，SMTP 客户指示发送方邮件地址（产生报文的那个人）和接收方邮件地址，一旦该SMTP客户和服务器彼此介绍之后 ，客户发送该报文。\n\n这里在记录一个比较明显的问题，那就是在Bob的邮件服务器接收到邮件后，他的本地PC上的代理是如何获得位于他的某ISP 邮件服务器上的邮件呢？ 这里不能再使用SMTP了，因为这里需要的是一个拉协议， 而SMTP 是一个推协议，目前流行的一些邮件访问协议可以解决这个问题，包括第三版的邮局协议（POP3） 、因特网邮件访问协议（Internet Access Protocol，IMAP） 以及HTTP。\n\n总结: SMTP 用来将邮件从发送方的邮件服务器传输到接收方的邮件服务器；SMTP 也用来将邮件从发送方的用户代理传送到发送方的邮件服务器。如POP3这样的邮件访问协议可以用来将邮件从接收方的邮件服务器传送到接收方的用户代理。\n\n### DNS （Domain Name System）\n\n> DNS 是： 1. 一个由分层的 **DNS服务器**（DNS server） 实现的分布式数据库；2. 一个使得主机能够查询分布式数据库的应用层协议。 DNS服务器通常是运行BIND (Berkeley Internet Name Domain) 软件的UNIX机器。 DNS 协议运行在 UDP之上，使用53号端口。与 HTTP、FTP 和 SMTP 协议一样，DNS 协议是应用层协议。\n\nDNS服务器不可能是单一部署的，它是一个巨大的具有代表性的分布式数据库；\n\n![](http://media.coderluo.top/计算机网络/v7fiq.png)\n\n\nDNS 是由很多DNS服务器组成，映射关系分布在全世界范围内的所有DNS服务器上。 \n\nDNS服务器分为三种： 根DNS服务器、顶级域（TOP-Level Domain，TLD） DNS服务器和 权威DNS服务器。\n\n接下来记录一下，这三种DNS服务器之间的交互方式， 假设我现在要访问 `www.baidu.com` , 首先我本机的DNS客户端与根服务器之一联系，它将返回顶级域名 com 的TLD服务器 IP地址。然后 我在与这些TLD服务器之一联系，它将返回 baidu.com 的权威服务器的 IP地址。最后我将与 baidu.com 权威服务器之一联系，它将为 www.baidu.com 返回其 IP 地址。\n\n\n上面说的三类DNS服务器都是处在 DNS服务器的层次结构中， 在这里我们学习到还有一类非常重要的DNS服务器，称为 **本地DNS服务器**。 一个 本地DNS服务器，严格来说不属于DNS服务器的层次结构，但它是非常重要的。 每个 **ISP(Internet Service Provider)**  都有一台本地DNS 服务器。 通过访问Windows 或者UNIX 的网络状态窗口，能够很容易的确定你本地DNS服务器的IP地址。 一般 本地DNS服务器“临近” 本主机。 基本上 ISP 的本地DNS服务器与主机相隔不超过几个路由器。\n\n**下面这幅图用来理解本地DNS服务器在交互中起的作用：**\n\n\n![](http://media.coderluo.top/计算机网络/000vv.png)\n\n\n接下来，要说一个DNS系统中非常重要的一个特色，DNS 是有缓存的。为了减少时延并且有效减少因特网上到处传输的DNS报文数量， DNS 会将每一个DNS 回答缓存在本地存储中。 例如本地DNS服务器在接收到一个回答时，它能够将回答中的任何信息都缓存起来，在下一个相同主机名查询时可以直接返回。**由于主机和主机名以及IP地址之间的映射不是永久的，因此会有一个过期时间，一般缓存2天。**\n\n> 本地 DNS服务器 也能缓存 TLD服务器的IP 地址，因而允许本地DNS绕过查询链路中的根DNS服务器。\n\n\n学习了上面几种应用层协议，接下来我们了解下P2P协议。\n\n### P2P\n\n说到P2P我们常见的就是文件分发了，它和客户端-服务器模式不同，采用了一种对等方的概念。\n\n举例来说，平时我们用的种子下载，传统下载我们是从本地客户端和资源服务器建立连接，从服务器下载，下载速度受限于服务器的上载速率以及本地客户端网络的下载速率。 而P2P下载则是所有下载方都是可以一边下载，一边将自己已经下载的资源利用上载带宽上传供其他下载者下载，从而提高效率。\n\n常见的应用有如：BitTorrent等。","source":"_posts/计算机网络/chapter2-应用层.md","raw":"---\ntitle: chapter2-应用层\ntags:\n  - 应用层\ndate: 2019-09-14 15:01:57\ncategories: 计算机网络\n---\n\n\n\n\n\n> 本周进入到第二章应用层的学习，不得不说自顶向下学习果然能激发兴趣，因为平时开发工作经常也就是和应用层打交道，但是对具体原理总是一知半解，随着这章的阅读，能让自己对我们开发的应用程序，是怎样利用网络实现其功能的，有了更深入的了解。\n\n我们日常中所用到的，开发的软件基本都是基于应用层的软件。不需要关心数据包到底是如何传输的，只需要按照应用层对接下一层的协议接口进行开发就可以了。 \n\n应用程序体系结构，我们最常用的是客户-服务器体系结构，比如生活中最常用的浏览器就是这种模式的。有一个总是打开的服务器用来接收各个客户端的请求，返回对应的数据。  另一个就是P2P 体系结构，和客户-服务器相反，这些应用程序在间断连接的主机之间使用直接通信，这些主机也被称为对等方。\n\n\n在操作系统中，程序之间的通信是通过进行来进行的，而不是程序。一个进程可以被认为是一个端系统中的一个程序，当进程运行在同一个端系统上时，它们使用进程间通信机制进行通信。进程间的通信规则有端系统山的操作系统决定。\n\n我们现在知道了多数应用程序是通过通信进程对组成，每对中的两个进行 互相发动报文。从一个进程向另一个进行发送报文必须通过下层的计算机网络。这里进程是通过一个被称之为套接字的软件接口向网络发送报文和从网络接收报文的。\n\n**进程寻址** \n\n为了向特定的目的地的主机上的进程发送分组，接收进程需要一个地址，而为了标识接收进程是需要通过：\n1. 主机的地址；\n2. 定义在目标主机的进程的端口号；\n\n我们在开发应用层程序时，是不需要考虑具体是怎样将发送的数据分组发送到目的主机的，对于应用层程序来说，只需要将数据分组推送进套接字。而在套接字的另一侧， 运输层协议负责使该数据分组进入接收进程的套接字。\n\n因特网提供的运输层的协议不止一种，我们最常见的当属 TCP、UDP 了，具体使用需要从以下几个方面进行衡量：\n1. 可靠数据传输；\n2. 吞吐量；\n3. 定时\n4. 安全性；\n\n总结来说，TCP 提供了可靠地数据传输，因为其建立在三次握手的基础上，能够保证数据到达目的进程。UDP 是一种轻量级运输协议，没有拥塞控制，提供一种不可靠数据传输服务，也就是说，UDP客户端可以用任何它选定的速率向其下层注入数据，一般网络电话可以容忍范围内的数据丢失，更愿意应用运行在UDP上。\n\n### 应用层协议\n\n说到Web其应用层协议就是HTTP。\nHTTP 请求报文：\n\n```html\nGET /api/monitoring/converged-status HTTP/1.1\\r\\n\nHost: 192.168.8.1\\r\\n\nConnection: keep-alive\\r\\n\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\\r\\n\nAccept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8\\r\\n\n\n```\n\n第一行为请求航，其后的都叫做首部行。\n\n请求行的三个字段代表的是 方法字段、URL字段、HTTP版本字段\n当请求为POST方式时，在首部行下方还有一个实体体，用来存放表单提交的数据。\n\n\nHTTP响应报文：\n\n```\nHTTP/1.1 200 OK\\r\\n\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\n\nContent-Type: text/html\\r\\n\nConnection: Keep-Alive\\r\\n\nContent-Length: 1073\\r\\n\n\nFile Data: 1073 bytes\n\n\n```\n\n响应报文，也有三个部分，状态行、首部行、然后是实体体。实体体是报文的主要部分，即它包含了所请求对象的本身。\n\n\n### FTP文件传输协议\n\n应用层协议FTP，作为一个文件传输协议，其和HTTP有相似的地方，底层都采用TCP传输协议，然而这两个应用也有也有一些重要的区别，其中最显著的就是 **FTP** 使用了两个并行的 **TCP** 连接来传输文件，一个是控制连接，一个是数据连接。 **控制链接** 用来在两主机之间传入控制信息，如用户表示、口令、改变远程目录的命令以及存放和获取文件的命令。数据连接用来实际发送一个文件。\n\n### SMTP\n\nSMTP 是因特网电子邮件应用的核心，这个协议是用来从发送方的邮件服务器发送报文到接收方的邮件服务器的。\n\n\n![](http://media.coderluo.top/计算机网络/poj7j.png)\n\n如上图所示，SMTP 的作用就是将邮件报文从发送邮件服务器送到接收邮件服务器。 下面大概解释下具体流程。\n首先，客户SMTP（运行在发送邮件服务器上）在25 端口建立一个到服务器SMTP（运行在接收邮件服务器上）的TCP连接。 如果服务器没有开机，客户会在稍后进行重试，一旦连接建立，服务器和客户执行某些应用层的握手后，就向人们在互相交流前先进行自我介绍一样。在SMTP握手阶段，SMTP 客户指示发送方邮件地址（产生报文的那个人）和接收方邮件地址，一旦该SMTP客户和服务器彼此介绍之后 ，客户发送该报文。\n\n这里在记录一个比较明显的问题，那就是在Bob的邮件服务器接收到邮件后，他的本地PC上的代理是如何获得位于他的某ISP 邮件服务器上的邮件呢？ 这里不能再使用SMTP了，因为这里需要的是一个拉协议， 而SMTP 是一个推协议，目前流行的一些邮件访问协议可以解决这个问题，包括第三版的邮局协议（POP3） 、因特网邮件访问协议（Internet Access Protocol，IMAP） 以及HTTP。\n\n总结: SMTP 用来将邮件从发送方的邮件服务器传输到接收方的邮件服务器；SMTP 也用来将邮件从发送方的用户代理传送到发送方的邮件服务器。如POP3这样的邮件访问协议可以用来将邮件从接收方的邮件服务器传送到接收方的用户代理。\n\n### DNS （Domain Name System）\n\n> DNS 是： 1. 一个由分层的 **DNS服务器**（DNS server） 实现的分布式数据库；2. 一个使得主机能够查询分布式数据库的应用层协议。 DNS服务器通常是运行BIND (Berkeley Internet Name Domain) 软件的UNIX机器。 DNS 协议运行在 UDP之上，使用53号端口。与 HTTP、FTP 和 SMTP 协议一样，DNS 协议是应用层协议。\n\nDNS服务器不可能是单一部署的，它是一个巨大的具有代表性的分布式数据库；\n\n![](http://media.coderluo.top/计算机网络/v7fiq.png)\n\n\nDNS 是由很多DNS服务器组成，映射关系分布在全世界范围内的所有DNS服务器上。 \n\nDNS服务器分为三种： 根DNS服务器、顶级域（TOP-Level Domain，TLD） DNS服务器和 权威DNS服务器。\n\n接下来记录一下，这三种DNS服务器之间的交互方式， 假设我现在要访问 `www.baidu.com` , 首先我本机的DNS客户端与根服务器之一联系，它将返回顶级域名 com 的TLD服务器 IP地址。然后 我在与这些TLD服务器之一联系，它将返回 baidu.com 的权威服务器的 IP地址。最后我将与 baidu.com 权威服务器之一联系，它将为 www.baidu.com 返回其 IP 地址。\n\n\n上面说的三类DNS服务器都是处在 DNS服务器的层次结构中， 在这里我们学习到还有一类非常重要的DNS服务器，称为 **本地DNS服务器**。 一个 本地DNS服务器，严格来说不属于DNS服务器的层次结构，但它是非常重要的。 每个 **ISP(Internet Service Provider)**  都有一台本地DNS 服务器。 通过访问Windows 或者UNIX 的网络状态窗口，能够很容易的确定你本地DNS服务器的IP地址。 一般 本地DNS服务器“临近” 本主机。 基本上 ISP 的本地DNS服务器与主机相隔不超过几个路由器。\n\n**下面这幅图用来理解本地DNS服务器在交互中起的作用：**\n\n\n![](http://media.coderluo.top/计算机网络/000vv.png)\n\n\n接下来，要说一个DNS系统中非常重要的一个特色，DNS 是有缓存的。为了减少时延并且有效减少因特网上到处传输的DNS报文数量， DNS 会将每一个DNS 回答缓存在本地存储中。 例如本地DNS服务器在接收到一个回答时，它能够将回答中的任何信息都缓存起来，在下一个相同主机名查询时可以直接返回。**由于主机和主机名以及IP地址之间的映射不是永久的，因此会有一个过期时间，一般缓存2天。**\n\n> 本地 DNS服务器 也能缓存 TLD服务器的IP 地址，因而允许本地DNS绕过查询链路中的根DNS服务器。\n\n\n学习了上面几种应用层协议，接下来我们了解下P2P协议。\n\n### P2P\n\n说到P2P我们常见的就是文件分发了，它和客户端-服务器模式不同，采用了一种对等方的概念。\n\n举例来说，平时我们用的种子下载，传统下载我们是从本地客户端和资源服务器建立连接，从服务器下载，下载速度受限于服务器的上载速率以及本地客户端网络的下载速率。 而P2P下载则是所有下载方都是可以一边下载，一边将自己已经下载的资源利用上载带宽上传供其他下载者下载，从而提高效率。\n\n常见的应用有如：BitTorrent等。","slug":"计算机网络/chapter2-应用层","published":1,"updated":"2019-09-28T15:54:05.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck13qknlb000aveo6z7o1oj02","content":"<blockquote>\n<p>本周进入到第二章应用层的学习，不得不说自顶向下学习果然能激发兴趣，因为平时开发工作经常也就是和应用层打交道，但是对具体原理总是一知半解，随着这章的阅读，能让自己对我们开发的应用程序，是怎样利用网络实现其功能的，有了更深入的了解。</p>\n</blockquote>\n<p>我们日常中所用到的，开发的软件基本都是基于应用层的软件。不需要关心数据包到底是如何传输的，只需要按照应用层对接下一层的协议接口进行开发就可以了。 </p>\n<p>应用程序体系结构，我们最常用的是客户-服务器体系结构，比如生活中最常用的浏览器就是这种模式的。有一个总是打开的服务器用来接收各个客户端的请求，返回对应的数据。  另一个就是P2P 体系结构，和客户-服务器相反，这些应用程序在间断连接的主机之间使用直接通信，这些主机也被称为对等方。</p>\n<p>在操作系统中，程序之间的通信是通过进行来进行的，而不是程序。一个进程可以被认为是一个端系统中的一个程序，当进程运行在同一个端系统上时，它们使用进程间通信机制进行通信。进程间的通信规则有端系统山的操作系统决定。</p>\n<p>我们现在知道了多数应用程序是通过通信进程对组成，每对中的两个进行 互相发动报文。从一个进程向另一个进行发送报文必须通过下层的计算机网络。这里进程是通过一个被称之为套接字的软件接口向网络发送报文和从网络接收报文的。</p>\n<p><strong>进程寻址</strong> </p>\n<p>为了向特定的目的地的主机上的进程发送分组，接收进程需要一个地址，而为了标识接收进程是需要通过：</p>\n<ol>\n<li>主机的地址；</li>\n<li>定义在目标主机的进程的端口号；</li>\n</ol>\n<p>我们在开发应用层程序时，是不需要考虑具体是怎样将发送的数据分组发送到目的主机的，对于应用层程序来说，只需要将数据分组推送进套接字。而在套接字的另一侧， 运输层协议负责使该数据分组进入接收进程的套接字。</p>\n<p>因特网提供的运输层的协议不止一种，我们最常见的当属 TCP、UDP 了，具体使用需要从以下几个方面进行衡量：</p>\n<ol>\n<li>可靠数据传输；</li>\n<li>吞吐量；</li>\n<li>定时</li>\n<li>安全性；</li>\n</ol>\n<p>总结来说，TCP 提供了可靠地数据传输，因为其建立在三次握手的基础上，能够保证数据到达目的进程。UDP 是一种轻量级运输协议，没有拥塞控制，提供一种不可靠数据传输服务，也就是说，UDP客户端可以用任何它选定的速率向其下层注入数据，一般网络电话可以容忍范围内的数据丢失，更愿意应用运行在UDP上。</p>\n<h3 id=\"应用层协议\"><a href=\"#应用层协议\" class=\"headerlink\" title=\"应用层协议\"></a>应用层协议</h3><p>说到Web其应用层协议就是HTTP。<br>HTTP 请求报文：</p>\n<pre class=\" language-html\"><code class=\"language-html\">GET /api/monitoring/converged-status HTTP/1.1\\r\\n\nHost: 192.168.8.1\\r\\n\nConnection: keep-alive\\r\\n\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\\r\\n\nAccept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8\\r\\n\n</code></pre>\n<p>第一行为请求航，其后的都叫做首部行。</p>\n<p>请求行的三个字段代表的是 方法字段、URL字段、HTTP版本字段<br>当请求为POST方式时，在首部行下方还有一个实体体，用来存放表单提交的数据。</p>\n<p>HTTP响应报文：</p>\n<pre><code>HTTP/1.1 200 OK\\r\\n\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\n\nContent-Type: text/html\\r\\n\nConnection: Keep-Alive\\r\\n\nContent-Length: 1073\\r\\n\n\nFile Data: 1073 bytes\n\n</code></pre><p>响应报文，也有三个部分，状态行、首部行、然后是实体体。实体体是报文的主要部分，即它包含了所请求对象的本身。</p>\n<h3 id=\"FTP文件传输协议\"><a href=\"#FTP文件传输协议\" class=\"headerlink\" title=\"FTP文件传输协议\"></a>FTP文件传输协议</h3><p>应用层协议FTP，作为一个文件传输协议，其和HTTP有相似的地方，底层都采用TCP传输协议，然而这两个应用也有也有一些重要的区别，其中最显著的就是 <strong>FTP</strong> 使用了两个并行的 <strong>TCP</strong> 连接来传输文件，一个是控制连接，一个是数据连接。 <strong>控制链接</strong> 用来在两主机之间传入控制信息，如用户表示、口令、改变远程目录的命令以及存放和获取文件的命令。数据连接用来实际发送一个文件。</p>\n<h3 id=\"SMTP\"><a href=\"#SMTP\" class=\"headerlink\" title=\"SMTP\"></a>SMTP</h3><p>SMTP 是因特网电子邮件应用的核心，这个协议是用来从发送方的邮件服务器发送报文到接收方的邮件服务器的。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/poj7j.png\" alt=\"\"></p>\n<p>如上图所示，SMTP 的作用就是将邮件报文从发送邮件服务器送到接收邮件服务器。 下面大概解释下具体流程。<br>首先，客户SMTP（运行在发送邮件服务器上）在25 端口建立一个到服务器SMTP（运行在接收邮件服务器上）的TCP连接。 如果服务器没有开机，客户会在稍后进行重试，一旦连接建立，服务器和客户执行某些应用层的握手后，就向人们在互相交流前先进行自我介绍一样。在SMTP握手阶段，SMTP 客户指示发送方邮件地址（产生报文的那个人）和接收方邮件地址，一旦该SMTP客户和服务器彼此介绍之后 ，客户发送该报文。</p>\n<p>这里在记录一个比较明显的问题，那就是在Bob的邮件服务器接收到邮件后，他的本地PC上的代理是如何获得位于他的某ISP 邮件服务器上的邮件呢？ 这里不能再使用SMTP了，因为这里需要的是一个拉协议， 而SMTP 是一个推协议，目前流行的一些邮件访问协议可以解决这个问题，包括第三版的邮局协议（POP3） 、因特网邮件访问协议（Internet Access Protocol，IMAP） 以及HTTP。</p>\n<p>总结: SMTP 用来将邮件从发送方的邮件服务器传输到接收方的邮件服务器；SMTP 也用来将邮件从发送方的用户代理传送到发送方的邮件服务器。如POP3这样的邮件访问协议可以用来将邮件从接收方的邮件服务器传送到接收方的用户代理。</p>\n<h3 id=\"DNS-（Domain-Name-System）\"><a href=\"#DNS-（Domain-Name-System）\" class=\"headerlink\" title=\"DNS （Domain Name System）\"></a>DNS （Domain Name System）</h3><blockquote>\n<p>DNS 是： 1. 一个由分层的 <strong>DNS服务器</strong>（DNS server） 实现的分布式数据库；2. 一个使得主机能够查询分布式数据库的应用层协议。 DNS服务器通常是运行BIND (Berkeley Internet Name Domain) 软件的UNIX机器。 DNS 协议运行在 UDP之上，使用53号端口。与 HTTP、FTP 和 SMTP 协议一样，DNS 协议是应用层协议。</p>\n</blockquote>\n<p>DNS服务器不可能是单一部署的，它是一个巨大的具有代表性的分布式数据库；</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/v7fiq.png\" alt=\"\"></p>\n<p>DNS 是由很多DNS服务器组成，映射关系分布在全世界范围内的所有DNS服务器上。 </p>\n<p>DNS服务器分为三种： 根DNS服务器、顶级域（TOP-Level Domain，TLD） DNS服务器和 权威DNS服务器。</p>\n<p>接下来记录一下，这三种DNS服务器之间的交互方式， 假设我现在要访问 <code>www.baidu.com</code> , 首先我本机的DNS客户端与根服务器之一联系，它将返回顶级域名 com 的TLD服务器 IP地址。然后 我在与这些TLD服务器之一联系，它将返回 baidu.com 的权威服务器的 IP地址。最后我将与 baidu.com 权威服务器之一联系，它将为 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> 返回其 IP 地址。</p>\n<p>上面说的三类DNS服务器都是处在 DNS服务器的层次结构中， 在这里我们学习到还有一类非常重要的DNS服务器，称为 <strong>本地DNS服务器</strong>。 一个 本地DNS服务器，严格来说不属于DNS服务器的层次结构，但它是非常重要的。 每个 <strong>ISP(Internet Service Provider)</strong>  都有一台本地DNS 服务器。 通过访问Windows 或者UNIX 的网络状态窗口，能够很容易的确定你本地DNS服务器的IP地址。 一般 本地DNS服务器“临近” 本主机。 基本上 ISP 的本地DNS服务器与主机相隔不超过几个路由器。</p>\n<p><strong>下面这幅图用来理解本地DNS服务器在交互中起的作用：</strong></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/000vv.png\" alt=\"\"></p>\n<p>接下来，要说一个DNS系统中非常重要的一个特色，DNS 是有缓存的。为了减少时延并且有效减少因特网上到处传输的DNS报文数量， DNS 会将每一个DNS 回答缓存在本地存储中。 例如本地DNS服务器在接收到一个回答时，它能够将回答中的任何信息都缓存起来，在下一个相同主机名查询时可以直接返回。<strong>由于主机和主机名以及IP地址之间的映射不是永久的，因此会有一个过期时间，一般缓存2天。</strong></p>\n<blockquote>\n<p>本地 DNS服务器 也能缓存 TLD服务器的IP 地址，因而允许本地DNS绕过查询链路中的根DNS服务器。</p>\n</blockquote>\n<p>学习了上面几种应用层协议，接下来我们了解下P2P协议。</p>\n<h3 id=\"P2P\"><a href=\"#P2P\" class=\"headerlink\" title=\"P2P\"></a>P2P</h3><p>说到P2P我们常见的就是文件分发了，它和客户端-服务器模式不同，采用了一种对等方的概念。</p>\n<p>举例来说，平时我们用的种子下载，传统下载我们是从本地客户端和资源服务器建立连接，从服务器下载，下载速度受限于服务器的上载速率以及本地客户端网络的下载速率。 而P2P下载则是所有下载方都是可以一边下载，一边将自己已经下载的资源利用上载带宽上传供其他下载者下载，从而提高效率。</p>\n<p>常见的应用有如：BitTorrent等。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>本周进入到第二章应用层的学习，不得不说自顶向下学习果然能激发兴趣，因为平时开发工作经常也就是和应用层打交道，但是对具体原理总是一知半解，随着这章的阅读，能让自己对我们开发的应用程序，是怎样利用网络实现其功能的，有了更深入的了解。</p>\n</blockquote>\n<p>我们日常中所用到的，开发的软件基本都是基于应用层的软件。不需要关心数据包到底是如何传输的，只需要按照应用层对接下一层的协议接口进行开发就可以了。 </p>\n<p>应用程序体系结构，我们最常用的是客户-服务器体系结构，比如生活中最常用的浏览器就是这种模式的。有一个总是打开的服务器用来接收各个客户端的请求，返回对应的数据。  另一个就是P2P 体系结构，和客户-服务器相反，这些应用程序在间断连接的主机之间使用直接通信，这些主机也被称为对等方。</p>\n<p>在操作系统中，程序之间的通信是通过进行来进行的，而不是程序。一个进程可以被认为是一个端系统中的一个程序，当进程运行在同一个端系统上时，它们使用进程间通信机制进行通信。进程间的通信规则有端系统山的操作系统决定。</p>\n<p>我们现在知道了多数应用程序是通过通信进程对组成，每对中的两个进行 互相发动报文。从一个进程向另一个进行发送报文必须通过下层的计算机网络。这里进程是通过一个被称之为套接字的软件接口向网络发送报文和从网络接收报文的。</p>\n<p><strong>进程寻址</strong> </p>\n<p>为了向特定的目的地的主机上的进程发送分组，接收进程需要一个地址，而为了标识接收进程是需要通过：</p>\n<ol>\n<li>主机的地址；</li>\n<li>定义在目标主机的进程的端口号；</li>\n</ol>\n<p>我们在开发应用层程序时，是不需要考虑具体是怎样将发送的数据分组发送到目的主机的，对于应用层程序来说，只需要将数据分组推送进套接字。而在套接字的另一侧， 运输层协议负责使该数据分组进入接收进程的套接字。</p>\n<p>因特网提供的运输层的协议不止一种，我们最常见的当属 TCP、UDP 了，具体使用需要从以下几个方面进行衡量：</p>\n<ol>\n<li>可靠数据传输；</li>\n<li>吞吐量；</li>\n<li>定时</li>\n<li>安全性；</li>\n</ol>\n<p>总结来说，TCP 提供了可靠地数据传输，因为其建立在三次握手的基础上，能够保证数据到达目的进程。UDP 是一种轻量级运输协议，没有拥塞控制，提供一种不可靠数据传输服务，也就是说，UDP客户端可以用任何它选定的速率向其下层注入数据，一般网络电话可以容忍范围内的数据丢失，更愿意应用运行在UDP上。</p>\n<h3 id=\"应用层协议\"><a href=\"#应用层协议\" class=\"headerlink\" title=\"应用层协议\"></a>应用层协议</h3><p>说到Web其应用层协议就是HTTP。<br>HTTP 请求报文：</p>\n<pre><code class=\"html\">GET /api/monitoring/converged-status HTTP/1.1\\r\\n\nHost: 192.168.8.1\\r\\n\nConnection: keep-alive\\r\\n\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\\r\\n\nAccept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8\\r\\n\n</code></pre>\n<p>第一行为请求航，其后的都叫做首部行。</p>\n<p>请求行的三个字段代表的是 方法字段、URL字段、HTTP版本字段<br>当请求为POST方式时，在首部行下方还有一个实体体，用来存放表单提交的数据。</p>\n<p>HTTP响应报文：</p>\n<pre><code>HTTP/1.1 200 OK\\r\\n\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\n\nContent-Type: text/html\\r\\n\nConnection: Keep-Alive\\r\\n\nContent-Length: 1073\\r\\n\n\nFile Data: 1073 bytes\n\n</code></pre><p>响应报文，也有三个部分，状态行、首部行、然后是实体体。实体体是报文的主要部分，即它包含了所请求对象的本身。</p>\n<h3 id=\"FTP文件传输协议\"><a href=\"#FTP文件传输协议\" class=\"headerlink\" title=\"FTP文件传输协议\"></a>FTP文件传输协议</h3><p>应用层协议FTP，作为一个文件传输协议，其和HTTP有相似的地方，底层都采用TCP传输协议，然而这两个应用也有也有一些重要的区别，其中最显著的就是 <strong>FTP</strong> 使用了两个并行的 <strong>TCP</strong> 连接来传输文件，一个是控制连接，一个是数据连接。 <strong>控制链接</strong> 用来在两主机之间传入控制信息，如用户表示、口令、改变远程目录的命令以及存放和获取文件的命令。数据连接用来实际发送一个文件。</p>\n<h3 id=\"SMTP\"><a href=\"#SMTP\" class=\"headerlink\" title=\"SMTP\"></a>SMTP</h3><p>SMTP 是因特网电子邮件应用的核心，这个协议是用来从发送方的邮件服务器发送报文到接收方的邮件服务器的。</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/poj7j.png\" alt></p>\n<p>如上图所示，SMTP 的作用就是将邮件报文从发送邮件服务器送到接收邮件服务器。 下面大概解释下具体流程。<br>首先，客户SMTP（运行在发送邮件服务器上）在25 端口建立一个到服务器SMTP（运行在接收邮件服务器上）的TCP连接。 如果服务器没有开机，客户会在稍后进行重试，一旦连接建立，服务器和客户执行某些应用层的握手后，就向人们在互相交流前先进行自我介绍一样。在SMTP握手阶段，SMTP 客户指示发送方邮件地址（产生报文的那个人）和接收方邮件地址，一旦该SMTP客户和服务器彼此介绍之后 ，客户发送该报文。</p>\n<p>这里在记录一个比较明显的问题，那就是在Bob的邮件服务器接收到邮件后，他的本地PC上的代理是如何获得位于他的某ISP 邮件服务器上的邮件呢？ 这里不能再使用SMTP了，因为这里需要的是一个拉协议， 而SMTP 是一个推协议，目前流行的一些邮件访问协议可以解决这个问题，包括第三版的邮局协议（POP3） 、因特网邮件访问协议（Internet Access Protocol，IMAP） 以及HTTP。</p>\n<p>总结: SMTP 用来将邮件从发送方的邮件服务器传输到接收方的邮件服务器；SMTP 也用来将邮件从发送方的用户代理传送到发送方的邮件服务器。如POP3这样的邮件访问协议可以用来将邮件从接收方的邮件服务器传送到接收方的用户代理。</p>\n<h3 id=\"DNS-（Domain-Name-System）\"><a href=\"#DNS-（Domain-Name-System）\" class=\"headerlink\" title=\"DNS （Domain Name System）\"></a>DNS （Domain Name System）</h3><blockquote>\n<p>DNS 是： 1. 一个由分层的 <strong>DNS服务器</strong>（DNS server） 实现的分布式数据库；2. 一个使得主机能够查询分布式数据库的应用层协议。 DNS服务器通常是运行BIND (Berkeley Internet Name Domain) 软件的UNIX机器。 DNS 协议运行在 UDP之上，使用53号端口。与 HTTP、FTP 和 SMTP 协议一样，DNS 协议是应用层协议。</p>\n</blockquote>\n<p>DNS服务器不可能是单一部署的，它是一个巨大的具有代表性的分布式数据库；</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/v7fiq.png\" alt></p>\n<p>DNS 是由很多DNS服务器组成，映射关系分布在全世界范围内的所有DNS服务器上。 </p>\n<p>DNS服务器分为三种： 根DNS服务器、顶级域（TOP-Level Domain，TLD） DNS服务器和 权威DNS服务器。</p>\n<p>接下来记录一下，这三种DNS服务器之间的交互方式， 假设我现在要访问 <code>www.baidu.com</code> , 首先我本机的DNS客户端与根服务器之一联系，它将返回顶级域名 com 的TLD服务器 IP地址。然后 我在与这些TLD服务器之一联系，它将返回 baidu.com 的权威服务器的 IP地址。最后我将与 baidu.com 权威服务器之一联系，它将为 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> 返回其 IP 地址。</p>\n<p>上面说的三类DNS服务器都是处在 DNS服务器的层次结构中， 在这里我们学习到还有一类非常重要的DNS服务器，称为 <strong>本地DNS服务器</strong>。 一个 本地DNS服务器，严格来说不属于DNS服务器的层次结构，但它是非常重要的。 每个 <strong>ISP(Internet Service Provider)</strong>  都有一台本地DNS 服务器。 通过访问Windows 或者UNIX 的网络状态窗口，能够很容易的确定你本地DNS服务器的IP地址。 一般 本地DNS服务器“临近” 本主机。 基本上 ISP 的本地DNS服务器与主机相隔不超过几个路由器。</p>\n<p><strong>下面这幅图用来理解本地DNS服务器在交互中起的作用：</strong></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/000vv.png\" alt></p>\n<p>接下来，要说一个DNS系统中非常重要的一个特色，DNS 是有缓存的。为了减少时延并且有效减少因特网上到处传输的DNS报文数量， DNS 会将每一个DNS 回答缓存在本地存储中。 例如本地DNS服务器在接收到一个回答时，它能够将回答中的任何信息都缓存起来，在下一个相同主机名查询时可以直接返回。<strong>由于主机和主机名以及IP地址之间的映射不是永久的，因此会有一个过期时间，一般缓存2天。</strong></p>\n<blockquote>\n<p>本地 DNS服务器 也能缓存 TLD服务器的IP 地址，因而允许本地DNS绕过查询链路中的根DNS服务器。</p>\n</blockquote>\n<p>学习了上面几种应用层协议，接下来我们了解下P2P协议。</p>\n<h3 id=\"P2P\"><a href=\"#P2P\" class=\"headerlink\" title=\"P2P\"></a>P2P</h3><p>说到P2P我们常见的就是文件分发了，它和客户端-服务器模式不同，采用了一种对等方的概念。</p>\n<p>举例来说，平时我们用的种子下载，传统下载我们是从本地客户端和资源服务器建立连接，从服务器下载，下载速度受限于服务器的上载速率以及本地客户端网络的下载速率。 而P2P下载则是所有下载方都是可以一边下载，一边将自己已经下载的资源利用上载带宽上传供其他下载者下载，从而提高效率。</p>\n<p>常见的应用有如：BitTorrent等。</p>\n"},{"title":"chapter1-计算机网络和因特网","date":"2019-09-14T06:58:01.000Z","_content":"\n\n\n\n\n> 最近参加了码农翻身的读书活动，目标是读完《计算机网络 自顶向下方法》 这本书，这篇文章将记录第一周所看到的本地第一章的相关内容。\n\n## 学习计算机网络首先学习下什么是因特网？\n\n描述这个问题需要从两个方面论述。\n\n1. 具体构成描述\n> 因特网是一个世界范围的计算机网络，即它一个互联了遍及全世界的数以万计的计算设备的网络。所有与因特网相连的设备都称为**主机**或者**端系统**。\n\n端系统通过**通信链路**和**分组交换机**连接到一起。 通信链路是由不同的物理媒体组成。这些物理媒体包括同轴电缆、铜线、光纤和无线电频谱。不同的链路能够以不同的速率传输数据，链路的传输速率是以 比特/每秒 度量，（bit/s,或 bps）。当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为没段加上首部字节。由此形成的信息包用计算机网络的术语称之为**分组**。 这些分组通过网络发送到目的端系统，在那里被装配成初始数据。\n\n分组交换机从它的一条入通信链路接收到到达的分组，并从它的一条出通信链路转发该分组。目前常见的分组交换机类型是 **路由器** 和 **链路层交换机**。 这两种类型的交换机朝着最终目的地转发分组。链路层交换机通常用于接入网中，而路由器常用于网络核心中。 从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径。\n\n端系统通过 **因特网服务提供商**（Internet Servicve Provider，ISP）接入因特网，包括如本地电缆或者电话公司那样的住宅区ISP 、公司ISP、大学 ISP，以及那些在机场等公共场所提供的WIFI 接入的ISP。 每个ISP 其实是一个由多个分组交换机和多段通信链路组成的网络。 各ISP 为端系统提供了各种不同类型的网络接入，包括线缆调制解调器或DSL 那样的住宅宽带接入、高速局域网接入、无线接入和 56kbps拨号调制解调器计入。ISP 也为内容提供者提供因特网接入服务，将Web 站点直接接入因特网。因特网就是将端系统彼此互联，因此为端系统提供接入的ISP 也必须互联。低层的ISP通过国家的、国际的高层ISP（如AT&T、Sprint，联通、移动）互联起来。高层ISP 是由通过高速光纤链路互联的高速路由器组成的。无论是高层还是底层ISP网络，它们每个都是独立管理，运行着IP 协议。\n\n端系统、分组交换机和其他因特网部件都要运行一系列协议，这些协议控制因特网中信息的接收和发送。TCP 和 IP 是因特网中两个最为重要的协议。 IP协议定义了在路由器和端系统之间发送和接收的分组格式。因特网的主要协议统称为 **TCP/IP**。\n\n为了使各个协议以及作用取得一致，方便人们能够创造协同工作的系统和产品，因此需要制定标准。 **因特网标准** 由 **因特网工程任务组** （Internet Engineering Task Force， IETF）研发。IETF 的 标准文档被称为 **请求评论（Request For Comment， RFC）**。\n\n2. 服务描述\n\n生活中我们都是用很多 app 这些被称为分布式应用程序。 大家思考下，运行在一个端系统上的应用程序怎样才能指令因特网向运行在另一个端系统上的软件发送数据呢？\n\n与因特网相连的短息用提供了一个 **应用程序编程接口**（Application Ptogramming Interface， API），该API 规定了运行在一个端系统上的软件请求因特网基础设施向运行在另一个端系统上的特定目的地软件交付数据的方式。因特网 API 是一套发送软件必须遵循的规则集合，因为因特网能够将数据交付给目的地。\n\n上面我们已经给出了因特网的两种描述方法，但是整个因特网，包括数据传输经过各层的协议，后面也会继续学习，分享出来。\n\n> 在因特网中，凡是涉及两个或多个远程通信实体的所有活动都受协议的制约。 例如，在两台物理上连接的计算机中，硬件实现的协议控制了在两块网络接口卡间的 “线上” 的比特流。\n\n\n## 网络边缘\n\n顾名思义，网络边缘就是指位于各处的应用程序和端系统。 这里我觉得比较有意思的概念就是端系统接入网以及物理媒体。\n\n### 接入网\n\n接入网： 指将端系统连接到其边缘路由器的物理链路。\n边缘路由器： 是指端系统到任何其他远程端系统的路径上的第一台路由器。\n\n### 物理媒体\n\n物理媒体划分为两类： **引导型媒体** 和 **非引导型媒体**。对于引导型媒体，电波沿着固体媒体前行，如光缆、双绞铜线或同轴电缆。对于非引导型媒体，电波在空气或外层空间中中传播，例如在无线局域网或数字卫星频道中。\n\n## 网络核心\n\n这一节主要学习了 分组交换、电路交换、网络的网络。\n\n### 分组交换\n\n  在各种网络应用中，端系统彼此交换报文。 报文能够包含协议设计者需要的任何东西。为了源系统向目的系统发送一个报文，源将长报文划分为较小的数据块，称之为分组。在源和目的之间，每个分组都通过通信链路和分组交换机（交换机主要有两类：路由器和链路层交换机）传送。 \n\n### 在这里我们必须要知道的还有排队时延和分组丢失。\n\n每个分组交换机有多条链路与之相连。对于每条相连的链路，该分组交换机具有一个输出缓存（也称为输出队列），它用于存储路由器准备发往那条链路的分组。该输出缓存在分组交换机中起着重要的作用。如果到达的分组需要传输到某条链路，但发现该链路正忙于传输其他分组，该到达分组必须在该输出缓存中等待。这个就叫做输出缓存的排队时延。 因为缓存空间的大小是有限的，一个到达的分组可能发现该缓存已被其他等待传输的分组完全充满了。在此情况下，将出现 **分组丢失（丢包）**，到达的分组或已经排队的分组之一将被丢弃。\n\n### 电路交换\n\n首先总结的说电路交换一般用于数据链路层。 \n\n在端系统通信会话期间，预留了端系统间通信沿路径所需要的资源（缓存，链路传输速率）。 在分组交换网络中，这些资源则不是预留的； 传统的电话网络是电路交换网络的例子。\n\n## 分组交换网中的时延\n\n这部分内容应该是对于平时开发工作中非常有用的一部分，一定要掌握其相关原理。\n\n分组从一台主机出发，通过一系列路由器传输，在另一台主机点（目的地）中结束它的历程。当分组从一个节点（主机或路由器）沿着这条路径到后续节点（主机或路由器），该分组在沿途的每个结点经受了几种不同类型的时延。这些时延最为重要的是 **结点处理时延**、**排队时延**、**传输时延和传播时延**，这些时延总体累计加起来是结点总时延。\n\n### 处理时延\n\n检查分组首部和决定将该分组导向何处所需要的时间是处理时延的一部分。处理时延也能包括其他因素，如检查比特级别的差错所需要的时间，该差错出现在从上游结点向路由器传输这些分组比特的过程中。高速路由器的处理时延通常是微妙或更低的数量级。在这种结点处理之后，路由器将该分组引向通往下一个路由器链路之前的队列。\n\n\n​    \n### 排队时延\n\n在队列中，当分组在链路上等待传输时，它经受排队时延。一个特定分组的排队时延长度将取决于先期到达的正在排队等待向链路传输的分组数量。如果该队列是空的，并且当前没有其他分组正在传输，则该分组的排队时延为0。 另一方面，如果流量很大，并且许多其他分组也在等待传输，该排队时延将很长。\n\n\n​    \n### 传输时延\n\n假定分组以先到先服务的方式传输，这在分组交换网中是常见的方式，仅当所有已经到达的分组被传输后，才能传输刚到达的分组。用 L 比特表示该分组的长度，用R bps （即 b/s） 表示从路由器A 到路由器B 的链路传输速率。 例如，对于一条10 Mbps 的以太网链路，速率 R = 10Mbps；  传输时延是L/R。 这是将所有分组的比特推向链路所需要的时间。实际的传输时延通常在毫秒到微妙量级。\n\n### 传播时延\n\n一旦一个比特被推向链路，该比特需要向路由器B传播。从该链路的起点到路由器B传播所需要的时间是传播时延。该比特以该链路的传播速率传播。 该传播速率取决于该链路的物理媒体（即光纤、双绞铜线等），其速率范围是 2 * 10（8） ~ 3 * 10（8） m/s，这等于或略小于光速。该传播时延等于两台路由器之间的距离除以传播速率。即传播时延是 d/s, 其中 d 是路由器A 和路由器B之间的距离，s是该链路的传播速率。一旦该分组的最后一个比特传播到B结点，该比特及前面的所有比特被存储于路由器B。整个过程随着路由器B执行转发而持续下去。在广域网中，传播时延为毫秒量级。\n\n\n​    \n\n\n\n  ","source":"_posts/计算机网络/chapter1-计算机网络和因特网.md","raw":"---\ntitle: \"chapter1-计算机网络和因特网\"\ntags:\n  - 因特网\ndate: 2019-09-14 14:58:01\ncategories: 计算机网络\n---\n\n\n\n\n\n> 最近参加了码农翻身的读书活动，目标是读完《计算机网络 自顶向下方法》 这本书，这篇文章将记录第一周所看到的本地第一章的相关内容。\n\n## 学习计算机网络首先学习下什么是因特网？\n\n描述这个问题需要从两个方面论述。\n\n1. 具体构成描述\n> 因特网是一个世界范围的计算机网络，即它一个互联了遍及全世界的数以万计的计算设备的网络。所有与因特网相连的设备都称为**主机**或者**端系统**。\n\n端系统通过**通信链路**和**分组交换机**连接到一起。 通信链路是由不同的物理媒体组成。这些物理媒体包括同轴电缆、铜线、光纤和无线电频谱。不同的链路能够以不同的速率传输数据，链路的传输速率是以 比特/每秒 度量，（bit/s,或 bps）。当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为没段加上首部字节。由此形成的信息包用计算机网络的术语称之为**分组**。 这些分组通过网络发送到目的端系统，在那里被装配成初始数据。\n\n分组交换机从它的一条入通信链路接收到到达的分组，并从它的一条出通信链路转发该分组。目前常见的分组交换机类型是 **路由器** 和 **链路层交换机**。 这两种类型的交换机朝着最终目的地转发分组。链路层交换机通常用于接入网中，而路由器常用于网络核心中。 从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径。\n\n端系统通过 **因特网服务提供商**（Internet Servicve Provider，ISP）接入因特网，包括如本地电缆或者电话公司那样的住宅区ISP 、公司ISP、大学 ISP，以及那些在机场等公共场所提供的WIFI 接入的ISP。 每个ISP 其实是一个由多个分组交换机和多段通信链路组成的网络。 各ISP 为端系统提供了各种不同类型的网络接入，包括线缆调制解调器或DSL 那样的住宅宽带接入、高速局域网接入、无线接入和 56kbps拨号调制解调器计入。ISP 也为内容提供者提供因特网接入服务，将Web 站点直接接入因特网。因特网就是将端系统彼此互联，因此为端系统提供接入的ISP 也必须互联。低层的ISP通过国家的、国际的高层ISP（如AT&T、Sprint，联通、移动）互联起来。高层ISP 是由通过高速光纤链路互联的高速路由器组成的。无论是高层还是底层ISP网络，它们每个都是独立管理，运行着IP 协议。\n\n端系统、分组交换机和其他因特网部件都要运行一系列协议，这些协议控制因特网中信息的接收和发送。TCP 和 IP 是因特网中两个最为重要的协议。 IP协议定义了在路由器和端系统之间发送和接收的分组格式。因特网的主要协议统称为 **TCP/IP**。\n\n为了使各个协议以及作用取得一致，方便人们能够创造协同工作的系统和产品，因此需要制定标准。 **因特网标准** 由 **因特网工程任务组** （Internet Engineering Task Force， IETF）研发。IETF 的 标准文档被称为 **请求评论（Request For Comment， RFC）**。\n\n2. 服务描述\n\n生活中我们都是用很多 app 这些被称为分布式应用程序。 大家思考下，运行在一个端系统上的应用程序怎样才能指令因特网向运行在另一个端系统上的软件发送数据呢？\n\n与因特网相连的短息用提供了一个 **应用程序编程接口**（Application Ptogramming Interface， API），该API 规定了运行在一个端系统上的软件请求因特网基础设施向运行在另一个端系统上的特定目的地软件交付数据的方式。因特网 API 是一套发送软件必须遵循的规则集合，因为因特网能够将数据交付给目的地。\n\n上面我们已经给出了因特网的两种描述方法，但是整个因特网，包括数据传输经过各层的协议，后面也会继续学习，分享出来。\n\n> 在因特网中，凡是涉及两个或多个远程通信实体的所有活动都受协议的制约。 例如，在两台物理上连接的计算机中，硬件实现的协议控制了在两块网络接口卡间的 “线上” 的比特流。\n\n\n## 网络边缘\n\n顾名思义，网络边缘就是指位于各处的应用程序和端系统。 这里我觉得比较有意思的概念就是端系统接入网以及物理媒体。\n\n### 接入网\n\n接入网： 指将端系统连接到其边缘路由器的物理链路。\n边缘路由器： 是指端系统到任何其他远程端系统的路径上的第一台路由器。\n\n### 物理媒体\n\n物理媒体划分为两类： **引导型媒体** 和 **非引导型媒体**。对于引导型媒体，电波沿着固体媒体前行，如光缆、双绞铜线或同轴电缆。对于非引导型媒体，电波在空气或外层空间中中传播，例如在无线局域网或数字卫星频道中。\n\n## 网络核心\n\n这一节主要学习了 分组交换、电路交换、网络的网络。\n\n### 分组交换\n\n  在各种网络应用中，端系统彼此交换报文。 报文能够包含协议设计者需要的任何东西。为了源系统向目的系统发送一个报文，源将长报文划分为较小的数据块，称之为分组。在源和目的之间，每个分组都通过通信链路和分组交换机（交换机主要有两类：路由器和链路层交换机）传送。 \n\n### 在这里我们必须要知道的还有排队时延和分组丢失。\n\n每个分组交换机有多条链路与之相连。对于每条相连的链路，该分组交换机具有一个输出缓存（也称为输出队列），它用于存储路由器准备发往那条链路的分组。该输出缓存在分组交换机中起着重要的作用。如果到达的分组需要传输到某条链路，但发现该链路正忙于传输其他分组，该到达分组必须在该输出缓存中等待。这个就叫做输出缓存的排队时延。 因为缓存空间的大小是有限的，一个到达的分组可能发现该缓存已被其他等待传输的分组完全充满了。在此情况下，将出现 **分组丢失（丢包）**，到达的分组或已经排队的分组之一将被丢弃。\n\n### 电路交换\n\n首先总结的说电路交换一般用于数据链路层。 \n\n在端系统通信会话期间，预留了端系统间通信沿路径所需要的资源（缓存，链路传输速率）。 在分组交换网络中，这些资源则不是预留的； 传统的电话网络是电路交换网络的例子。\n\n## 分组交换网中的时延\n\n这部分内容应该是对于平时开发工作中非常有用的一部分，一定要掌握其相关原理。\n\n分组从一台主机出发，通过一系列路由器传输，在另一台主机点（目的地）中结束它的历程。当分组从一个节点（主机或路由器）沿着这条路径到后续节点（主机或路由器），该分组在沿途的每个结点经受了几种不同类型的时延。这些时延最为重要的是 **结点处理时延**、**排队时延**、**传输时延和传播时延**，这些时延总体累计加起来是结点总时延。\n\n### 处理时延\n\n检查分组首部和决定将该分组导向何处所需要的时间是处理时延的一部分。处理时延也能包括其他因素，如检查比特级别的差错所需要的时间，该差错出现在从上游结点向路由器传输这些分组比特的过程中。高速路由器的处理时延通常是微妙或更低的数量级。在这种结点处理之后，路由器将该分组引向通往下一个路由器链路之前的队列。\n\n\n​    \n### 排队时延\n\n在队列中，当分组在链路上等待传输时，它经受排队时延。一个特定分组的排队时延长度将取决于先期到达的正在排队等待向链路传输的分组数量。如果该队列是空的，并且当前没有其他分组正在传输，则该分组的排队时延为0。 另一方面，如果流量很大，并且许多其他分组也在等待传输，该排队时延将很长。\n\n\n​    \n### 传输时延\n\n假定分组以先到先服务的方式传输，这在分组交换网中是常见的方式，仅当所有已经到达的分组被传输后，才能传输刚到达的分组。用 L 比特表示该分组的长度，用R bps （即 b/s） 表示从路由器A 到路由器B 的链路传输速率。 例如，对于一条10 Mbps 的以太网链路，速率 R = 10Mbps；  传输时延是L/R。 这是将所有分组的比特推向链路所需要的时间。实际的传输时延通常在毫秒到微妙量级。\n\n### 传播时延\n\n一旦一个比特被推向链路，该比特需要向路由器B传播。从该链路的起点到路由器B传播所需要的时间是传播时延。该比特以该链路的传播速率传播。 该传播速率取决于该链路的物理媒体（即光纤、双绞铜线等），其速率范围是 2 * 10（8） ~ 3 * 10（8） m/s，这等于或略小于光速。该传播时延等于两台路由器之间的距离除以传播速率。即传播时延是 d/s, 其中 d 是路由器A 和路由器B之间的距离，s是该链路的传播速率。一旦该分组的最后一个比特传播到B结点，该比特及前面的所有比特被存储于路由器B。整个过程随着路由器B执行转发而持续下去。在广域网中，传播时延为毫秒量级。\n\n\n​    \n\n\n\n  ","slug":"计算机网络/chapter1-计算机网络和因特网","published":1,"updated":"2019-09-28T15:42:52.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck13qknle000cveo6kmcwbdk8","content":"<blockquote>\n<p>最近参加了码农翻身的读书活动，目标是读完《计算机网络 自顶向下方法》 这本书，这篇文章将记录第一周所看到的本地第一章的相关内容。</p>\n</blockquote>\n<h2 id=\"学习计算机网络首先学习下什么是因特网？\"><a href=\"#学习计算机网络首先学习下什么是因特网？\" class=\"headerlink\" title=\"学习计算机网络首先学习下什么是因特网？\"></a>学习计算机网络首先学习下什么是因特网？</h2><p>描述这个问题需要从两个方面论述。</p>\n<ol>\n<li>具体构成描述<blockquote>\n<p>因特网是一个世界范围的计算机网络，即它一个互联了遍及全世界的数以万计的计算设备的网络。所有与因特网相连的设备都称为<strong>主机</strong>或者<strong>端系统</strong>。</p>\n</blockquote>\n</li>\n</ol>\n<p>端系统通过<strong>通信链路</strong>和<strong>分组交换机</strong>连接到一起。 通信链路是由不同的物理媒体组成。这些物理媒体包括同轴电缆、铜线、光纤和无线电频谱。不同的链路能够以不同的速率传输数据，链路的传输速率是以 比特/每秒 度量，（bit/s,或 bps）。当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为没段加上首部字节。由此形成的信息包用计算机网络的术语称之为<strong>分组</strong>。 这些分组通过网络发送到目的端系统，在那里被装配成初始数据。</p>\n<p>分组交换机从它的一条入通信链路接收到到达的分组，并从它的一条出通信链路转发该分组。目前常见的分组交换机类型是 <strong>路由器</strong> 和 <strong>链路层交换机</strong>。 这两种类型的交换机朝着最终目的地转发分组。链路层交换机通常用于接入网中，而路由器常用于网络核心中。 从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径。</p>\n<p>端系统通过 <strong>因特网服务提供商</strong>（Internet Servicve Provider，ISP）接入因特网，包括如本地电缆或者电话公司那样的住宅区ISP 、公司ISP、大学 ISP，以及那些在机场等公共场所提供的WIFI 接入的ISP。 每个ISP 其实是一个由多个分组交换机和多段通信链路组成的网络。 各ISP 为端系统提供了各种不同类型的网络接入，包括线缆调制解调器或DSL 那样的住宅宽带接入、高速局域网接入、无线接入和 56kbps拨号调制解调器计入。ISP 也为内容提供者提供因特网接入服务，将Web 站点直接接入因特网。因特网就是将端系统彼此互联，因此为端系统提供接入的ISP 也必须互联。低层的ISP通过国家的、国际的高层ISP（如AT&amp;T、Sprint，联通、移动）互联起来。高层ISP 是由通过高速光纤链路互联的高速路由器组成的。无论是高层还是底层ISP网络，它们每个都是独立管理，运行着IP 协议。</p>\n<p>端系统、分组交换机和其他因特网部件都要运行一系列协议，这些协议控制因特网中信息的接收和发送。TCP 和 IP 是因特网中两个最为重要的协议。 IP协议定义了在路由器和端系统之间发送和接收的分组格式。因特网的主要协议统称为 <strong>TCP/IP</strong>。</p>\n<p>为了使各个协议以及作用取得一致，方便人们能够创造协同工作的系统和产品，因此需要制定标准。 <strong>因特网标准</strong> 由 <strong>因特网工程任务组</strong> （Internet Engineering Task Force， IETF）研发。IETF 的 标准文档被称为 <strong>请求评论（Request For Comment， RFC）</strong>。</p>\n<ol start=\"2\">\n<li>服务描述</li>\n</ol>\n<p>生活中我们都是用很多 app 这些被称为分布式应用程序。 大家思考下，运行在一个端系统上的应用程序怎样才能指令因特网向运行在另一个端系统上的软件发送数据呢？</p>\n<p>与因特网相连的短息用提供了一个 <strong>应用程序编程接口</strong>（Application Ptogramming Interface， API），该API 规定了运行在一个端系统上的软件请求因特网基础设施向运行在另一个端系统上的特定目的地软件交付数据的方式。因特网 API 是一套发送软件必须遵循的规则集合，因为因特网能够将数据交付给目的地。</p>\n<p>上面我们已经给出了因特网的两种描述方法，但是整个因特网，包括数据传输经过各层的协议，后面也会继续学习，分享出来。</p>\n<blockquote>\n<p>在因特网中，凡是涉及两个或多个远程通信实体的所有活动都受协议的制约。 例如，在两台物理上连接的计算机中，硬件实现的协议控制了在两块网络接口卡间的 “线上” 的比特流。</p>\n</blockquote>\n<h2 id=\"网络边缘\"><a href=\"#网络边缘\" class=\"headerlink\" title=\"网络边缘\"></a>网络边缘</h2><p>顾名思义，网络边缘就是指位于各处的应用程序和端系统。 这里我觉得比较有意思的概念就是端系统接入网以及物理媒体。</p>\n<h3 id=\"接入网\"><a href=\"#接入网\" class=\"headerlink\" title=\"接入网\"></a>接入网</h3><p>接入网： 指将端系统连接到其边缘路由器的物理链路。<br>边缘路由器： 是指端系统到任何其他远程端系统的路径上的第一台路由器。</p>\n<h3 id=\"物理媒体\"><a href=\"#物理媒体\" class=\"headerlink\" title=\"物理媒体\"></a>物理媒体</h3><p>物理媒体划分为两类： <strong>引导型媒体</strong> 和 <strong>非引导型媒体</strong>。对于引导型媒体，电波沿着固体媒体前行，如光缆、双绞铜线或同轴电缆。对于非引导型媒体，电波在空气或外层空间中中传播，例如在无线局域网或数字卫星频道中。</p>\n<h2 id=\"网络核心\"><a href=\"#网络核心\" class=\"headerlink\" title=\"网络核心\"></a>网络核心</h2><p>这一节主要学习了 分组交换、电路交换、网络的网络。</p>\n<h3 id=\"分组交换\"><a href=\"#分组交换\" class=\"headerlink\" title=\"分组交换\"></a>分组交换</h3><p>  在各种网络应用中，端系统彼此交换报文。 报文能够包含协议设计者需要的任何东西。为了源系统向目的系统发送一个报文，源将长报文划分为较小的数据块，称之为分组。在源和目的之间，每个分组都通过通信链路和分组交换机（交换机主要有两类：路由器和链路层交换机）传送。 </p>\n<h3 id=\"在这里我们必须要知道的还有排队时延和分组丢失。\"><a href=\"#在这里我们必须要知道的还有排队时延和分组丢失。\" class=\"headerlink\" title=\"在这里我们必须要知道的还有排队时延和分组丢失。\"></a>在这里我们必须要知道的还有排队时延和分组丢失。</h3><p>每个分组交换机有多条链路与之相连。对于每条相连的链路，该分组交换机具有一个输出缓存（也称为输出队列），它用于存储路由器准备发往那条链路的分组。该输出缓存在分组交换机中起着重要的作用。如果到达的分组需要传输到某条链路，但发现该链路正忙于传输其他分组，该到达分组必须在该输出缓存中等待。这个就叫做输出缓存的排队时延。 因为缓存空间的大小是有限的，一个到达的分组可能发现该缓存已被其他等待传输的分组完全充满了。在此情况下，将出现 <strong>分组丢失（丢包）</strong>，到达的分组或已经排队的分组之一将被丢弃。</p>\n<h3 id=\"电路交换\"><a href=\"#电路交换\" class=\"headerlink\" title=\"电路交换\"></a>电路交换</h3><p>首先总结的说电路交换一般用于数据链路层。 </p>\n<p>在端系统通信会话期间，预留了端系统间通信沿路径所需要的资源（缓存，链路传输速率）。 在分组交换网络中，这些资源则不是预留的； 传统的电话网络是电路交换网络的例子。</p>\n<h2 id=\"分组交换网中的时延\"><a href=\"#分组交换网中的时延\" class=\"headerlink\" title=\"分组交换网中的时延\"></a>分组交换网中的时延</h2><p>这部分内容应该是对于平时开发工作中非常有用的一部分，一定要掌握其相关原理。</p>\n<p>分组从一台主机出发，通过一系列路由器传输，在另一台主机点（目的地）中结束它的历程。当分组从一个节点（主机或路由器）沿着这条路径到后续节点（主机或路由器），该分组在沿途的每个结点经受了几种不同类型的时延。这些时延最为重要的是 <strong>结点处理时延</strong>、<strong>排队时延</strong>、<strong>传输时延和传播时延</strong>，这些时延总体累计加起来是结点总时延。</p>\n<h3 id=\"处理时延\"><a href=\"#处理时延\" class=\"headerlink\" title=\"处理时延\"></a>处理时延</h3><p>检查分组首部和决定将该分组导向何处所需要的时间是处理时延的一部分。处理时延也能包括其他因素，如检查比特级别的差错所需要的时间，该差错出现在从上游结点向路由器传输这些分组比特的过程中。高速路由器的处理时延通常是微妙或更低的数量级。在这种结点处理之后，路由器将该分组引向通往下一个路由器链路之前的队列。</p>\n<p>​    </p>\n<h3 id=\"排队时延\"><a href=\"#排队时延\" class=\"headerlink\" title=\"排队时延\"></a>排队时延</h3><p>在队列中，当分组在链路上等待传输时，它经受排队时延。一个特定分组的排队时延长度将取决于先期到达的正在排队等待向链路传输的分组数量。如果该队列是空的，并且当前没有其他分组正在传输，则该分组的排队时延为0。 另一方面，如果流量很大，并且许多其他分组也在等待传输，该排队时延将很长。</p>\n<p>​    </p>\n<h3 id=\"传输时延\"><a href=\"#传输时延\" class=\"headerlink\" title=\"传输时延\"></a>传输时延</h3><p>假定分组以先到先服务的方式传输，这在分组交换网中是常见的方式，仅当所有已经到达的分组被传输后，才能传输刚到达的分组。用 L 比特表示该分组的长度，用R bps （即 b/s） 表示从路由器A 到路由器B 的链路传输速率。 例如，对于一条10 Mbps 的以太网链路，速率 R = 10Mbps；  传输时延是L/R。 这是将所有分组的比特推向链路所需要的时间。实际的传输时延通常在毫秒到微妙量级。</p>\n<h3 id=\"传播时延\"><a href=\"#传播时延\" class=\"headerlink\" title=\"传播时延\"></a>传播时延</h3><p>一旦一个比特被推向链路，该比特需要向路由器B传播。从该链路的起点到路由器B传播所需要的时间是传播时延。该比特以该链路的传播速率传播。 该传播速率取决于该链路的物理媒体（即光纤、双绞铜线等），其速率范围是 2 * 10（8） ~ 3 * 10（8） m/s，这等于或略小于光速。该传播时延等于两台路由器之间的距离除以传播速率。即传播时延是 d/s, 其中 d 是路由器A 和路由器B之间的距离，s是该链路的传播速率。一旦该分组的最后一个比特传播到B结点，该比特及前面的所有比特被存储于路由器B。整个过程随着路由器B执行转发而持续下去。在广域网中，传播时延为毫秒量级。</p>\n<p>​    </p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>最近参加了码农翻身的读书活动，目标是读完《计算机网络 自顶向下方法》 这本书，这篇文章将记录第一周所看到的本地第一章的相关内容。</p>\n</blockquote>\n<h2 id=\"学习计算机网络首先学习下什么是因特网？\"><a href=\"#学习计算机网络首先学习下什么是因特网？\" class=\"headerlink\" title=\"学习计算机网络首先学习下什么是因特网？\"></a>学习计算机网络首先学习下什么是因特网？</h2><p>描述这个问题需要从两个方面论述。</p>\n<ol>\n<li>具体构成描述<blockquote>\n<p>因特网是一个世界范围的计算机网络，即它一个互联了遍及全世界的数以万计的计算设备的网络。所有与因特网相连的设备都称为<strong>主机</strong>或者<strong>端系统</strong>。</p>\n</blockquote>\n</li>\n</ol>\n<p>端系统通过<strong>通信链路</strong>和<strong>分组交换机</strong>连接到一起。 通信链路是由不同的物理媒体组成。这些物理媒体包括同轴电缆、铜线、光纤和无线电频谱。不同的链路能够以不同的速率传输数据，链路的传输速率是以 比特/每秒 度量，（bit/s,或 bps）。当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为没段加上首部字节。由此形成的信息包用计算机网络的术语称之为<strong>分组</strong>。 这些分组通过网络发送到目的端系统，在那里被装配成初始数据。</p>\n<p>分组交换机从它的一条入通信链路接收到到达的分组，并从它的一条出通信链路转发该分组。目前常见的分组交换机类型是 <strong>路由器</strong> 和 <strong>链路层交换机</strong>。 这两种类型的交换机朝着最终目的地转发分组。链路层交换机通常用于接入网中，而路由器常用于网络核心中。 从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径。</p>\n<p>端系统通过 <strong>因特网服务提供商</strong>（Internet Servicve Provider，ISP）接入因特网，包括如本地电缆或者电话公司那样的住宅区ISP 、公司ISP、大学 ISP，以及那些在机场等公共场所提供的WIFI 接入的ISP。 每个ISP 其实是一个由多个分组交换机和多段通信链路组成的网络。 各ISP 为端系统提供了各种不同类型的网络接入，包括线缆调制解调器或DSL 那样的住宅宽带接入、高速局域网接入、无线接入和 56kbps拨号调制解调器计入。ISP 也为内容提供者提供因特网接入服务，将Web 站点直接接入因特网。因特网就是将端系统彼此互联，因此为端系统提供接入的ISP 也必须互联。低层的ISP通过国家的、国际的高层ISP（如AT&amp;T、Sprint，联通、移动）互联起来。高层ISP 是由通过高速光纤链路互联的高速路由器组成的。无论是高层还是底层ISP网络，它们每个都是独立管理，运行着IP 协议。</p>\n<p>端系统、分组交换机和其他因特网部件都要运行一系列协议，这些协议控制因特网中信息的接收和发送。TCP 和 IP 是因特网中两个最为重要的协议。 IP协议定义了在路由器和端系统之间发送和接收的分组格式。因特网的主要协议统称为 <strong>TCP/IP</strong>。</p>\n<p>为了使各个协议以及作用取得一致，方便人们能够创造协同工作的系统和产品，因此需要制定标准。 <strong>因特网标准</strong> 由 <strong>因特网工程任务组</strong> （Internet Engineering Task Force， IETF）研发。IETF 的 标准文档被称为 <strong>请求评论（Request For Comment， RFC）</strong>。</p>\n<ol start=\"2\">\n<li>服务描述</li>\n</ol>\n<p>生活中我们都是用很多 app 这些被称为分布式应用程序。 大家思考下，运行在一个端系统上的应用程序怎样才能指令因特网向运行在另一个端系统上的软件发送数据呢？</p>\n<p>与因特网相连的短息用提供了一个 <strong>应用程序编程接口</strong>（Application Ptogramming Interface， API），该API 规定了运行在一个端系统上的软件请求因特网基础设施向运行在另一个端系统上的特定目的地软件交付数据的方式。因特网 API 是一套发送软件必须遵循的规则集合，因为因特网能够将数据交付给目的地。</p>\n<p>上面我们已经给出了因特网的两种描述方法，但是整个因特网，包括数据传输经过各层的协议，后面也会继续学习，分享出来。</p>\n<blockquote>\n<p>在因特网中，凡是涉及两个或多个远程通信实体的所有活动都受协议的制约。 例如，在两台物理上连接的计算机中，硬件实现的协议控制了在两块网络接口卡间的 “线上” 的比特流。</p>\n</blockquote>\n<h2 id=\"网络边缘\"><a href=\"#网络边缘\" class=\"headerlink\" title=\"网络边缘\"></a>网络边缘</h2><p>顾名思义，网络边缘就是指位于各处的应用程序和端系统。 这里我觉得比较有意思的概念就是端系统接入网以及物理媒体。</p>\n<h3 id=\"接入网\"><a href=\"#接入网\" class=\"headerlink\" title=\"接入网\"></a>接入网</h3><p>接入网： 指将端系统连接到其边缘路由器的物理链路。<br>边缘路由器： 是指端系统到任何其他远程端系统的路径上的第一台路由器。</p>\n<h3 id=\"物理媒体\"><a href=\"#物理媒体\" class=\"headerlink\" title=\"物理媒体\"></a>物理媒体</h3><p>物理媒体划分为两类： <strong>引导型媒体</strong> 和 <strong>非引导型媒体</strong>。对于引导型媒体，电波沿着固体媒体前行，如光缆、双绞铜线或同轴电缆。对于非引导型媒体，电波在空气或外层空间中中传播，例如在无线局域网或数字卫星频道中。</p>\n<h2 id=\"网络核心\"><a href=\"#网络核心\" class=\"headerlink\" title=\"网络核心\"></a>网络核心</h2><p>这一节主要学习了 分组交换、电路交换、网络的网络。</p>\n<h3 id=\"分组交换\"><a href=\"#分组交换\" class=\"headerlink\" title=\"分组交换\"></a>分组交换</h3><p>  在各种网络应用中，端系统彼此交换报文。 报文能够包含协议设计者需要的任何东西。为了源系统向目的系统发送一个报文，源将长报文划分为较小的数据块，称之为分组。在源和目的之间，每个分组都通过通信链路和分组交换机（交换机主要有两类：路由器和链路层交换机）传送。 </p>\n<h3 id=\"在这里我们必须要知道的还有排队时延和分组丢失。\"><a href=\"#在这里我们必须要知道的还有排队时延和分组丢失。\" class=\"headerlink\" title=\"在这里我们必须要知道的还有排队时延和分组丢失。\"></a>在这里我们必须要知道的还有排队时延和分组丢失。</h3><p>每个分组交换机有多条链路与之相连。对于每条相连的链路，该分组交换机具有一个输出缓存（也称为输出队列），它用于存储路由器准备发往那条链路的分组。该输出缓存在分组交换机中起着重要的作用。如果到达的分组需要传输到某条链路，但发现该链路正忙于传输其他分组，该到达分组必须在该输出缓存中等待。这个就叫做输出缓存的排队时延。 因为缓存空间的大小是有限的，一个到达的分组可能发现该缓存已被其他等待传输的分组完全充满了。在此情况下，将出现 <strong>分组丢失（丢包）</strong>，到达的分组或已经排队的分组之一将被丢弃。</p>\n<h3 id=\"电路交换\"><a href=\"#电路交换\" class=\"headerlink\" title=\"电路交换\"></a>电路交换</h3><p>首先总结的说电路交换一般用于数据链路层。 </p>\n<p>在端系统通信会话期间，预留了端系统间通信沿路径所需要的资源（缓存，链路传输速率）。 在分组交换网络中，这些资源则不是预留的； 传统的电话网络是电路交换网络的例子。</p>\n<h2 id=\"分组交换网中的时延\"><a href=\"#分组交换网中的时延\" class=\"headerlink\" title=\"分组交换网中的时延\"></a>分组交换网中的时延</h2><p>这部分内容应该是对于平时开发工作中非常有用的一部分，一定要掌握其相关原理。</p>\n<p>分组从一台主机出发，通过一系列路由器传输，在另一台主机点（目的地）中结束它的历程。当分组从一个节点（主机或路由器）沿着这条路径到后续节点（主机或路由器），该分组在沿途的每个结点经受了几种不同类型的时延。这些时延最为重要的是 <strong>结点处理时延</strong>、<strong>排队时延</strong>、<strong>传输时延和传播时延</strong>，这些时延总体累计加起来是结点总时延。</p>\n<h3 id=\"处理时延\"><a href=\"#处理时延\" class=\"headerlink\" title=\"处理时延\"></a>处理时延</h3><p>检查分组首部和决定将该分组导向何处所需要的时间是处理时延的一部分。处理时延也能包括其他因素，如检查比特级别的差错所需要的时间，该差错出现在从上游结点向路由器传输这些分组比特的过程中。高速路由器的处理时延通常是微妙或更低的数量级。在这种结点处理之后，路由器将该分组引向通往下一个路由器链路之前的队列。</p>\n<p>​    </p>\n<h3 id=\"排队时延\"><a href=\"#排队时延\" class=\"headerlink\" title=\"排队时延\"></a>排队时延</h3><p>在队列中，当分组在链路上等待传输时，它经受排队时延。一个特定分组的排队时延长度将取决于先期到达的正在排队等待向链路传输的分组数量。如果该队列是空的，并且当前没有其他分组正在传输，则该分组的排队时延为0。 另一方面，如果流量很大，并且许多其他分组也在等待传输，该排队时延将很长。</p>\n<p>​    </p>\n<h3 id=\"传输时延\"><a href=\"#传输时延\" class=\"headerlink\" title=\"传输时延\"></a>传输时延</h3><p>假定分组以先到先服务的方式传输，这在分组交换网中是常见的方式，仅当所有已经到达的分组被传输后，才能传输刚到达的分组。用 L 比特表示该分组的长度，用R bps （即 b/s） 表示从路由器A 到路由器B 的链路传输速率。 例如，对于一条10 Mbps 的以太网链路，速率 R = 10Mbps；  传输时延是L/R。 这是将所有分组的比特推向链路所需要的时间。实际的传输时延通常在毫秒到微妙量级。</p>\n<h3 id=\"传播时延\"><a href=\"#传播时延\" class=\"headerlink\" title=\"传播时延\"></a>传播时延</h3><p>一旦一个比特被推向链路，该比特需要向路由器B传播。从该链路的起点到路由器B传播所需要的时间是传播时延。该比特以该链路的传播速率传播。 该传播速率取决于该链路的物理媒体（即光纤、双绞铜线等），其速率范围是 2 * 10（8） ~ 3 * 10（8） m/s，这等于或略小于光速。该传播时延等于两台路由器之间的距离除以传播速率。即传播时延是 d/s, 其中 d 是路由器A 和路由器B之间的距离，s是该链路的传播速率。一旦该分组的最后一个比特传播到B结点，该比特及前面的所有比特被存储于路由器B。整个过程随着路由器B执行转发而持续下去。在广域网中，传播时延为毫秒量级。</p>\n<p>​    </p>\n"},{"title":"chapter6-网络安全","date":"2019-09-14T07:17:59.000Z","_content":"\n\n\n计算机网络中的两个节点希望安全通信，需要具有以下的特性\n\n*   **机密性**。这说明通信的内容只有发送方和接收方才能知道，窃听者截获报文后也无法理解报文的内容\n*   **报文完整性**。发送方和接收方希望报文在传输过程中没有被篡改\n*   **端点鉴别**。发送方和接收方都能确定另一方的确有其声称的身份\n*   **运行安全性**。能够连接到互联网的主机，都希望不会因为恶意者的攻击而瘫痪\n\n## 密码学原理\n\n要达到安全通信中的机密性，就需要对传输的报文加密。被加密的报文称为 **明文（plaintext，clear text）**；使用 **加密算法（encryption algorithm）** 可以加密明文得到 **密文（ciphertext）**；在加密的过程中需要使用 **密钥（key）**；如果需要把密文重新转成明文，就需要用到 **解密算法（decryption algorithm）**；类似的，解密算法也需要解密密钥。在对称加密中，加密密钥和解密密钥是相同的；而在公开密钥系统中，加密和解密的密钥是不同的，且加密密钥是公开的\n\n### 凯撒密码\n\n凯撒密码是以罗马共和国执政官尤里乌斯·凯撒的名字命名的一种加密技术，原理非常简单：对于一个明文输入，将明文中的字母替换成另一个字母。每一种替换规则就是一个密钥\n\n凯撒密码有一个重要缺陷，即相同的明文字母对应同一个密文字母，因此可以用统计分析的方式去破解密码。比如英文中字母 e 出现的频率大约是 13%，而字母 t 出现的频率是 19%，而且英文单词 the 出现的概率也特别高，这样就能统计密文中字母或单词出现的频率来估算加密的密钥\n\n如果尝试攻击凯撒密码，根据攻击者所拥有的信息，可以把攻击方法分为下面 3 种\n\n*   **唯密文攻击**：攻击者只知道密文，这时可以使用对字母频率的统计分析来攻击凯撒密码\n*   **已知明文攻击**：攻击者知道明文中一定会出现一些单词，根据这些单词的密文来攻击凯撒密码\n*   **选择明文攻击**：攻击者能够得到一些明文对应的密文，从而展开攻击。这与已知明文攻击有些类似\n\n针对这几种攻击，后来发展出了 **多码代替密码（polyalphabetic encryption）** 技术，这种技术尝试用多个凯撒密码密钥去加密一段密文\n\n### 块密码\n\n**块密码** 是对称加密的一种方法，它将明文分为 k 比特的块，将每一个块映射为另一个块，映射的结果就是密文，每一种映射就是一个密钥。对于 k 比特的块，共有 `(2^k)!` 种密钥。当 k 的值比较大时（如 k = 64），保存 `(2^k)!` 个映射关系的成本太高了，因此实际应用中会使用函数模拟的方式生成随机排列表，使得输入一个 k 比特的明文得到 k 比特密文，这个函数必须要有一个性质：明文的每一个比特位都能影响输出结果\n\n目前 DES（Data Encryption Standard）、3DES 和 AES（Advanced Encryption Standard）都是块密码\n\n实际上块密码与凯撒密码有些相似的地方，他们都是把明文替换成密文的方式，因此也会具有与凯撒密码相同的弱点，即相同的明文得到相同的密文。消除这个弱点的方式是在加密的过程中引入随机性。\n\n一个可行的方法是：将明文分为 k 比特的明文快，对于每个明文快 mi，产生一个随机的 k 比特块 ri，那么密文 `ci = Ks(mi xor ri)`，其中 xor 是异或操作，Ks 是以 s 为密钥的加密函数。由于每一个明文快对应的随机块 ri 是不一样的，因此相同的明文块会产生不同的密文块\n\n这个方法也有一个问题：传输的数据量变成了原来的两倍。因为现在不仅仅需要传输密文，还需要传输随机块 ri。为了解决这个问题，产生了一种称作 **密码块链接（Cipher Block Chaining，CBC）** 的技术。它的原理是：仅仅产生第一个明文块的随机块，加密得到第一个密文块后，这个密文块就作为下一个明文块的随机块。\n\n## 公开密钥加密\n\n上面的凯撒密码和块密码都是被称为对称加密的技术，这意味着加密方和解密方需要使用同一个密钥来加密和解密。对称加密引入了一个新的问题：双方该如何安全的共享密钥。在现代的计算机网络中，发送方和接收方是无法在线下见面并确定密钥的\n\n为了解决这个问题，一种被称为 **公开密钥加密** 的技术被发明出来。公开密钥加密技术使用两个密钥，一个被称为 **公钥（public key）**，一个被称为 **私钥（private key）**。公钥是公开的，并且每个人都能知道，而私钥需要保密。公开密钥加密算法有这样一个性质：使用公钥加密明文得到密文，可以使用私钥解密；使用私钥加密明文得到密文，可以使用公钥解密。因此当两个人，比如 Bob 和 Alice 想要通信时，Bob 先获取到 Alice 的公钥，使用公钥加密后把密文发送给 Alice，Alice 得到密文后就能用私钥解密得到明文了；同理，Alice 也能获取到 Bob 的公钥并加密明文，Bob 用自己的私钥解密。当攻击者截取到密文后，因为没有私钥，也就不能解密密文了。\n\n公开密钥加密算法需要面临两个问题\n\n1.  攻击者可以使用选择明文攻击。因为公钥和加密算法是众所周知的，攻击者可以用任意明文生成密文，并以此展开攻击，公开密钥加密必须能防止攻击者以猜出私钥\n2.  接收方无法得知密文是谁发送的。在共享密钥中，接收方收到密文后就能知道发送方是谁了，因为只有发送方能有密钥去加密。现在因为公钥和加密算法是公开的，任何一个人都能向接收方发送一段密文，因此接收方必须使用其他方法去确定发送方的身份\n\nRSA 是现在比较流行的公开密钥加密算法，它基于的原理是目前没有高效的算法可以对大整数做因数分解。它的工作方式我就不说了，因为我也看不懂\n\n## 报文完整性和数字签名\n\nBob 在收到一个来自于声称自己是 Alice 的人的报文时，他需要做下面两件事\n\n1.  确定报文确实来自于 Alice\n2.  确定报文在传输过程中没有收到篡改\n\n在讨论这两点之前，我们还需要学习有关 **密码散列函数** 的知识\n\n### 密码散列函数\n\n密码散列函数以 m 作为输入，可以得到一个固定长度的输出字符串，而且必须要求找到任意两个不同的报文 x 和 y，计算 H(x) = H(y) 在计算上是不可能的，这也表明，得到散列函数的输出后，反推输入是不可能的。目前常用的散列函数有 MD5、SHA-1\n\n有了散列函数，就能在接收端鉴定报文在传输过程中有没有被篡改了。比如 Alice 向 Bob 发送报文\n\n1.  Alice 和 Bob 之间先生成一个 **鉴别密钥（authentication key）** s\n2.  Alice 生成报文 m，使用散列函数计算得到 H(m + s)，H(m+s) 也叫做 **报文鉴别码（Message Authentication Code，MAC）**\n3.  Alice 把 m 和 H(m + s) 合并成扩展报文 (m, H(m + s)) 发送给 Bob\n4.  Bob 收到扩展报文后，同样去计算 H(m + s)，如果与收到的 MAC 一致，说明报文没有被篡改\n\n鉴别密钥的作用是防止中间人在捕获到报文 m 后，篡改报文并重名生成 H(m)，这样接收方就还是无法确定报文是否被篡改\n\n目前最流行的 MAC 标准是 HMAC\n\n### 数字签名\n\n数字签名是一种同时使用了散列函数和非对称加密的技术。当 Bob 需要对一个报文 m 做签名，他首先用散列函数对报文计算指纹 H(m)，然后用自己的私钥和指纹作为输入，得到的输出就是数字签名。任何人如果想证明 Bob 的确对报文 m 做过签名，只需要先计算报文的指纹，然后使用 Bob 的公钥对签名进行解密，如果得到的指纹和结果是一致的，就说明了 Bob 的确签署了报文\n\n上面的数字签名技术还有一个问题没解决：如果为每个人分配私钥和公钥。这个问题需要由 **认证中心（Certification Authority，CA）** 来负责。CA 为每个需要被认证的实体生成一个证书，证书内有公钥、私钥和拥有者的全局唯一标识符，大家只要信任 CA 就能信赖数字签名技术了\n\n### PGP\n\nPGP 是一个电子邮件加密方案，全称是 Pretty Good Privacy。它融合了 RSA 加密、对称加密、数字签名技术，提供了对电子邮件的机密性、发送方鉴别和保温完整性验证功能，它的基本原理是这样的（假设 Alice 要向 Bob 发送邮件）\n\n1.  Alice 使用散列函数得到报文摘要\n2.  Alice 使用自己的私钥加密摘要得到报文签名，将数字签名和报文级联成为新报文\n3.  Alice 随机生成一个会话密钥，利用会话密钥加密新报文得到密文，用 Bob 的公钥加密会话密钥\n4.  Alice 将报文签名、密文、加密后的会话密钥发送给 Bob\n\n到此 Alice 的工作就结束了。Bob 在接收到 Alice 发来的数据后，做如下操作\n\n1.  Bob 用自己的私钥解密会话密钥\n2.  Bob 用会话密钥解密密文，得到报文和数字签名\n3.  Bob 使用散列函数得到报文摘要，然后使用自己的公钥解密数字签名，如果两个计算得到的结果相同，说明数据在传输过程中没有被篡改\n\n### SSL\n\n**SSL(Secure Socket Layer)** 相当于是一个提供了安全服务的加强版 TCP，它的第三版本也被称为 **TLS(Transport Layer Security)** 。SSL 差不多是取代 TCP 原有位置的，但是实际上它是一个应用层协议。SSL 的具体原理也很复杂，我这里只列出一些要点\n\n1.  在 SSL 通信的双方（比如 Bob 和 Alice）共使用了 4 个密钥：一个密钥是 Bob 向 Alice 发送数据的会话密钥；一个密钥是 Bob 向 Alice 发送报文完整性检测 MAC 密钥；一个密钥是 Alice 向 Bob 发送数据的会话密钥；一个密钥是 Alice 向 Bob 发送报文完整性检测 MAC 密钥\n2.  SSL 将报文数据分成被称为 **记录** 的基本单元，对记录做加密和报文完整性验证。SSL 对记录数据+MAC密钥+记录序号做散列，这样能防止中间人恶意替换记录的顺序\n\n## 防火墙\n\n防火墙是一种软件加上硬件一起实施网络连接管理的工具，可以认为这是一个位于网络边缘的路由器，具有下面的性质\n\n*   所有从内部网络流向外部和从外部流向内部的流量都必须经过防火墙\n*   防火墙仅会让允许授权的流量通过\n*   防火墙必须足够安全，不能被攻破\n\n防火墙的过滤方式可以分为 3 类：**传统分组过滤器（traditional packet filter）**、**状态过滤器（stateful filter）**、**应用程序网关（application gateway）**\n\n### 分组过滤器\n\n分组过滤器检查所有流经防火墙的数据包，基于事先定下的规则决定是否放行流量。它做出的决定基于下面因素\n\n*   数据报的源地址或目的地址\n*   数据报的协议类型：TCP、UDP、ICMP、OSPF 等\n*   TCP 或 UDP 的源或目的端口\n*   TCP 标志比特：SYN、ACK 等\n*   ICMP 报文类型\n*   数据报离开和进入网络的不同规则\n*   对不同路由器的接口的不同规则\n\n### 状态分组过滤器\n\n前面的分组过滤器只是根据一个分组的数据报决定是否放行，而状态分组过滤器会记录这个分组属于的连接，根据连接的状态决定是否放行分组\n\n简单来说，当内部或者外部用户发起 TCP 连接时，都必须经历 3 次握手（ SYN、SYNACK、ACK），防火墙可以探测到这些报文，然后在自己的数据库包保存这个 TCP 连接信息，当一个数据报来到防火墙时，防火墙在自己的数据库中检索到连接信息，然后根据既定的规则决定是否放行\n\n### 应用程序网关\n\n上面的两个过滤器都是应用于非应用层的数据报，有时候报文的认证信息存在于应用层中，这时候需要使用到 **应用程序网关（applicatin gateway）**。它不仅仅会检查 TCP 或者 UDP 数据报，还会检查应用层数据，以决定流量是否放行\n\n### 入侵检测系统\n\n**入侵检测系统（Intrusion Detection System，IDS）** 相当于是一个探针，安装在网络路径上，他会检测所有的流经自身的流量，在其中检测是否存在可疑流量，在必要的时候向网络管理员发送警告\n\n在一个网络中可能会部署多个 IDS，因为 IDS 对所有流量执行检测，需要大量的计算量，部署多个 IDS 能减轻每个 IDS 的负担\n\nIDS 使用了 **基于特征的系统（signature-based system）** 或 **基于异常的系统（anomaly-based system）**。基于特征的 IDS 有一个攻击的特征数据库，当流经的流量与某种攻击相似时（源端口相同、或者协议的某些字段值相同），它就会发出警告。基于特征的 IDS 的缺点是不能检测出新的攻击\n\n基于异常的 IDS 观察流经自身的流量，统计不同协议的分组的数量，当某种分组的数量异常升高时，他就判定网络中可能存在攻击行为。它的优点就是能够检测出新的攻击形式\n\nSnort 是一个开源的 IDS 实现，在全球大量部署，当一种新的攻击方式出现时，Snort 社区可能会在几小时内编写出应对规则，并供全球范围内的网络管理员下载和部署","source":"_posts/计算机网络/chapter6-网络安全.md","raw":"---\ntitle: chapter6-网络安全\ntags:\n  - 网络安全\ndate: 2019-09-14 15:17:59\ncategories: 计算机网络\n\n---\n\n\n\n计算机网络中的两个节点希望安全通信，需要具有以下的特性\n\n*   **机密性**。这说明通信的内容只有发送方和接收方才能知道，窃听者截获报文后也无法理解报文的内容\n*   **报文完整性**。发送方和接收方希望报文在传输过程中没有被篡改\n*   **端点鉴别**。发送方和接收方都能确定另一方的确有其声称的身份\n*   **运行安全性**。能够连接到互联网的主机，都希望不会因为恶意者的攻击而瘫痪\n\n## 密码学原理\n\n要达到安全通信中的机密性，就需要对传输的报文加密。被加密的报文称为 **明文（plaintext，clear text）**；使用 **加密算法（encryption algorithm）** 可以加密明文得到 **密文（ciphertext）**；在加密的过程中需要使用 **密钥（key）**；如果需要把密文重新转成明文，就需要用到 **解密算法（decryption algorithm）**；类似的，解密算法也需要解密密钥。在对称加密中，加密密钥和解密密钥是相同的；而在公开密钥系统中，加密和解密的密钥是不同的，且加密密钥是公开的\n\n### 凯撒密码\n\n凯撒密码是以罗马共和国执政官尤里乌斯·凯撒的名字命名的一种加密技术，原理非常简单：对于一个明文输入，将明文中的字母替换成另一个字母。每一种替换规则就是一个密钥\n\n凯撒密码有一个重要缺陷，即相同的明文字母对应同一个密文字母，因此可以用统计分析的方式去破解密码。比如英文中字母 e 出现的频率大约是 13%，而字母 t 出现的频率是 19%，而且英文单词 the 出现的概率也特别高，这样就能统计密文中字母或单词出现的频率来估算加密的密钥\n\n如果尝试攻击凯撒密码，根据攻击者所拥有的信息，可以把攻击方法分为下面 3 种\n\n*   **唯密文攻击**：攻击者只知道密文，这时可以使用对字母频率的统计分析来攻击凯撒密码\n*   **已知明文攻击**：攻击者知道明文中一定会出现一些单词，根据这些单词的密文来攻击凯撒密码\n*   **选择明文攻击**：攻击者能够得到一些明文对应的密文，从而展开攻击。这与已知明文攻击有些类似\n\n针对这几种攻击，后来发展出了 **多码代替密码（polyalphabetic encryption）** 技术，这种技术尝试用多个凯撒密码密钥去加密一段密文\n\n### 块密码\n\n**块密码** 是对称加密的一种方法，它将明文分为 k 比特的块，将每一个块映射为另一个块，映射的结果就是密文，每一种映射就是一个密钥。对于 k 比特的块，共有 `(2^k)!` 种密钥。当 k 的值比较大时（如 k = 64），保存 `(2^k)!` 个映射关系的成本太高了，因此实际应用中会使用函数模拟的方式生成随机排列表，使得输入一个 k 比特的明文得到 k 比特密文，这个函数必须要有一个性质：明文的每一个比特位都能影响输出结果\n\n目前 DES（Data Encryption Standard）、3DES 和 AES（Advanced Encryption Standard）都是块密码\n\n实际上块密码与凯撒密码有些相似的地方，他们都是把明文替换成密文的方式，因此也会具有与凯撒密码相同的弱点，即相同的明文得到相同的密文。消除这个弱点的方式是在加密的过程中引入随机性。\n\n一个可行的方法是：将明文分为 k 比特的明文快，对于每个明文快 mi，产生一个随机的 k 比特块 ri，那么密文 `ci = Ks(mi xor ri)`，其中 xor 是异或操作，Ks 是以 s 为密钥的加密函数。由于每一个明文快对应的随机块 ri 是不一样的，因此相同的明文块会产生不同的密文块\n\n这个方法也有一个问题：传输的数据量变成了原来的两倍。因为现在不仅仅需要传输密文，还需要传输随机块 ri。为了解决这个问题，产生了一种称作 **密码块链接（Cipher Block Chaining，CBC）** 的技术。它的原理是：仅仅产生第一个明文块的随机块，加密得到第一个密文块后，这个密文块就作为下一个明文块的随机块。\n\n## 公开密钥加密\n\n上面的凯撒密码和块密码都是被称为对称加密的技术，这意味着加密方和解密方需要使用同一个密钥来加密和解密。对称加密引入了一个新的问题：双方该如何安全的共享密钥。在现代的计算机网络中，发送方和接收方是无法在线下见面并确定密钥的\n\n为了解决这个问题，一种被称为 **公开密钥加密** 的技术被发明出来。公开密钥加密技术使用两个密钥，一个被称为 **公钥（public key）**，一个被称为 **私钥（private key）**。公钥是公开的，并且每个人都能知道，而私钥需要保密。公开密钥加密算法有这样一个性质：使用公钥加密明文得到密文，可以使用私钥解密；使用私钥加密明文得到密文，可以使用公钥解密。因此当两个人，比如 Bob 和 Alice 想要通信时，Bob 先获取到 Alice 的公钥，使用公钥加密后把密文发送给 Alice，Alice 得到密文后就能用私钥解密得到明文了；同理，Alice 也能获取到 Bob 的公钥并加密明文，Bob 用自己的私钥解密。当攻击者截取到密文后，因为没有私钥，也就不能解密密文了。\n\n公开密钥加密算法需要面临两个问题\n\n1.  攻击者可以使用选择明文攻击。因为公钥和加密算法是众所周知的，攻击者可以用任意明文生成密文，并以此展开攻击，公开密钥加密必须能防止攻击者以猜出私钥\n2.  接收方无法得知密文是谁发送的。在共享密钥中，接收方收到密文后就能知道发送方是谁了，因为只有发送方能有密钥去加密。现在因为公钥和加密算法是公开的，任何一个人都能向接收方发送一段密文，因此接收方必须使用其他方法去确定发送方的身份\n\nRSA 是现在比较流行的公开密钥加密算法，它基于的原理是目前没有高效的算法可以对大整数做因数分解。它的工作方式我就不说了，因为我也看不懂\n\n## 报文完整性和数字签名\n\nBob 在收到一个来自于声称自己是 Alice 的人的报文时，他需要做下面两件事\n\n1.  确定报文确实来自于 Alice\n2.  确定报文在传输过程中没有收到篡改\n\n在讨论这两点之前，我们还需要学习有关 **密码散列函数** 的知识\n\n### 密码散列函数\n\n密码散列函数以 m 作为输入，可以得到一个固定长度的输出字符串，而且必须要求找到任意两个不同的报文 x 和 y，计算 H(x) = H(y) 在计算上是不可能的，这也表明，得到散列函数的输出后，反推输入是不可能的。目前常用的散列函数有 MD5、SHA-1\n\n有了散列函数，就能在接收端鉴定报文在传输过程中有没有被篡改了。比如 Alice 向 Bob 发送报文\n\n1.  Alice 和 Bob 之间先生成一个 **鉴别密钥（authentication key）** s\n2.  Alice 生成报文 m，使用散列函数计算得到 H(m + s)，H(m+s) 也叫做 **报文鉴别码（Message Authentication Code，MAC）**\n3.  Alice 把 m 和 H(m + s) 合并成扩展报文 (m, H(m + s)) 发送给 Bob\n4.  Bob 收到扩展报文后，同样去计算 H(m + s)，如果与收到的 MAC 一致，说明报文没有被篡改\n\n鉴别密钥的作用是防止中间人在捕获到报文 m 后，篡改报文并重名生成 H(m)，这样接收方就还是无法确定报文是否被篡改\n\n目前最流行的 MAC 标准是 HMAC\n\n### 数字签名\n\n数字签名是一种同时使用了散列函数和非对称加密的技术。当 Bob 需要对一个报文 m 做签名，他首先用散列函数对报文计算指纹 H(m)，然后用自己的私钥和指纹作为输入，得到的输出就是数字签名。任何人如果想证明 Bob 的确对报文 m 做过签名，只需要先计算报文的指纹，然后使用 Bob 的公钥对签名进行解密，如果得到的指纹和结果是一致的，就说明了 Bob 的确签署了报文\n\n上面的数字签名技术还有一个问题没解决：如果为每个人分配私钥和公钥。这个问题需要由 **认证中心（Certification Authority，CA）** 来负责。CA 为每个需要被认证的实体生成一个证书，证书内有公钥、私钥和拥有者的全局唯一标识符，大家只要信任 CA 就能信赖数字签名技术了\n\n### PGP\n\nPGP 是一个电子邮件加密方案，全称是 Pretty Good Privacy。它融合了 RSA 加密、对称加密、数字签名技术，提供了对电子邮件的机密性、发送方鉴别和保温完整性验证功能，它的基本原理是这样的（假设 Alice 要向 Bob 发送邮件）\n\n1.  Alice 使用散列函数得到报文摘要\n2.  Alice 使用自己的私钥加密摘要得到报文签名，将数字签名和报文级联成为新报文\n3.  Alice 随机生成一个会话密钥，利用会话密钥加密新报文得到密文，用 Bob 的公钥加密会话密钥\n4.  Alice 将报文签名、密文、加密后的会话密钥发送给 Bob\n\n到此 Alice 的工作就结束了。Bob 在接收到 Alice 发来的数据后，做如下操作\n\n1.  Bob 用自己的私钥解密会话密钥\n2.  Bob 用会话密钥解密密文，得到报文和数字签名\n3.  Bob 使用散列函数得到报文摘要，然后使用自己的公钥解密数字签名，如果两个计算得到的结果相同，说明数据在传输过程中没有被篡改\n\n### SSL\n\n**SSL(Secure Socket Layer)** 相当于是一个提供了安全服务的加强版 TCP，它的第三版本也被称为 **TLS(Transport Layer Security)** 。SSL 差不多是取代 TCP 原有位置的，但是实际上它是一个应用层协议。SSL 的具体原理也很复杂，我这里只列出一些要点\n\n1.  在 SSL 通信的双方（比如 Bob 和 Alice）共使用了 4 个密钥：一个密钥是 Bob 向 Alice 发送数据的会话密钥；一个密钥是 Bob 向 Alice 发送报文完整性检测 MAC 密钥；一个密钥是 Alice 向 Bob 发送数据的会话密钥；一个密钥是 Alice 向 Bob 发送报文完整性检测 MAC 密钥\n2.  SSL 将报文数据分成被称为 **记录** 的基本单元，对记录做加密和报文完整性验证。SSL 对记录数据+MAC密钥+记录序号做散列，这样能防止中间人恶意替换记录的顺序\n\n## 防火墙\n\n防火墙是一种软件加上硬件一起实施网络连接管理的工具，可以认为这是一个位于网络边缘的路由器，具有下面的性质\n\n*   所有从内部网络流向外部和从外部流向内部的流量都必须经过防火墙\n*   防火墙仅会让允许授权的流量通过\n*   防火墙必须足够安全，不能被攻破\n\n防火墙的过滤方式可以分为 3 类：**传统分组过滤器（traditional packet filter）**、**状态过滤器（stateful filter）**、**应用程序网关（application gateway）**\n\n### 分组过滤器\n\n分组过滤器检查所有流经防火墙的数据包，基于事先定下的规则决定是否放行流量。它做出的决定基于下面因素\n\n*   数据报的源地址或目的地址\n*   数据报的协议类型：TCP、UDP、ICMP、OSPF 等\n*   TCP 或 UDP 的源或目的端口\n*   TCP 标志比特：SYN、ACK 等\n*   ICMP 报文类型\n*   数据报离开和进入网络的不同规则\n*   对不同路由器的接口的不同规则\n\n### 状态分组过滤器\n\n前面的分组过滤器只是根据一个分组的数据报决定是否放行，而状态分组过滤器会记录这个分组属于的连接，根据连接的状态决定是否放行分组\n\n简单来说，当内部或者外部用户发起 TCP 连接时，都必须经历 3 次握手（ SYN、SYNACK、ACK），防火墙可以探测到这些报文，然后在自己的数据库包保存这个 TCP 连接信息，当一个数据报来到防火墙时，防火墙在自己的数据库中检索到连接信息，然后根据既定的规则决定是否放行\n\n### 应用程序网关\n\n上面的两个过滤器都是应用于非应用层的数据报，有时候报文的认证信息存在于应用层中，这时候需要使用到 **应用程序网关（applicatin gateway）**。它不仅仅会检查 TCP 或者 UDP 数据报，还会检查应用层数据，以决定流量是否放行\n\n### 入侵检测系统\n\n**入侵检测系统（Intrusion Detection System，IDS）** 相当于是一个探针，安装在网络路径上，他会检测所有的流经自身的流量，在其中检测是否存在可疑流量，在必要的时候向网络管理员发送警告\n\n在一个网络中可能会部署多个 IDS，因为 IDS 对所有流量执行检测，需要大量的计算量，部署多个 IDS 能减轻每个 IDS 的负担\n\nIDS 使用了 **基于特征的系统（signature-based system）** 或 **基于异常的系统（anomaly-based system）**。基于特征的 IDS 有一个攻击的特征数据库，当流经的流量与某种攻击相似时（源端口相同、或者协议的某些字段值相同），它就会发出警告。基于特征的 IDS 的缺点是不能检测出新的攻击\n\n基于异常的 IDS 观察流经自身的流量，统计不同协议的分组的数量，当某种分组的数量异常升高时，他就判定网络中可能存在攻击行为。它的优点就是能够检测出新的攻击形式\n\nSnort 是一个开源的 IDS 实现，在全球大量部署，当一种新的攻击方式出现时，Snort 社区可能会在几小时内编写出应对规则，并供全球范围内的网络管理员下载和部署","slug":"计算机网络/chapter6-网络安全","published":1,"updated":"2019-09-28T15:54:44.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck13qknlg000dveo6za8uysk8","content":"<p>计算机网络中的两个节点希望安全通信，需要具有以下的特性</p>\n<ul>\n<li><strong>机密性</strong>。这说明通信的内容只有发送方和接收方才能知道，窃听者截获报文后也无法理解报文的内容</li>\n<li><strong>报文完整性</strong>。发送方和接收方希望报文在传输过程中没有被篡改</li>\n<li><strong>端点鉴别</strong>。发送方和接收方都能确定另一方的确有其声称的身份</li>\n<li><strong>运行安全性</strong>。能够连接到互联网的主机，都希望不会因为恶意者的攻击而瘫痪</li>\n</ul>\n<h2 id=\"密码学原理\"><a href=\"#密码学原理\" class=\"headerlink\" title=\"密码学原理\"></a>密码学原理</h2><p>要达到安全通信中的机密性，就需要对传输的报文加密。被加密的报文称为 <strong>明文（plaintext，clear text）</strong>；使用 <strong>加密算法（encryption algorithm）</strong> 可以加密明文得到 <strong>密文（ciphertext）</strong>；在加密的过程中需要使用 <strong>密钥（key）</strong>；如果需要把密文重新转成明文，就需要用到 <strong>解密算法（decryption algorithm）</strong>；类似的，解密算法也需要解密密钥。在对称加密中，加密密钥和解密密钥是相同的；而在公开密钥系统中，加密和解密的密钥是不同的，且加密密钥是公开的</p>\n<h3 id=\"凯撒密码\"><a href=\"#凯撒密码\" class=\"headerlink\" title=\"凯撒密码\"></a>凯撒密码</h3><p>凯撒密码是以罗马共和国执政官尤里乌斯·凯撒的名字命名的一种加密技术，原理非常简单：对于一个明文输入，将明文中的字母替换成另一个字母。每一种替换规则就是一个密钥</p>\n<p>凯撒密码有一个重要缺陷，即相同的明文字母对应同一个密文字母，因此可以用统计分析的方式去破解密码。比如英文中字母 e 出现的频率大约是 13%，而字母 t 出现的频率是 19%，而且英文单词 the 出现的概率也特别高，这样就能统计密文中字母或单词出现的频率来估算加密的密钥</p>\n<p>如果尝试攻击凯撒密码，根据攻击者所拥有的信息，可以把攻击方法分为下面 3 种</p>\n<ul>\n<li><strong>唯密文攻击</strong>：攻击者只知道密文，这时可以使用对字母频率的统计分析来攻击凯撒密码</li>\n<li><strong>已知明文攻击</strong>：攻击者知道明文中一定会出现一些单词，根据这些单词的密文来攻击凯撒密码</li>\n<li><strong>选择明文攻击</strong>：攻击者能够得到一些明文对应的密文，从而展开攻击。这与已知明文攻击有些类似</li>\n</ul>\n<p>针对这几种攻击，后来发展出了 <strong>多码代替密码（polyalphabetic encryption）</strong> 技术，这种技术尝试用多个凯撒密码密钥去加密一段密文</p>\n<h3 id=\"块密码\"><a href=\"#块密码\" class=\"headerlink\" title=\"块密码\"></a>块密码</h3><p><strong>块密码</strong> 是对称加密的一种方法，它将明文分为 k 比特的块，将每一个块映射为另一个块，映射的结果就是密文，每一种映射就是一个密钥。对于 k 比特的块，共有 <code>(2^k)!</code> 种密钥。当 k 的值比较大时（如 k = 64），保存 <code>(2^k)!</code> 个映射关系的成本太高了，因此实际应用中会使用函数模拟的方式生成随机排列表，使得输入一个 k 比特的明文得到 k 比特密文，这个函数必须要有一个性质：明文的每一个比特位都能影响输出结果</p>\n<p>目前 DES（Data Encryption Standard）、3DES 和 AES（Advanced Encryption Standard）都是块密码</p>\n<p>实际上块密码与凯撒密码有些相似的地方，他们都是把明文替换成密文的方式，因此也会具有与凯撒密码相同的弱点，即相同的明文得到相同的密文。消除这个弱点的方式是在加密的过程中引入随机性。</p>\n<p>一个可行的方法是：将明文分为 k 比特的明文快，对于每个明文快 mi，产生一个随机的 k 比特块 ri，那么密文 <code>ci = Ks(mi xor ri)</code>，其中 xor 是异或操作，Ks 是以 s 为密钥的加密函数。由于每一个明文快对应的随机块 ri 是不一样的，因此相同的明文块会产生不同的密文块</p>\n<p>这个方法也有一个问题：传输的数据量变成了原来的两倍。因为现在不仅仅需要传输密文，还需要传输随机块 ri。为了解决这个问题，产生了一种称作 <strong>密码块链接（Cipher Block Chaining，CBC）</strong> 的技术。它的原理是：仅仅产生第一个明文块的随机块，加密得到第一个密文块后，这个密文块就作为下一个明文块的随机块。</p>\n<h2 id=\"公开密钥加密\"><a href=\"#公开密钥加密\" class=\"headerlink\" title=\"公开密钥加密\"></a>公开密钥加密</h2><p>上面的凯撒密码和块密码都是被称为对称加密的技术，这意味着加密方和解密方需要使用同一个密钥来加密和解密。对称加密引入了一个新的问题：双方该如何安全的共享密钥。在现代的计算机网络中，发送方和接收方是无法在线下见面并确定密钥的</p>\n<p>为了解决这个问题，一种被称为 <strong>公开密钥加密</strong> 的技术被发明出来。公开密钥加密技术使用两个密钥，一个被称为 <strong>公钥（public key）</strong>，一个被称为 <strong>私钥（private key）</strong>。公钥是公开的，并且每个人都能知道，而私钥需要保密。公开密钥加密算法有这样一个性质：使用公钥加密明文得到密文，可以使用私钥解密；使用私钥加密明文得到密文，可以使用公钥解密。因此当两个人，比如 Bob 和 Alice 想要通信时，Bob 先获取到 Alice 的公钥，使用公钥加密后把密文发送给 Alice，Alice 得到密文后就能用私钥解密得到明文了；同理，Alice 也能获取到 Bob 的公钥并加密明文，Bob 用自己的私钥解密。当攻击者截取到密文后，因为没有私钥，也就不能解密密文了。</p>\n<p>公开密钥加密算法需要面临两个问题</p>\n<ol>\n<li>攻击者可以使用选择明文攻击。因为公钥和加密算法是众所周知的，攻击者可以用任意明文生成密文，并以此展开攻击，公开密钥加密必须能防止攻击者以猜出私钥</li>\n<li>接收方无法得知密文是谁发送的。在共享密钥中，接收方收到密文后就能知道发送方是谁了，因为只有发送方能有密钥去加密。现在因为公钥和加密算法是公开的，任何一个人都能向接收方发送一段密文，因此接收方必须使用其他方法去确定发送方的身份</li>\n</ol>\n<p>RSA 是现在比较流行的公开密钥加密算法，它基于的原理是目前没有高效的算法可以对大整数做因数分解。它的工作方式我就不说了，因为我也看不懂</p>\n<h2 id=\"报文完整性和数字签名\"><a href=\"#报文完整性和数字签名\" class=\"headerlink\" title=\"报文完整性和数字签名\"></a>报文完整性和数字签名</h2><p>Bob 在收到一个来自于声称自己是 Alice 的人的报文时，他需要做下面两件事</p>\n<ol>\n<li>确定报文确实来自于 Alice</li>\n<li>确定报文在传输过程中没有收到篡改</li>\n</ol>\n<p>在讨论这两点之前，我们还需要学习有关 <strong>密码散列函数</strong> 的知识</p>\n<h3 id=\"密码散列函数\"><a href=\"#密码散列函数\" class=\"headerlink\" title=\"密码散列函数\"></a>密码散列函数</h3><p>密码散列函数以 m 作为输入，可以得到一个固定长度的输出字符串，而且必须要求找到任意两个不同的报文 x 和 y，计算 H(x) = H(y) 在计算上是不可能的，这也表明，得到散列函数的输出后，反推输入是不可能的。目前常用的散列函数有 MD5、SHA-1</p>\n<p>有了散列函数，就能在接收端鉴定报文在传输过程中有没有被篡改了。比如 Alice 向 Bob 发送报文</p>\n<ol>\n<li>Alice 和 Bob 之间先生成一个 <strong>鉴别密钥（authentication key）</strong> s</li>\n<li>Alice 生成报文 m，使用散列函数计算得到 H(m + s)，H(m+s) 也叫做 <strong>报文鉴别码（Message Authentication Code，MAC）</strong></li>\n<li>Alice 把 m 和 H(m + s) 合并成扩展报文 (m, H(m + s)) 发送给 Bob</li>\n<li>Bob 收到扩展报文后，同样去计算 H(m + s)，如果与收到的 MAC 一致，说明报文没有被篡改</li>\n</ol>\n<p>鉴别密钥的作用是防止中间人在捕获到报文 m 后，篡改报文并重名生成 H(m)，这样接收方就还是无法确定报文是否被篡改</p>\n<p>目前最流行的 MAC 标准是 HMAC</p>\n<h3 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h3><p>数字签名是一种同时使用了散列函数和非对称加密的技术。当 Bob 需要对一个报文 m 做签名，他首先用散列函数对报文计算指纹 H(m)，然后用自己的私钥和指纹作为输入，得到的输出就是数字签名。任何人如果想证明 Bob 的确对报文 m 做过签名，只需要先计算报文的指纹，然后使用 Bob 的公钥对签名进行解密，如果得到的指纹和结果是一致的，就说明了 Bob 的确签署了报文</p>\n<p>上面的数字签名技术还有一个问题没解决：如果为每个人分配私钥和公钥。这个问题需要由 <strong>认证中心（Certification Authority，CA）</strong> 来负责。CA 为每个需要被认证的实体生成一个证书，证书内有公钥、私钥和拥有者的全局唯一标识符，大家只要信任 CA 就能信赖数字签名技术了</p>\n<h3 id=\"PGP\"><a href=\"#PGP\" class=\"headerlink\" title=\"PGP\"></a>PGP</h3><p>PGP 是一个电子邮件加密方案，全称是 Pretty Good Privacy。它融合了 RSA 加密、对称加密、数字签名技术，提供了对电子邮件的机密性、发送方鉴别和保温完整性验证功能，它的基本原理是这样的（假设 Alice 要向 Bob 发送邮件）</p>\n<ol>\n<li>Alice 使用散列函数得到报文摘要</li>\n<li>Alice 使用自己的私钥加密摘要得到报文签名，将数字签名和报文级联成为新报文</li>\n<li>Alice 随机生成一个会话密钥，利用会话密钥加密新报文得到密文，用 Bob 的公钥加密会话密钥</li>\n<li>Alice 将报文签名、密文、加密后的会话密钥发送给 Bob</li>\n</ol>\n<p>到此 Alice 的工作就结束了。Bob 在接收到 Alice 发来的数据后，做如下操作</p>\n<ol>\n<li>Bob 用自己的私钥解密会话密钥</li>\n<li>Bob 用会话密钥解密密文，得到报文和数字签名</li>\n<li>Bob 使用散列函数得到报文摘要，然后使用自己的公钥解密数字签名，如果两个计算得到的结果相同，说明数据在传输过程中没有被篡改</li>\n</ol>\n<h3 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h3><p><strong>SSL(Secure Socket Layer)</strong> 相当于是一个提供了安全服务的加强版 TCP，它的第三版本也被称为 <strong>TLS(Transport Layer Security)</strong> 。SSL 差不多是取代 TCP 原有位置的，但是实际上它是一个应用层协议。SSL 的具体原理也很复杂，我这里只列出一些要点</p>\n<ol>\n<li>在 SSL 通信的双方（比如 Bob 和 Alice）共使用了 4 个密钥：一个密钥是 Bob 向 Alice 发送数据的会话密钥；一个密钥是 Bob 向 Alice 发送报文完整性检测 MAC 密钥；一个密钥是 Alice 向 Bob 发送数据的会话密钥；一个密钥是 Alice 向 Bob 发送报文完整性检测 MAC 密钥</li>\n<li>SSL 将报文数据分成被称为 <strong>记录</strong> 的基本单元，对记录做加密和报文完整性验证。SSL 对记录数据+MAC密钥+记录序号做散列，这样能防止中间人恶意替换记录的顺序</li>\n</ol>\n<h2 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h2><p>防火墙是一种软件加上硬件一起实施网络连接管理的工具，可以认为这是一个位于网络边缘的路由器，具有下面的性质</p>\n<ul>\n<li>所有从内部网络流向外部和从外部流向内部的流量都必须经过防火墙</li>\n<li>防火墙仅会让允许授权的流量通过</li>\n<li>防火墙必须足够安全，不能被攻破</li>\n</ul>\n<p>防火墙的过滤方式可以分为 3 类：<strong>传统分组过滤器（traditional packet filter）</strong>、<strong>状态过滤器（stateful filter）</strong>、<strong>应用程序网关（application gateway）</strong></p>\n<h3 id=\"分组过滤器\"><a href=\"#分组过滤器\" class=\"headerlink\" title=\"分组过滤器\"></a>分组过滤器</h3><p>分组过滤器检查所有流经防火墙的数据包，基于事先定下的规则决定是否放行流量。它做出的决定基于下面因素</p>\n<ul>\n<li>数据报的源地址或目的地址</li>\n<li>数据报的协议类型：TCP、UDP、ICMP、OSPF 等</li>\n<li>TCP 或 UDP 的源或目的端口</li>\n<li>TCP 标志比特：SYN、ACK 等</li>\n<li>ICMP 报文类型</li>\n<li>数据报离开和进入网络的不同规则</li>\n<li>对不同路由器的接口的不同规则</li>\n</ul>\n<h3 id=\"状态分组过滤器\"><a href=\"#状态分组过滤器\" class=\"headerlink\" title=\"状态分组过滤器\"></a>状态分组过滤器</h3><p>前面的分组过滤器只是根据一个分组的数据报决定是否放行，而状态分组过滤器会记录这个分组属于的连接，根据连接的状态决定是否放行分组</p>\n<p>简单来说，当内部或者外部用户发起 TCP 连接时，都必须经历 3 次握手（ SYN、SYNACK、ACK），防火墙可以探测到这些报文，然后在自己的数据库包保存这个 TCP 连接信息，当一个数据报来到防火墙时，防火墙在自己的数据库中检索到连接信息，然后根据既定的规则决定是否放行</p>\n<h3 id=\"应用程序网关\"><a href=\"#应用程序网关\" class=\"headerlink\" title=\"应用程序网关\"></a>应用程序网关</h3><p>上面的两个过滤器都是应用于非应用层的数据报，有时候报文的认证信息存在于应用层中，这时候需要使用到 <strong>应用程序网关（applicatin gateway）</strong>。它不仅仅会检查 TCP 或者 UDP 数据报，还会检查应用层数据，以决定流量是否放行</p>\n<h3 id=\"入侵检测系统\"><a href=\"#入侵检测系统\" class=\"headerlink\" title=\"入侵检测系统\"></a>入侵检测系统</h3><p><strong>入侵检测系统（Intrusion Detection System，IDS）</strong> 相当于是一个探针，安装在网络路径上，他会检测所有的流经自身的流量，在其中检测是否存在可疑流量，在必要的时候向网络管理员发送警告</p>\n<p>在一个网络中可能会部署多个 IDS，因为 IDS 对所有流量执行检测，需要大量的计算量，部署多个 IDS 能减轻每个 IDS 的负担</p>\n<p>IDS 使用了 <strong>基于特征的系统（signature-based system）</strong> 或 <strong>基于异常的系统（anomaly-based system）</strong>。基于特征的 IDS 有一个攻击的特征数据库，当流经的流量与某种攻击相似时（源端口相同、或者协议的某些字段值相同），它就会发出警告。基于特征的 IDS 的缺点是不能检测出新的攻击</p>\n<p>基于异常的 IDS 观察流经自身的流量，统计不同协议的分组的数量，当某种分组的数量异常升高时，他就判定网络中可能存在攻击行为。它的优点就是能够检测出新的攻击形式</p>\n<p>Snort 是一个开源的 IDS 实现，在全球大量部署，当一种新的攻击方式出现时，Snort 社区可能会在几小时内编写出应对规则，并供全球范围内的网络管理员下载和部署</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>计算机网络中的两个节点希望安全通信，需要具有以下的特性</p>\n<ul>\n<li><strong>机密性</strong>。这说明通信的内容只有发送方和接收方才能知道，窃听者截获报文后也无法理解报文的内容</li>\n<li><strong>报文完整性</strong>。发送方和接收方希望报文在传输过程中没有被篡改</li>\n<li><strong>端点鉴别</strong>。发送方和接收方都能确定另一方的确有其声称的身份</li>\n<li><strong>运行安全性</strong>。能够连接到互联网的主机，都希望不会因为恶意者的攻击而瘫痪</li>\n</ul>\n<h2 id=\"密码学原理\"><a href=\"#密码学原理\" class=\"headerlink\" title=\"密码学原理\"></a>密码学原理</h2><p>要达到安全通信中的机密性，就需要对传输的报文加密。被加密的报文称为 <strong>明文（plaintext，clear text）</strong>；使用 <strong>加密算法（encryption algorithm）</strong> 可以加密明文得到 <strong>密文（ciphertext）</strong>；在加密的过程中需要使用 <strong>密钥（key）</strong>；如果需要把密文重新转成明文，就需要用到 <strong>解密算法（decryption algorithm）</strong>；类似的，解密算法也需要解密密钥。在对称加密中，加密密钥和解密密钥是相同的；而在公开密钥系统中，加密和解密的密钥是不同的，且加密密钥是公开的</p>\n<h3 id=\"凯撒密码\"><a href=\"#凯撒密码\" class=\"headerlink\" title=\"凯撒密码\"></a>凯撒密码</h3><p>凯撒密码是以罗马共和国执政官尤里乌斯·凯撒的名字命名的一种加密技术，原理非常简单：对于一个明文输入，将明文中的字母替换成另一个字母。每一种替换规则就是一个密钥</p>\n<p>凯撒密码有一个重要缺陷，即相同的明文字母对应同一个密文字母，因此可以用统计分析的方式去破解密码。比如英文中字母 e 出现的频率大约是 13%，而字母 t 出现的频率是 19%，而且英文单词 the 出现的概率也特别高，这样就能统计密文中字母或单词出现的频率来估算加密的密钥</p>\n<p>如果尝试攻击凯撒密码，根据攻击者所拥有的信息，可以把攻击方法分为下面 3 种</p>\n<ul>\n<li><strong>唯密文攻击</strong>：攻击者只知道密文，这时可以使用对字母频率的统计分析来攻击凯撒密码</li>\n<li><strong>已知明文攻击</strong>：攻击者知道明文中一定会出现一些单词，根据这些单词的密文来攻击凯撒密码</li>\n<li><strong>选择明文攻击</strong>：攻击者能够得到一些明文对应的密文，从而展开攻击。这与已知明文攻击有些类似</li>\n</ul>\n<p>针对这几种攻击，后来发展出了 <strong>多码代替密码（polyalphabetic encryption）</strong> 技术，这种技术尝试用多个凯撒密码密钥去加密一段密文</p>\n<h3 id=\"块密码\"><a href=\"#块密码\" class=\"headerlink\" title=\"块密码\"></a>块密码</h3><p><strong>块密码</strong> 是对称加密的一种方法，它将明文分为 k 比特的块，将每一个块映射为另一个块，映射的结果就是密文，每一种映射就是一个密钥。对于 k 比特的块，共有 <code>(2^k)!</code> 种密钥。当 k 的值比较大时（如 k = 64），保存 <code>(2^k)!</code> 个映射关系的成本太高了，因此实际应用中会使用函数模拟的方式生成随机排列表，使得输入一个 k 比特的明文得到 k 比特密文，这个函数必须要有一个性质：明文的每一个比特位都能影响输出结果</p>\n<p>目前 DES（Data Encryption Standard）、3DES 和 AES（Advanced Encryption Standard）都是块密码</p>\n<p>实际上块密码与凯撒密码有些相似的地方，他们都是把明文替换成密文的方式，因此也会具有与凯撒密码相同的弱点，即相同的明文得到相同的密文。消除这个弱点的方式是在加密的过程中引入随机性。</p>\n<p>一个可行的方法是：将明文分为 k 比特的明文快，对于每个明文快 mi，产生一个随机的 k 比特块 ri，那么密文 <code>ci = Ks(mi xor ri)</code>，其中 xor 是异或操作，Ks 是以 s 为密钥的加密函数。由于每一个明文快对应的随机块 ri 是不一样的，因此相同的明文块会产生不同的密文块</p>\n<p>这个方法也有一个问题：传输的数据量变成了原来的两倍。因为现在不仅仅需要传输密文，还需要传输随机块 ri。为了解决这个问题，产生了一种称作 <strong>密码块链接（Cipher Block Chaining，CBC）</strong> 的技术。它的原理是：仅仅产生第一个明文块的随机块，加密得到第一个密文块后，这个密文块就作为下一个明文块的随机块。</p>\n<h2 id=\"公开密钥加密\"><a href=\"#公开密钥加密\" class=\"headerlink\" title=\"公开密钥加密\"></a>公开密钥加密</h2><p>上面的凯撒密码和块密码都是被称为对称加密的技术，这意味着加密方和解密方需要使用同一个密钥来加密和解密。对称加密引入了一个新的问题：双方该如何安全的共享密钥。在现代的计算机网络中，发送方和接收方是无法在线下见面并确定密钥的</p>\n<p>为了解决这个问题，一种被称为 <strong>公开密钥加密</strong> 的技术被发明出来。公开密钥加密技术使用两个密钥，一个被称为 <strong>公钥（public key）</strong>，一个被称为 <strong>私钥（private key）</strong>。公钥是公开的，并且每个人都能知道，而私钥需要保密。公开密钥加密算法有这样一个性质：使用公钥加密明文得到密文，可以使用私钥解密；使用私钥加密明文得到密文，可以使用公钥解密。因此当两个人，比如 Bob 和 Alice 想要通信时，Bob 先获取到 Alice 的公钥，使用公钥加密后把密文发送给 Alice，Alice 得到密文后就能用私钥解密得到明文了；同理，Alice 也能获取到 Bob 的公钥并加密明文，Bob 用自己的私钥解密。当攻击者截取到密文后，因为没有私钥，也就不能解密密文了。</p>\n<p>公开密钥加密算法需要面临两个问题</p>\n<ol>\n<li>攻击者可以使用选择明文攻击。因为公钥和加密算法是众所周知的，攻击者可以用任意明文生成密文，并以此展开攻击，公开密钥加密必须能防止攻击者以猜出私钥</li>\n<li>接收方无法得知密文是谁发送的。在共享密钥中，接收方收到密文后就能知道发送方是谁了，因为只有发送方能有密钥去加密。现在因为公钥和加密算法是公开的，任何一个人都能向接收方发送一段密文，因此接收方必须使用其他方法去确定发送方的身份</li>\n</ol>\n<p>RSA 是现在比较流行的公开密钥加密算法，它基于的原理是目前没有高效的算法可以对大整数做因数分解。它的工作方式我就不说了，因为我也看不懂</p>\n<h2 id=\"报文完整性和数字签名\"><a href=\"#报文完整性和数字签名\" class=\"headerlink\" title=\"报文完整性和数字签名\"></a>报文完整性和数字签名</h2><p>Bob 在收到一个来自于声称自己是 Alice 的人的报文时，他需要做下面两件事</p>\n<ol>\n<li>确定报文确实来自于 Alice</li>\n<li>确定报文在传输过程中没有收到篡改</li>\n</ol>\n<p>在讨论这两点之前，我们还需要学习有关 <strong>密码散列函数</strong> 的知识</p>\n<h3 id=\"密码散列函数\"><a href=\"#密码散列函数\" class=\"headerlink\" title=\"密码散列函数\"></a>密码散列函数</h3><p>密码散列函数以 m 作为输入，可以得到一个固定长度的输出字符串，而且必须要求找到任意两个不同的报文 x 和 y，计算 H(x) = H(y) 在计算上是不可能的，这也表明，得到散列函数的输出后，反推输入是不可能的。目前常用的散列函数有 MD5、SHA-1</p>\n<p>有了散列函数，就能在接收端鉴定报文在传输过程中有没有被篡改了。比如 Alice 向 Bob 发送报文</p>\n<ol>\n<li>Alice 和 Bob 之间先生成一个 <strong>鉴别密钥（authentication key）</strong> s</li>\n<li>Alice 生成报文 m，使用散列函数计算得到 H(m + s)，H(m+s) 也叫做 <strong>报文鉴别码（Message Authentication Code，MAC）</strong></li>\n<li>Alice 把 m 和 H(m + s) 合并成扩展报文 (m, H(m + s)) 发送给 Bob</li>\n<li>Bob 收到扩展报文后，同样去计算 H(m + s)，如果与收到的 MAC 一致，说明报文没有被篡改</li>\n</ol>\n<p>鉴别密钥的作用是防止中间人在捕获到报文 m 后，篡改报文并重名生成 H(m)，这样接收方就还是无法确定报文是否被篡改</p>\n<p>目前最流行的 MAC 标准是 HMAC</p>\n<h3 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h3><p>数字签名是一种同时使用了散列函数和非对称加密的技术。当 Bob 需要对一个报文 m 做签名，他首先用散列函数对报文计算指纹 H(m)，然后用自己的私钥和指纹作为输入，得到的输出就是数字签名。任何人如果想证明 Bob 的确对报文 m 做过签名，只需要先计算报文的指纹，然后使用 Bob 的公钥对签名进行解密，如果得到的指纹和结果是一致的，就说明了 Bob 的确签署了报文</p>\n<p>上面的数字签名技术还有一个问题没解决：如果为每个人分配私钥和公钥。这个问题需要由 <strong>认证中心（Certification Authority，CA）</strong> 来负责。CA 为每个需要被认证的实体生成一个证书，证书内有公钥、私钥和拥有者的全局唯一标识符，大家只要信任 CA 就能信赖数字签名技术了</p>\n<h3 id=\"PGP\"><a href=\"#PGP\" class=\"headerlink\" title=\"PGP\"></a>PGP</h3><p>PGP 是一个电子邮件加密方案，全称是 Pretty Good Privacy。它融合了 RSA 加密、对称加密、数字签名技术，提供了对电子邮件的机密性、发送方鉴别和保温完整性验证功能，它的基本原理是这样的（假设 Alice 要向 Bob 发送邮件）</p>\n<ol>\n<li>Alice 使用散列函数得到报文摘要</li>\n<li>Alice 使用自己的私钥加密摘要得到报文签名，将数字签名和报文级联成为新报文</li>\n<li>Alice 随机生成一个会话密钥，利用会话密钥加密新报文得到密文，用 Bob 的公钥加密会话密钥</li>\n<li>Alice 将报文签名、密文、加密后的会话密钥发送给 Bob</li>\n</ol>\n<p>到此 Alice 的工作就结束了。Bob 在接收到 Alice 发来的数据后，做如下操作</p>\n<ol>\n<li>Bob 用自己的私钥解密会话密钥</li>\n<li>Bob 用会话密钥解密密文，得到报文和数字签名</li>\n<li>Bob 使用散列函数得到报文摘要，然后使用自己的公钥解密数字签名，如果两个计算得到的结果相同，说明数据在传输过程中没有被篡改</li>\n</ol>\n<h3 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h3><p><strong>SSL(Secure Socket Layer)</strong> 相当于是一个提供了安全服务的加强版 TCP，它的第三版本也被称为 <strong>TLS(Transport Layer Security)</strong> 。SSL 差不多是取代 TCP 原有位置的，但是实际上它是一个应用层协议。SSL 的具体原理也很复杂，我这里只列出一些要点</p>\n<ol>\n<li>在 SSL 通信的双方（比如 Bob 和 Alice）共使用了 4 个密钥：一个密钥是 Bob 向 Alice 发送数据的会话密钥；一个密钥是 Bob 向 Alice 发送报文完整性检测 MAC 密钥；一个密钥是 Alice 向 Bob 发送数据的会话密钥；一个密钥是 Alice 向 Bob 发送报文完整性检测 MAC 密钥</li>\n<li>SSL 将报文数据分成被称为 <strong>记录</strong> 的基本单元，对记录做加密和报文完整性验证。SSL 对记录数据+MAC密钥+记录序号做散列，这样能防止中间人恶意替换记录的顺序</li>\n</ol>\n<h2 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h2><p>防火墙是一种软件加上硬件一起实施网络连接管理的工具，可以认为这是一个位于网络边缘的路由器，具有下面的性质</p>\n<ul>\n<li>所有从内部网络流向外部和从外部流向内部的流量都必须经过防火墙</li>\n<li>防火墙仅会让允许授权的流量通过</li>\n<li>防火墙必须足够安全，不能被攻破</li>\n</ul>\n<p>防火墙的过滤方式可以分为 3 类：<strong>传统分组过滤器（traditional packet filter）</strong>、<strong>状态过滤器（stateful filter）</strong>、<strong>应用程序网关（application gateway）</strong></p>\n<h3 id=\"分组过滤器\"><a href=\"#分组过滤器\" class=\"headerlink\" title=\"分组过滤器\"></a>分组过滤器</h3><p>分组过滤器检查所有流经防火墙的数据包，基于事先定下的规则决定是否放行流量。它做出的决定基于下面因素</p>\n<ul>\n<li>数据报的源地址或目的地址</li>\n<li>数据报的协议类型：TCP、UDP、ICMP、OSPF 等</li>\n<li>TCP 或 UDP 的源或目的端口</li>\n<li>TCP 标志比特：SYN、ACK 等</li>\n<li>ICMP 报文类型</li>\n<li>数据报离开和进入网络的不同规则</li>\n<li>对不同路由器的接口的不同规则</li>\n</ul>\n<h3 id=\"状态分组过滤器\"><a href=\"#状态分组过滤器\" class=\"headerlink\" title=\"状态分组过滤器\"></a>状态分组过滤器</h3><p>前面的分组过滤器只是根据一个分组的数据报决定是否放行，而状态分组过滤器会记录这个分组属于的连接，根据连接的状态决定是否放行分组</p>\n<p>简单来说，当内部或者外部用户发起 TCP 连接时，都必须经历 3 次握手（ SYN、SYNACK、ACK），防火墙可以探测到这些报文，然后在自己的数据库包保存这个 TCP 连接信息，当一个数据报来到防火墙时，防火墙在自己的数据库中检索到连接信息，然后根据既定的规则决定是否放行</p>\n<h3 id=\"应用程序网关\"><a href=\"#应用程序网关\" class=\"headerlink\" title=\"应用程序网关\"></a>应用程序网关</h3><p>上面的两个过滤器都是应用于非应用层的数据报，有时候报文的认证信息存在于应用层中，这时候需要使用到 <strong>应用程序网关（applicatin gateway）</strong>。它不仅仅会检查 TCP 或者 UDP 数据报，还会检查应用层数据，以决定流量是否放行</p>\n<h3 id=\"入侵检测系统\"><a href=\"#入侵检测系统\" class=\"headerlink\" title=\"入侵检测系统\"></a>入侵检测系统</h3><p><strong>入侵检测系统（Intrusion Detection System，IDS）</strong> 相当于是一个探针，安装在网络路径上，他会检测所有的流经自身的流量，在其中检测是否存在可疑流量，在必要的时候向网络管理员发送警告</p>\n<p>在一个网络中可能会部署多个 IDS，因为 IDS 对所有流量执行检测，需要大量的计算量，部署多个 IDS 能减轻每个 IDS 的负担</p>\n<p>IDS 使用了 <strong>基于特征的系统（signature-based system）</strong> 或 <strong>基于异常的系统（anomaly-based system）</strong>。基于特征的 IDS 有一个攻击的特征数据库，当流经的流量与某种攻击相似时（源端口相同、或者协议的某些字段值相同），它就会发出警告。基于特征的 IDS 的缺点是不能检测出新的攻击</p>\n<p>基于异常的 IDS 观察流经自身的流量，统计不同协议的分组的数量，当某种分组的数量异常升高时，他就判定网络中可能存在攻击行为。它的优点就是能够检测出新的攻击形式</p>\n<p>Snort 是一个开源的 IDS 实现，在全球大量部署，当一种新的攻击方式出现时，Snort 社区可能会在几小时内编写出应对规则，并供全球范围内的网络管理员下载和部署</p>\n"},{"title":"chapter5-链路层","date":"2019-09-14T07:15:23.000Z","_content":"\n\n\n\n\n本章接着前一章学习的网络层，更加深入来到下一层数据链路层。\n\n## 链路层概述\n\n首先来一张数据报传输过程的例子，帮助理解数据报是如何从发送端到达目的端的，中间发生了怎样的过程，来看下面这张图：\n\n![公司网络](http://media.coderluo.top/计算机网络/jvu78.png)\n\n如上图所示的公司网络中，思考从无线主机向服务器发送一个数据报，该数据报将实际通过6段链路：\n\n1. 发送主机与WIFI接入点之间的Wifi链路；\n2. 接入点与链路层交换机之间的以太网链路；\n3. 链路层交换机与路由器之间的链路；\n4. 两台路由器之间的链路；\n5. 路由器和服务器链路层交换机之间的链路；\n6. 交换机和服务器之间的以太网链路；\n\n在通过特定链路时，传输结点将数据报封装在链路层帧中，并将该帧传送到链路中。\n\n### 链路层提供的服务\n\n1. 成帧\n2. 链路接入\n3. 可靠交付，链路层的可靠交付通过是通过确认和重传取得，这里应该联想传输层的TCP协议提供的可靠传输服务。\n4. 差错检测和纠正\n\n### 链路层在何处实现\n\n**链路层的主体部分是在网络适配器**中实现的，也就是我们说的网卡，它实现的服务有：成帧、链路接入、差错检测等。\n\n\n## 差错校验和纠技术\n\n链路层接到上层的应用数据后，加上自己的首部组成链路层数据报，放在链路中进行传播。传播中可能发生错误，因此需要有差错检测机制来发现链路层首部和应用数据的错误。差错检测可能并不能找到所有的错误，因此链路层可能向上层交付一个有差错的数据报，但是这种事情的发生概率比较低\n\n差错检测常用的 3 种技术分别是：**奇偶校验、检验和方法、循环冗余检测**\n\n1. **奇偶校验** 方法是其中最简单的一种。如果要发送 d 比特的数据，在这些数据的最后附加一个比特，共 d+1 比特，附加的比特使得所有的比特位中的 1 的个数是偶数。这样，当接收方收到数据后，只需要检查 d+1 比特的数据中的 1 的个数是不是偶数，如果不是则必定在传输过程中发生了错误；但是如果是，也并不意味着一定没有发生错误，因为有可能在两个地方发生了比特翻转使得 1 的个数仍为偶数，当然这样的事情发生的概率是比较低的\n\n> 上面这样的奇偶校验方法是一维奇偶校验，后来还出现了 二维奇偶校验 方法。将所有的数据分为 i 行 j 列，对每一行附加一个比特，对每一列也附加一个比特，这样总共就附加了 i+j+1 比特。每一行和每一列的附加比特都让行和列的数字 1 的数量是偶数。当某一个比特数据发生错误后，我们发现在第 n 行和第 m 列的数字 1 的个数不是偶数，那么发生错误的数据就是 n 行 m 列的数据，这样我们就能把该比特数据翻转到另一个值，我们就纠正了数据错误，这种能力叫做 前向纠错。二维奇偶校验同样能发现多于一个比特的数据错误，但这种情况下就不能纠正错误了\n\n2. **英特网检验和（Internet checksum）** 是另一种差错监测方法。从它的英文名称就可以看出，它是把二进制数据当做整数进行求和来检测差错的。比如，将数据按 16 比特分为多个整数，将所有整数求和，把和取反码就得到了检验和。把检验和附加在报文中。接收方收到数据和检验和后，同样按照 16 比特的分组把所有整数求和并取反码，如果得到的数全是 1 说明数据传输没有发生错误；而如果有一位是 0 就说明错误发生了\n\n> 之前学习运输层时我们知道运输层的协议多是用检验和法，而链路层协议通常会用下面介绍的 CRC 方法。检验和方法相对于 CRC 来说偏弱一些，而因为运输层协议通常是由软件实现，因此运输层选择了偏弱但是计算更加快速的检验和方法。而链路层因为更加贴近底层硬件，而硬件专门对 CRC 提供支持，因此链路层选用了更强的 CRC\n\n3. **循环冗余检测（Cyclic redundancy Check, CRC）** 是链路层使用的差错检测技术。这个方法国语复杂，我也并没有看懂，这里就不详细记录了\n\n\n## 多路访问链路和协议\n\n\n\n> 多路访问问题 研究如何协调多个发送和接受节点对同一个共享广播信道的访问。当两个或多个节点在信道上同时发送数据时，他们的信号会彼此 **碰撞（collide）**，发生碰撞后任何节点都不能从信道上接受数据。因此多路访问协议要决定谁在什么时候有发送数据的权力。目前有很多多路访问协议，可以分为以下三种:\n\n1. **信道划分协议**\n2. **随机接入协议**\n3. **轮流协议**\n\n对于一个速率是 R bps 的广播信道，多路访问协议最好有下面的特性:\n\n- 当仅有一个节点在发送数据时，节点应有 R bps 的吞吐量\n- 当有 M 个节点在发送数据时，每个节点应有 R/M bps 的吞吐量。不一定要求每个节点在每个时间点都有 R/M bps 的吞吐量，而是在一个时间段内有这要的平均速率。这也要求每个节点都能平等的使用信道\n- 协议不会因为单个节点的故障而崩溃\n- 协议应是简单的，实现不昂贵\n\n### 信道划分协议\n\n信道划分协议有 3 种：\n1. 时分多路复用（TDM）\n2. 频分多路复用（FDM） \n3. 码分多址（CDMA）\n\n- 时分多路复用是把时间划分 时间帧（time frame），而一个时间帧划分为为多个 时隙（slot）。时隙会被分配给各个节点，每个节点有数据要发送时，只能等待直到自己的时隙到来才能发送。TDM 非常公平，但是当只有一个节点要发送数据时，这个节点的吞吐量被限制在 R/M bps，不能到达信道的全速\n\n- 频分多路复用把信道划分为不同的频段，频道的速率是 R/M bps，频段被分配给各个节点，各个节点可以同时发送数据而不会碰撞。FDM 与 TDM 一样公平但是当只有一个节点时不能全速发送\n\n- 码分多址技术给每个节点分配不同的编码，精心选择编码可以使得当多个节点同时发送数据而不发生干扰，接收方能正确接收发送方编码的数据比特（**假设接收方知道发送方的编码**），而不再乎其他发送方的干扰传输。\n\n### 随机接入协议\n\n随机接入协议中，每个节点总是以最大的速率发送数据，当有碰撞发生时，节点等待一个随机的时间后再次尝试发送数据。随机接入协议中比较常见的有 **ALOHA 协议** 和 **载波侦听多路访问协议（CSMA）**\n\n#### 时隙 ALOHA\n\n对时隙 ALOHA，我们做出下面的假设：\n\n- 所有帧由 L 比特组成\n- 时间被划分为 L/R 的时隙，正好每一个时隙发送一帧\n- 节点只在时隙的开始发送帧\n- 节点是同步的，每个节点都知道时隙何时开始\n- 如果在一个时隙中有两个或多个帧发生碰撞，节点会在时隙结束之前得知碰撞事件\n\n对于 ALOHA 协议中的操作如下：\n\n- 当节点有数据要发送时，等到下一个时隙开始立即传送数据\n- 如果没有碰撞，数据的发送就成功了。如果有新帧到来，立即发送\n- 如果有碰撞，那么有 p 的概率在下一个时隙中发送数据，直到数据没有碰撞的发送出去\n\n> 相比较于 TDM 和 FDM，ALOHA 协议同样公正，而且在只有一个节点有数据发送时，它能以全速发送数据。当有大量的节点存在时，节点间会因为碰撞而造成一些时隙被浪费。我们定义一个成功的时隙就是无碰撞的成功发送了数据的时隙，而效率就是成功的时隙占所有时隙的份额。通过计算表明，当有大量的节点有发送大量的数据时，ALOHA 协议的效率大约是 1/e = 37%，有 26% 的时隙发生了碰撞\n\n#### 非时隙 ALOHA 协议\n\n> 时隙 ALOHA 协议中有一个假设：节点之间是同步的。但第一版的 ALOHA 协议是一个非同步协议，即节点可以在任意时间点开始发送数据。去掉节点间的必须同步的假设后，我们可以得到非时隙 ALOHA 协议的效率是 1/(2e) ，比时隙 ALOHA 协议还要小一些\n\n#### 载波侦听多路访问协议\n\n在 ALOHA 协议中，节点决定是否发送数据与其他节点无关，这就导致当其他节点在发送数据时，另一个节点也开始发送数据就必定使得碰撞发生。而如果节点如果能够侦听到另一个节点正在发送数据，那么它决定在另一个节点结束发送数据后才发送自己的数据，这将避免碰撞的发生。这就是 载波侦听 原理\n\n除此之外还有一个重要的原理叫做 碰撞检测（collision detection），即节点在发送数据时同时也在侦听网络，一些发生另一个节点发送的信号与自己发送的信号相互干扰后就立即停止发送\n\n这两个规则被包含在 载波侦听多路访问协议（Carrier Sense Multiple Access, CSMA） 和 具有碰撞检测的 CSMA（CSMA with Collision Detection, CSMA/CD） 协议族中\n\n如果说节点具有载波侦听功能，那么为什么还会发生碰撞呢？这是因为信号在信道中传播的速度是有限的，当一个节点 A 开始传送数据后，另一个节点 B 可能需要过一段时间才能侦听到信号，如果 B 在侦听到信号之前也开始传送数据，那么此时碰撞就发生了\n\n在检测到碰撞后，节点会等待一个随机的时间后再次尝试发送数据。这个随机的时间量选择也是有一个算法的，叫做 二进制指数后退（binary exponential backoff）。即当节点连续发生 n 次碰撞后，它会从 {0, 1, 2, 4, ... , 2^n -1 } 的常数中随机选择一个值 K 。在以太网协议中，等待的时间是 K * 传送 512 比特所需要的时间，作为随机等待的时间。n 能取到的最大值一般是 10\n\n经过一系列复杂的计算，我们可以得到 CSMA/CD 的效率是 1 / (1 + 5 d1/d2) ，其中 d1 是信号在两个节点间传播所需要的最大时间，d2 是传递一个最大长度的以太网帧所需要的时间。当 d1 越小时，传播速率越接近于 1 ，即信号传播速度越快，碰撞越不可能发生\n\n\n### 轮流协议\n\n轮流协议（taking-turns protocol）也有很多种。\n\n第一种轮流协议是 轮询协议（polling protocol）。这个协议要求一个节点被指定为主节点，主节点轮询每个节点，告诉每个节点它能传送的帧的数量。比如主节点告诉节点 1 它能传送的帧的数量，当节点 1 传送完这些帧后，主节点告诉节点 2 能传送的帧的数量，依此类推。这个协议需要轮询每个节点，这就引入了轮询时延，导致效率有所降低。第二个缺点是当主节点出现故障，整个信道都不可用了。802.15 协议和蓝牙协议就使用了轮询协议\n\n第二种轮流协议是 令牌传递协议（token-passing protocol）。这个协议没有主节点，而是存在一个称为 令牌（token） 的特殊帧，令牌只有一个，在每个节点之间以固定的次序传输。如果一个节点有数据需要发送，它会尝试去获取令牌，只有当它拿到令牌后才会开始发送数据。如果节点拿到了令牌却没有数据需要发送，那么它会把令牌传递给下一个节点。下一个节点会根据自己有没有数据需要发送而决定是自己保留令牌还是传给另一个节点。令牌传送协议效率很高且分散，但是也有自己的缺点。如果一个节点发生故障，没有适时交出令牌，那么整个网络将会瘫痪，必须通过某种令牌恢复策略才能从瘫痪中恢复\n\n## 交换局域网\n\n\n> - 主机除了具有英特网 IP 地址外，他们还有另外一种地址，即 MAC 地址。严格来说，是主机的网络适配器具有 MAC 地址。对于有多个接口的路由器，每一个接口都对应了一个 MAC 地址\n> - MAC 地址总长度是 6 字节，因此共有 2^48 个可能的地址，大约是 200 万亿个，数字这么大以至于目前世界上没有两个网卡具有相同的 MAC 地址\n\n\n### 地址解析协议 ARP\n\n因为有网络层地址（IP 地址）和链路层地址（MAC 地址）的存在，就需要在两者之间进行转换，这个转换的协议就是 **地址解析协议（Address Resolution Protocol，ARP）**\n\nARP 实际上与 DNS 协议特别像，即 DNS 将域名解析成 IP 地址，而 ARP 将 IP 地址解析成 MAC 地址。不过 DNS 能解析网络上任意一个位置的主机的域名，而 ARP 只能解析同一个子网下的 IP 地址的 MAC 地址\n\n在一个主机上会有一个叫做 ARP 表 的数据解构，里面保存着子网内的 IP 地址到 MAC 地址的映射，其中的每一个项目的过期时间通常是 20 分钟。当主机需要向一个 IP 地址发送数据时，会现在自己的 ARP 表中搜索这个地址的 MAC 地址。如果表中不存在这个映射关系，那么就需要借助 ARP 协议了。主机回想子网内广播一个 ARP 分组（ARP Packet）。这个分组包含发送方和接收方的 IP 地址和 MAC 地址，ARP 的响应分组和请求分组具有相同的结构\n\n在请求分组中，发送方将分组发向 MAC 地址是 FF-FF-FF-FF-FF-FF 的接受主机，这个地址实际上是广播地址，因此所有的主机在收到这个分组后，都会选择接受它。接受后，主机会检测请求分组中请求解析的 IP 地址是不是自身，如果不是，主机会把这个请求分组丢弃；而如果是，那么主机会构造一个相同的响应分组，不过这个分组不会是一个广播帧，而是发向请求的主机。请求主机收到后也就知道了自己想要的结果\n\nMAC 地址只能在子网内部使用，如果主机需要把数据发向子网以外的主机，那么该如何构造分组呢？实际上，这个分组的 IP 地址是实际接受主机的地址（即子网外的地址），而 MAC 地址是网关路由器的 MAC 地址。因此这个分组会在子网内部被传递给网关，网关收到这个分组后，读取发送的 IP 地址，重新构造一个链路层分组，把其中的 MAC 地址修改成下一个接受这个分组的路由器的 MAC 地址\n\n\n### 以太网\n\n以太网的帧结构\n\n![链路层帧结构](http://media.coderluo.top/计算机网络/jcjmr.png)\n\n- 前同步码 （8 字节）：前同步码的存在是为了让接收方的适配器与发送方的适配器在时钟上进行同步，虽然以太网链路层具有一个确定的速率，但是发送适配器可能相对于这个速率有一定的偏移，因此接受适配器需要一定的时间去确定发送方的速率。前同步码的前 7 个字节都是 10101010 这样的循环，最后一个字节是 10101011，最后的 11 就告诉了接收方重要的数据要来了\n\n- 目的地址（6 字节）：接受适配器的 MAC 地址。接受适配器收到了目的地址与自己的 MAC 地址相同的以太网帧、或者目的地址是广播地址的帧，就会把帧的数据部分传递给网络层，否则丢弃这个帧\n\n- 源地址（6 字节）：即发送方的网络适配器地址\n\n- 类型字段（2 字节）：这个字段指明了这个帧的网络层使用了什么协议，比如 0x8086 是 ARP 分组\n\n- 数据字段（46 ~ 1500 字节）：数据字段承载了 IP 数据报，以太网的最大传输单元 MTU 是 1500 字节，对于超过 1500 字节的 IP 数据报，以太网必须把数据报拆开成两个以太网帧。以太网的最小传输单元是 46 字节，所以对于小于 46 字节的数据，以太网会把数据填充到 46 字节。被填充的数据传送到接收方后，接收方的适配器会把 46 字节的数据交付给网络层，网络层读取 IP 数据报首部中的数据长度字段，并去除填充数据\n\n- CRC：CRC 的目的是让适配器能够检测以太网帧在传输过程中是否发生了错误\n\n以太网提供无连接、不可靠的服务\n\n> **在以前，以太网的链路是总线拓扑结构或者基于集线器的星型拓扑结构，因此是一条广播链路（一个接口收到比特将从其所有接口进行转发，如果同时两个接口收到比特将发生碰撞，生成该帧的结点必须重新传输）。**\n\n但是现在，多数以太网是基于**交换机**的星型拓扑结构，这意味着一条链路上只有首尾两个交换机，交换机不会向一个接口上发送超过一个帧，而且首尾交换机是全双工的，表示两个交换机可以能够同时向链路上发送以太网帧而不会发生碰撞，因此现在没有必要使用 MAC 协议了\n\n## Web 页面请求的里程\n--------------------------\n\nBob 拿着他的笔记本电脑到了图书馆内，连上图书馆的以太网，打开浏览器访问 [www.google.com](http://www.google.com/) 。在这一过程中，他的电脑究竟发出了哪些请求呢？\n\n### DHCP\n\nDHCP 发生在电脑连上了网线与浏览器请求 Web 页面之间。刚插上网线的时候，电脑此时还没有一个 IP 地址，因此必须先获得一个地址，这是通过 DHCP 协议完成的：\n\n1. Bob 的电脑先要构造一个 DHCP 请求报文。这是一个 UDP 报文，目的端口是 67（DHCP 服务端口），源端口是 68（DHCP 客户端口）；目的地址是 255.255.255.255（广播地址），源地址是 0.0.0.0（本机地址）。因为电脑此时还不知道 DHCP 服务端的地址，而且自己也没有地址\n\n2. DHCP 请求报文的 IP 数据报被放入以太网帧中。以太网帧的目的 MAC 地址是 FF:FF:FF:FF:FF:FF，使该帧将被广播到与交换机连接的所有设备（如果顺利也包括DHCP服务器），源 MAC 地址是 Bob 电脑的 MAC 地址（假设是 00:16:D3:23:68:8A）\n\n3. 这个包含DHCP请求的广播以太网帧是第一个由Bob设备发送到以太网交换机的帧，以太网帧被发送到交换机的一个接口上，交换机把这个帧广播到它所有的输出接口上，包括连接到路由器的端口；\n\n4. 运行着 DHCP （应用层，使用UDP协议）服务的路由器在它的一个接口拥有MAC地址 00:22:6B:45:1F:1B 收到了这个以太网帧，分解出 UDP 报文后向上传递到 67 端口的进程上\n\n5. 我们假设 DHCP 服务能够以 CIDR 块 68.85.2.0/24 分配 IP 地址，因此它分配了地址 68.86.2.101 给 Bob 的电脑。DHCP 服务生成一个 DHCP ACK 报文，报文中包含 68.86.2.101 地址、DNS 服务器的 IP 地址（68.87.71.226）、默认网关路由器的 IP 地址（65.85.2.1）、子网块（68.85.2.0/24），这个报文被放入一个 UDP 报文，UDP报文段被放入一个IP数据报中，IP数据报再被放入一个以太网帧中。以太网帧的源 MAC 地址是路由器接收到请求的接口的地址（00:22:6B:45:1F:1B），目的 MAC 地址是 Bob 的电脑的 MAC 地址（00:16:D3:23:68:8A）\n\n6. 以太网帧被路由器发送到交换机上。交换机是自学习的，它知道 Bob 的 DHCP 请求报文是从自己的哪个接口收到的，因此会把这个以太网帧也发送到这个接口上\n\n7. Bob 接收到了 DHCP ACK 的以太网帧，从中抽取IP数据报，在从IP数据报中抽取UDP报文段，再从UDP报文段中抽取DCHP ACK报文，取出了分配的 IP 地址、DNS 服务器地址、默认网关地址、子网块等信息。Bob 的笔记本把所有目的地址是 68.85.2.0/24 之外的报文都发送给默认网关。到了这里，Bob 的电脑就算已经连上互联网了\n\n### DNS 与 ARP\n\n这时 Bob 的电脑已经能连上网了，当他键入 [www.google.com](http://www.google.com/) 时，并不知道这个域名对应的 IP 地址是什么，因此需要借助于 DNS 协议。但是在发送 DNS 请求之前，还需要解决一个问题：Bob 的电脑这时并不知道默认网关的 MAC 地址。在发送 DNS 请求之前，必须先发送 ARP 请求获得网关的 MAC 地址\n\n\n1. Bob 的电脑生成一个目的地址是 65.85.2.1 的 ARP 查询报文，目的 MAC 地址是 FF:FF:FF:FF:FF:FF 。这个以太网帧被发送给交换机后，交换机把这个帧发送给所有的设备，包括网关路由器\n\n2. 默认网关在收到 ARP 查询报文后，发现报文中的目的地址与自己的地址匹配，因此网关准备一个 ARP 回答，在其中包含了自己的 MAC 地址（00:22:6B:45:1F:1B），装入以太网帧中，目的地址是 00:16:D3:23:68:8A，交付给交换机，再由交换机交付给Bob\n\n3. 路由器接受到 ARP 回答报文后，交付给 Bob 的电脑，Bob 的电脑从中得知了网关的 MAC 地址\n\n4. Bob 的电脑此时终于能构造 DNS 报文查询域名的 IP 地址了。它构造的 DNS 报文的目的 IP 地址是 68.87.71.226，目的 MAC 地址是 00:22:6B:45:1F:1B（网关），交换机收到这个帧后把它发送给网关路由器\n\n\n### 开始 DNS 查询\n\n1.  DNS 查询报文发送给了网关，网关根据 IP 数据包的目的地址，就这个报文重新封装，发送给了 DNS 服务器\n2.  DNS 服务器收到了查询报文，在自己的 DNS 数据库中找到与 [www.google.com](http://www.google.com/) 匹配的记录，将这条记录变成 DNS 回答报文，使用 UDP 协议发送给 Bob 的电脑\n3.  Bob 的电脑收到了 DNS 回答报文后，终于知道了 [www.google.com](http://www.google.com/) 的 IP 地址，可以开始发送 HTTP 请求了\n\n\n![](http://media.coderluo.top/计算机网络/my3om.png)\n\n\n![](http://media.coderluo.top/计算机网络/83ugo.png)","source":"_posts/计算机网络/chapter5-链路层.md","raw":"---\ntitle: chapter5-链路层\ntags:\n  - 链路层\ndate: 2019-09-14 15:15:23\ncategories: 计算机网络\n---\n\n\n\n\n\n本章接着前一章学习的网络层，更加深入来到下一层数据链路层。\n\n## 链路层概述\n\n首先来一张数据报传输过程的例子，帮助理解数据报是如何从发送端到达目的端的，中间发生了怎样的过程，来看下面这张图：\n\n![公司网络](http://media.coderluo.top/计算机网络/jvu78.png)\n\n如上图所示的公司网络中，思考从无线主机向服务器发送一个数据报，该数据报将实际通过6段链路：\n\n1. 发送主机与WIFI接入点之间的Wifi链路；\n2. 接入点与链路层交换机之间的以太网链路；\n3. 链路层交换机与路由器之间的链路；\n4. 两台路由器之间的链路；\n5. 路由器和服务器链路层交换机之间的链路；\n6. 交换机和服务器之间的以太网链路；\n\n在通过特定链路时，传输结点将数据报封装在链路层帧中，并将该帧传送到链路中。\n\n### 链路层提供的服务\n\n1. 成帧\n2. 链路接入\n3. 可靠交付，链路层的可靠交付通过是通过确认和重传取得，这里应该联想传输层的TCP协议提供的可靠传输服务。\n4. 差错检测和纠正\n\n### 链路层在何处实现\n\n**链路层的主体部分是在网络适配器**中实现的，也就是我们说的网卡，它实现的服务有：成帧、链路接入、差错检测等。\n\n\n## 差错校验和纠技术\n\n链路层接到上层的应用数据后，加上自己的首部组成链路层数据报，放在链路中进行传播。传播中可能发生错误，因此需要有差错检测机制来发现链路层首部和应用数据的错误。差错检测可能并不能找到所有的错误，因此链路层可能向上层交付一个有差错的数据报，但是这种事情的发生概率比较低\n\n差错检测常用的 3 种技术分别是：**奇偶校验、检验和方法、循环冗余检测**\n\n1. **奇偶校验** 方法是其中最简单的一种。如果要发送 d 比特的数据，在这些数据的最后附加一个比特，共 d+1 比特，附加的比特使得所有的比特位中的 1 的个数是偶数。这样，当接收方收到数据后，只需要检查 d+1 比特的数据中的 1 的个数是不是偶数，如果不是则必定在传输过程中发生了错误；但是如果是，也并不意味着一定没有发生错误，因为有可能在两个地方发生了比特翻转使得 1 的个数仍为偶数，当然这样的事情发生的概率是比较低的\n\n> 上面这样的奇偶校验方法是一维奇偶校验，后来还出现了 二维奇偶校验 方法。将所有的数据分为 i 行 j 列，对每一行附加一个比特，对每一列也附加一个比特，这样总共就附加了 i+j+1 比特。每一行和每一列的附加比特都让行和列的数字 1 的数量是偶数。当某一个比特数据发生错误后，我们发现在第 n 行和第 m 列的数字 1 的个数不是偶数，那么发生错误的数据就是 n 行 m 列的数据，这样我们就能把该比特数据翻转到另一个值，我们就纠正了数据错误，这种能力叫做 前向纠错。二维奇偶校验同样能发现多于一个比特的数据错误，但这种情况下就不能纠正错误了\n\n2. **英特网检验和（Internet checksum）** 是另一种差错监测方法。从它的英文名称就可以看出，它是把二进制数据当做整数进行求和来检测差错的。比如，将数据按 16 比特分为多个整数，将所有整数求和，把和取反码就得到了检验和。把检验和附加在报文中。接收方收到数据和检验和后，同样按照 16 比特的分组把所有整数求和并取反码，如果得到的数全是 1 说明数据传输没有发生错误；而如果有一位是 0 就说明错误发生了\n\n> 之前学习运输层时我们知道运输层的协议多是用检验和法，而链路层协议通常会用下面介绍的 CRC 方法。检验和方法相对于 CRC 来说偏弱一些，而因为运输层协议通常是由软件实现，因此运输层选择了偏弱但是计算更加快速的检验和方法。而链路层因为更加贴近底层硬件，而硬件专门对 CRC 提供支持，因此链路层选用了更强的 CRC\n\n3. **循环冗余检测（Cyclic redundancy Check, CRC）** 是链路层使用的差错检测技术。这个方法国语复杂，我也并没有看懂，这里就不详细记录了\n\n\n## 多路访问链路和协议\n\n\n\n> 多路访问问题 研究如何协调多个发送和接受节点对同一个共享广播信道的访问。当两个或多个节点在信道上同时发送数据时，他们的信号会彼此 **碰撞（collide）**，发生碰撞后任何节点都不能从信道上接受数据。因此多路访问协议要决定谁在什么时候有发送数据的权力。目前有很多多路访问协议，可以分为以下三种:\n\n1. **信道划分协议**\n2. **随机接入协议**\n3. **轮流协议**\n\n对于一个速率是 R bps 的广播信道，多路访问协议最好有下面的特性:\n\n- 当仅有一个节点在发送数据时，节点应有 R bps 的吞吐量\n- 当有 M 个节点在发送数据时，每个节点应有 R/M bps 的吞吐量。不一定要求每个节点在每个时间点都有 R/M bps 的吞吐量，而是在一个时间段内有这要的平均速率。这也要求每个节点都能平等的使用信道\n- 协议不会因为单个节点的故障而崩溃\n- 协议应是简单的，实现不昂贵\n\n### 信道划分协议\n\n信道划分协议有 3 种：\n1. 时分多路复用（TDM）\n2. 频分多路复用（FDM） \n3. 码分多址（CDMA）\n\n- 时分多路复用是把时间划分 时间帧（time frame），而一个时间帧划分为为多个 时隙（slot）。时隙会被分配给各个节点，每个节点有数据要发送时，只能等待直到自己的时隙到来才能发送。TDM 非常公平，但是当只有一个节点要发送数据时，这个节点的吞吐量被限制在 R/M bps，不能到达信道的全速\n\n- 频分多路复用把信道划分为不同的频段，频道的速率是 R/M bps，频段被分配给各个节点，各个节点可以同时发送数据而不会碰撞。FDM 与 TDM 一样公平但是当只有一个节点时不能全速发送\n\n- 码分多址技术给每个节点分配不同的编码，精心选择编码可以使得当多个节点同时发送数据而不发生干扰，接收方能正确接收发送方编码的数据比特（**假设接收方知道发送方的编码**），而不再乎其他发送方的干扰传输。\n\n### 随机接入协议\n\n随机接入协议中，每个节点总是以最大的速率发送数据，当有碰撞发生时，节点等待一个随机的时间后再次尝试发送数据。随机接入协议中比较常见的有 **ALOHA 协议** 和 **载波侦听多路访问协议（CSMA）**\n\n#### 时隙 ALOHA\n\n对时隙 ALOHA，我们做出下面的假设：\n\n- 所有帧由 L 比特组成\n- 时间被划分为 L/R 的时隙，正好每一个时隙发送一帧\n- 节点只在时隙的开始发送帧\n- 节点是同步的，每个节点都知道时隙何时开始\n- 如果在一个时隙中有两个或多个帧发生碰撞，节点会在时隙结束之前得知碰撞事件\n\n对于 ALOHA 协议中的操作如下：\n\n- 当节点有数据要发送时，等到下一个时隙开始立即传送数据\n- 如果没有碰撞，数据的发送就成功了。如果有新帧到来，立即发送\n- 如果有碰撞，那么有 p 的概率在下一个时隙中发送数据，直到数据没有碰撞的发送出去\n\n> 相比较于 TDM 和 FDM，ALOHA 协议同样公正，而且在只有一个节点有数据发送时，它能以全速发送数据。当有大量的节点存在时，节点间会因为碰撞而造成一些时隙被浪费。我们定义一个成功的时隙就是无碰撞的成功发送了数据的时隙，而效率就是成功的时隙占所有时隙的份额。通过计算表明，当有大量的节点有发送大量的数据时，ALOHA 协议的效率大约是 1/e = 37%，有 26% 的时隙发生了碰撞\n\n#### 非时隙 ALOHA 协议\n\n> 时隙 ALOHA 协议中有一个假设：节点之间是同步的。但第一版的 ALOHA 协议是一个非同步协议，即节点可以在任意时间点开始发送数据。去掉节点间的必须同步的假设后，我们可以得到非时隙 ALOHA 协议的效率是 1/(2e) ，比时隙 ALOHA 协议还要小一些\n\n#### 载波侦听多路访问协议\n\n在 ALOHA 协议中，节点决定是否发送数据与其他节点无关，这就导致当其他节点在发送数据时，另一个节点也开始发送数据就必定使得碰撞发生。而如果节点如果能够侦听到另一个节点正在发送数据，那么它决定在另一个节点结束发送数据后才发送自己的数据，这将避免碰撞的发生。这就是 载波侦听 原理\n\n除此之外还有一个重要的原理叫做 碰撞检测（collision detection），即节点在发送数据时同时也在侦听网络，一些发生另一个节点发送的信号与自己发送的信号相互干扰后就立即停止发送\n\n这两个规则被包含在 载波侦听多路访问协议（Carrier Sense Multiple Access, CSMA） 和 具有碰撞检测的 CSMA（CSMA with Collision Detection, CSMA/CD） 协议族中\n\n如果说节点具有载波侦听功能，那么为什么还会发生碰撞呢？这是因为信号在信道中传播的速度是有限的，当一个节点 A 开始传送数据后，另一个节点 B 可能需要过一段时间才能侦听到信号，如果 B 在侦听到信号之前也开始传送数据，那么此时碰撞就发生了\n\n在检测到碰撞后，节点会等待一个随机的时间后再次尝试发送数据。这个随机的时间量选择也是有一个算法的，叫做 二进制指数后退（binary exponential backoff）。即当节点连续发生 n 次碰撞后，它会从 {0, 1, 2, 4, ... , 2^n -1 } 的常数中随机选择一个值 K 。在以太网协议中，等待的时间是 K * 传送 512 比特所需要的时间，作为随机等待的时间。n 能取到的最大值一般是 10\n\n经过一系列复杂的计算，我们可以得到 CSMA/CD 的效率是 1 / (1 + 5 d1/d2) ，其中 d1 是信号在两个节点间传播所需要的最大时间，d2 是传递一个最大长度的以太网帧所需要的时间。当 d1 越小时，传播速率越接近于 1 ，即信号传播速度越快，碰撞越不可能发生\n\n\n### 轮流协议\n\n轮流协议（taking-turns protocol）也有很多种。\n\n第一种轮流协议是 轮询协议（polling protocol）。这个协议要求一个节点被指定为主节点，主节点轮询每个节点，告诉每个节点它能传送的帧的数量。比如主节点告诉节点 1 它能传送的帧的数量，当节点 1 传送完这些帧后，主节点告诉节点 2 能传送的帧的数量，依此类推。这个协议需要轮询每个节点，这就引入了轮询时延，导致效率有所降低。第二个缺点是当主节点出现故障，整个信道都不可用了。802.15 协议和蓝牙协议就使用了轮询协议\n\n第二种轮流协议是 令牌传递协议（token-passing protocol）。这个协议没有主节点，而是存在一个称为 令牌（token） 的特殊帧，令牌只有一个，在每个节点之间以固定的次序传输。如果一个节点有数据需要发送，它会尝试去获取令牌，只有当它拿到令牌后才会开始发送数据。如果节点拿到了令牌却没有数据需要发送，那么它会把令牌传递给下一个节点。下一个节点会根据自己有没有数据需要发送而决定是自己保留令牌还是传给另一个节点。令牌传送协议效率很高且分散，但是也有自己的缺点。如果一个节点发生故障，没有适时交出令牌，那么整个网络将会瘫痪，必须通过某种令牌恢复策略才能从瘫痪中恢复\n\n## 交换局域网\n\n\n> - 主机除了具有英特网 IP 地址外，他们还有另外一种地址，即 MAC 地址。严格来说，是主机的网络适配器具有 MAC 地址。对于有多个接口的路由器，每一个接口都对应了一个 MAC 地址\n> - MAC 地址总长度是 6 字节，因此共有 2^48 个可能的地址，大约是 200 万亿个，数字这么大以至于目前世界上没有两个网卡具有相同的 MAC 地址\n\n\n### 地址解析协议 ARP\n\n因为有网络层地址（IP 地址）和链路层地址（MAC 地址）的存在，就需要在两者之间进行转换，这个转换的协议就是 **地址解析协议（Address Resolution Protocol，ARP）**\n\nARP 实际上与 DNS 协议特别像，即 DNS 将域名解析成 IP 地址，而 ARP 将 IP 地址解析成 MAC 地址。不过 DNS 能解析网络上任意一个位置的主机的域名，而 ARP 只能解析同一个子网下的 IP 地址的 MAC 地址\n\n在一个主机上会有一个叫做 ARP 表 的数据解构，里面保存着子网内的 IP 地址到 MAC 地址的映射，其中的每一个项目的过期时间通常是 20 分钟。当主机需要向一个 IP 地址发送数据时，会现在自己的 ARP 表中搜索这个地址的 MAC 地址。如果表中不存在这个映射关系，那么就需要借助 ARP 协议了。主机回想子网内广播一个 ARP 分组（ARP Packet）。这个分组包含发送方和接收方的 IP 地址和 MAC 地址，ARP 的响应分组和请求分组具有相同的结构\n\n在请求分组中，发送方将分组发向 MAC 地址是 FF-FF-FF-FF-FF-FF 的接受主机，这个地址实际上是广播地址，因此所有的主机在收到这个分组后，都会选择接受它。接受后，主机会检测请求分组中请求解析的 IP 地址是不是自身，如果不是，主机会把这个请求分组丢弃；而如果是，那么主机会构造一个相同的响应分组，不过这个分组不会是一个广播帧，而是发向请求的主机。请求主机收到后也就知道了自己想要的结果\n\nMAC 地址只能在子网内部使用，如果主机需要把数据发向子网以外的主机，那么该如何构造分组呢？实际上，这个分组的 IP 地址是实际接受主机的地址（即子网外的地址），而 MAC 地址是网关路由器的 MAC 地址。因此这个分组会在子网内部被传递给网关，网关收到这个分组后，读取发送的 IP 地址，重新构造一个链路层分组，把其中的 MAC 地址修改成下一个接受这个分组的路由器的 MAC 地址\n\n\n### 以太网\n\n以太网的帧结构\n\n![链路层帧结构](http://media.coderluo.top/计算机网络/jcjmr.png)\n\n- 前同步码 （8 字节）：前同步码的存在是为了让接收方的适配器与发送方的适配器在时钟上进行同步，虽然以太网链路层具有一个确定的速率，但是发送适配器可能相对于这个速率有一定的偏移，因此接受适配器需要一定的时间去确定发送方的速率。前同步码的前 7 个字节都是 10101010 这样的循环，最后一个字节是 10101011，最后的 11 就告诉了接收方重要的数据要来了\n\n- 目的地址（6 字节）：接受适配器的 MAC 地址。接受适配器收到了目的地址与自己的 MAC 地址相同的以太网帧、或者目的地址是广播地址的帧，就会把帧的数据部分传递给网络层，否则丢弃这个帧\n\n- 源地址（6 字节）：即发送方的网络适配器地址\n\n- 类型字段（2 字节）：这个字段指明了这个帧的网络层使用了什么协议，比如 0x8086 是 ARP 分组\n\n- 数据字段（46 ~ 1500 字节）：数据字段承载了 IP 数据报，以太网的最大传输单元 MTU 是 1500 字节，对于超过 1500 字节的 IP 数据报，以太网必须把数据报拆开成两个以太网帧。以太网的最小传输单元是 46 字节，所以对于小于 46 字节的数据，以太网会把数据填充到 46 字节。被填充的数据传送到接收方后，接收方的适配器会把 46 字节的数据交付给网络层，网络层读取 IP 数据报首部中的数据长度字段，并去除填充数据\n\n- CRC：CRC 的目的是让适配器能够检测以太网帧在传输过程中是否发生了错误\n\n以太网提供无连接、不可靠的服务\n\n> **在以前，以太网的链路是总线拓扑结构或者基于集线器的星型拓扑结构，因此是一条广播链路（一个接口收到比特将从其所有接口进行转发，如果同时两个接口收到比特将发生碰撞，生成该帧的结点必须重新传输）。**\n\n但是现在，多数以太网是基于**交换机**的星型拓扑结构，这意味着一条链路上只有首尾两个交换机，交换机不会向一个接口上发送超过一个帧，而且首尾交换机是全双工的，表示两个交换机可以能够同时向链路上发送以太网帧而不会发生碰撞，因此现在没有必要使用 MAC 协议了\n\n## Web 页面请求的里程\n--------------------------\n\nBob 拿着他的笔记本电脑到了图书馆内，连上图书馆的以太网，打开浏览器访问 [www.google.com](http://www.google.com/) 。在这一过程中，他的电脑究竟发出了哪些请求呢？\n\n### DHCP\n\nDHCP 发生在电脑连上了网线与浏览器请求 Web 页面之间。刚插上网线的时候，电脑此时还没有一个 IP 地址，因此必须先获得一个地址，这是通过 DHCP 协议完成的：\n\n1. Bob 的电脑先要构造一个 DHCP 请求报文。这是一个 UDP 报文，目的端口是 67（DHCP 服务端口），源端口是 68（DHCP 客户端口）；目的地址是 255.255.255.255（广播地址），源地址是 0.0.0.0（本机地址）。因为电脑此时还不知道 DHCP 服务端的地址，而且自己也没有地址\n\n2. DHCP 请求报文的 IP 数据报被放入以太网帧中。以太网帧的目的 MAC 地址是 FF:FF:FF:FF:FF:FF，使该帧将被广播到与交换机连接的所有设备（如果顺利也包括DHCP服务器），源 MAC 地址是 Bob 电脑的 MAC 地址（假设是 00:16:D3:23:68:8A）\n\n3. 这个包含DHCP请求的广播以太网帧是第一个由Bob设备发送到以太网交换机的帧，以太网帧被发送到交换机的一个接口上，交换机把这个帧广播到它所有的输出接口上，包括连接到路由器的端口；\n\n4. 运行着 DHCP （应用层，使用UDP协议）服务的路由器在它的一个接口拥有MAC地址 00:22:6B:45:1F:1B 收到了这个以太网帧，分解出 UDP 报文后向上传递到 67 端口的进程上\n\n5. 我们假设 DHCP 服务能够以 CIDR 块 68.85.2.0/24 分配 IP 地址，因此它分配了地址 68.86.2.101 给 Bob 的电脑。DHCP 服务生成一个 DHCP ACK 报文，报文中包含 68.86.2.101 地址、DNS 服务器的 IP 地址（68.87.71.226）、默认网关路由器的 IP 地址（65.85.2.1）、子网块（68.85.2.0/24），这个报文被放入一个 UDP 报文，UDP报文段被放入一个IP数据报中，IP数据报再被放入一个以太网帧中。以太网帧的源 MAC 地址是路由器接收到请求的接口的地址（00:22:6B:45:1F:1B），目的 MAC 地址是 Bob 的电脑的 MAC 地址（00:16:D3:23:68:8A）\n\n6. 以太网帧被路由器发送到交换机上。交换机是自学习的，它知道 Bob 的 DHCP 请求报文是从自己的哪个接口收到的，因此会把这个以太网帧也发送到这个接口上\n\n7. Bob 接收到了 DHCP ACK 的以太网帧，从中抽取IP数据报，在从IP数据报中抽取UDP报文段，再从UDP报文段中抽取DCHP ACK报文，取出了分配的 IP 地址、DNS 服务器地址、默认网关地址、子网块等信息。Bob 的笔记本把所有目的地址是 68.85.2.0/24 之外的报文都发送给默认网关。到了这里，Bob 的电脑就算已经连上互联网了\n\n### DNS 与 ARP\n\n这时 Bob 的电脑已经能连上网了，当他键入 [www.google.com](http://www.google.com/) 时，并不知道这个域名对应的 IP 地址是什么，因此需要借助于 DNS 协议。但是在发送 DNS 请求之前，还需要解决一个问题：Bob 的电脑这时并不知道默认网关的 MAC 地址。在发送 DNS 请求之前，必须先发送 ARP 请求获得网关的 MAC 地址\n\n\n1. Bob 的电脑生成一个目的地址是 65.85.2.1 的 ARP 查询报文，目的 MAC 地址是 FF:FF:FF:FF:FF:FF 。这个以太网帧被发送给交换机后，交换机把这个帧发送给所有的设备，包括网关路由器\n\n2. 默认网关在收到 ARP 查询报文后，发现报文中的目的地址与自己的地址匹配，因此网关准备一个 ARP 回答，在其中包含了自己的 MAC 地址（00:22:6B:45:1F:1B），装入以太网帧中，目的地址是 00:16:D3:23:68:8A，交付给交换机，再由交换机交付给Bob\n\n3. 路由器接受到 ARP 回答报文后，交付给 Bob 的电脑，Bob 的电脑从中得知了网关的 MAC 地址\n\n4. Bob 的电脑此时终于能构造 DNS 报文查询域名的 IP 地址了。它构造的 DNS 报文的目的 IP 地址是 68.87.71.226，目的 MAC 地址是 00:22:6B:45:1F:1B（网关），交换机收到这个帧后把它发送给网关路由器\n\n\n### 开始 DNS 查询\n\n1.  DNS 查询报文发送给了网关，网关根据 IP 数据包的目的地址，就这个报文重新封装，发送给了 DNS 服务器\n2.  DNS 服务器收到了查询报文，在自己的 DNS 数据库中找到与 [www.google.com](http://www.google.com/) 匹配的记录，将这条记录变成 DNS 回答报文，使用 UDP 协议发送给 Bob 的电脑\n3.  Bob 的电脑收到了 DNS 回答报文后，终于知道了 [www.google.com](http://www.google.com/) 的 IP 地址，可以开始发送 HTTP 请求了\n\n\n![](http://media.coderluo.top/计算机网络/my3om.png)\n\n\n![](http://media.coderluo.top/计算机网络/83ugo.png)","slug":"计算机网络/chapter5-链路层","published":1,"updated":"2019-09-28T15:54:35.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck13qknlw000mveo6g8po6xcu","content":"<p>本章接着前一章学习的网络层，更加深入来到下一层数据链路层。</p>\n<h2 id=\"链路层概述\"><a href=\"#链路层概述\" class=\"headerlink\" title=\"链路层概述\"></a>链路层概述</h2><p>首先来一张数据报传输过程的例子，帮助理解数据报是如何从发送端到达目的端的，中间发生了怎样的过程，来看下面这张图：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jvu78.png\" alt=\"公司网络\"></p>\n<p>如上图所示的公司网络中，思考从无线主机向服务器发送一个数据报，该数据报将实际通过6段链路：</p>\n<ol>\n<li>发送主机与WIFI接入点之间的Wifi链路；</li>\n<li>接入点与链路层交换机之间的以太网链路；</li>\n<li>链路层交换机与路由器之间的链路；</li>\n<li>两台路由器之间的链路；</li>\n<li>路由器和服务器链路层交换机之间的链路；</li>\n<li>交换机和服务器之间的以太网链路；</li>\n</ol>\n<p>在通过特定链路时，传输结点将数据报封装在链路层帧中，并将该帧传送到链路中。</p>\n<h3 id=\"链路层提供的服务\"><a href=\"#链路层提供的服务\" class=\"headerlink\" title=\"链路层提供的服务\"></a>链路层提供的服务</h3><ol>\n<li>成帧</li>\n<li>链路接入</li>\n<li>可靠交付，链路层的可靠交付通过是通过确认和重传取得，这里应该联想传输层的TCP协议提供的可靠传输服务。</li>\n<li>差错检测和纠正</li>\n</ol>\n<h3 id=\"链路层在何处实现\"><a href=\"#链路层在何处实现\" class=\"headerlink\" title=\"链路层在何处实现\"></a>链路层在何处实现</h3><p><strong>链路层的主体部分是在网络适配器</strong>中实现的，也就是我们说的网卡，它实现的服务有：成帧、链路接入、差错检测等。</p>\n<h2 id=\"差错校验和纠技术\"><a href=\"#差错校验和纠技术\" class=\"headerlink\" title=\"差错校验和纠技术\"></a>差错校验和纠技术</h2><p>链路层接到上层的应用数据后，加上自己的首部组成链路层数据报，放在链路中进行传播。传播中可能发生错误，因此需要有差错检测机制来发现链路层首部和应用数据的错误。差错检测可能并不能找到所有的错误，因此链路层可能向上层交付一个有差错的数据报，但是这种事情的发生概率比较低</p>\n<p>差错检测常用的 3 种技术分别是：<strong>奇偶校验、检验和方法、循环冗余检测</strong></p>\n<ol>\n<li><strong>奇偶校验</strong> 方法是其中最简单的一种。如果要发送 d 比特的数据，在这些数据的最后附加一个比特，共 d+1 比特，附加的比特使得所有的比特位中的 1 的个数是偶数。这样，当接收方收到数据后，只需要检查 d+1 比特的数据中的 1 的个数是不是偶数，如果不是则必定在传输过程中发生了错误；但是如果是，也并不意味着一定没有发生错误，因为有可能在两个地方发生了比特翻转使得 1 的个数仍为偶数，当然这样的事情发生的概率是比较低的</li>\n</ol>\n<blockquote>\n<p>上面这样的奇偶校验方法是一维奇偶校验，后来还出现了 二维奇偶校验 方法。将所有的数据分为 i 行 j 列，对每一行附加一个比特，对每一列也附加一个比特，这样总共就附加了 i+j+1 比特。每一行和每一列的附加比特都让行和列的数字 1 的数量是偶数。当某一个比特数据发生错误后，我们发现在第 n 行和第 m 列的数字 1 的个数不是偶数，那么发生错误的数据就是 n 行 m 列的数据，这样我们就能把该比特数据翻转到另一个值，我们就纠正了数据错误，这种能力叫做 前向纠错。二维奇偶校验同样能发现多于一个比特的数据错误，但这种情况下就不能纠正错误了</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>英特网检验和（Internet checksum）</strong> 是另一种差错监测方法。从它的英文名称就可以看出，它是把二进制数据当做整数进行求和来检测差错的。比如，将数据按 16 比特分为多个整数，将所有整数求和，把和取反码就得到了检验和。把检验和附加在报文中。接收方收到数据和检验和后，同样按照 16 比特的分组把所有整数求和并取反码，如果得到的数全是 1 说明数据传输没有发生错误；而如果有一位是 0 就说明错误发生了</li>\n</ol>\n<blockquote>\n<p>之前学习运输层时我们知道运输层的协议多是用检验和法，而链路层协议通常会用下面介绍的 CRC 方法。检验和方法相对于 CRC 来说偏弱一些，而因为运输层协议通常是由软件实现，因此运输层选择了偏弱但是计算更加快速的检验和方法。而链路层因为更加贴近底层硬件，而硬件专门对 CRC 提供支持，因此链路层选用了更强的 CRC</p>\n</blockquote>\n<ol start=\"3\">\n<li><strong>循环冗余检测（Cyclic redundancy Check, CRC）</strong> 是链路层使用的差错检测技术。这个方法国语复杂，我也并没有看懂，这里就不详细记录了</li>\n</ol>\n<h2 id=\"多路访问链路和协议\"><a href=\"#多路访问链路和协议\" class=\"headerlink\" title=\"多路访问链路和协议\"></a>多路访问链路和协议</h2><blockquote>\n<p>多路访问问题 研究如何协调多个发送和接受节点对同一个共享广播信道的访问。当两个或多个节点在信道上同时发送数据时，他们的信号会彼此 <strong>碰撞（collide）</strong>，发生碰撞后任何节点都不能从信道上接受数据。因此多路访问协议要决定谁在什么时候有发送数据的权力。目前有很多多路访问协议，可以分为以下三种:</p>\n</blockquote>\n<ol>\n<li><strong>信道划分协议</strong></li>\n<li><strong>随机接入协议</strong></li>\n<li><strong>轮流协议</strong></li>\n</ol>\n<p>对于一个速率是 R bps 的广播信道，多路访问协议最好有下面的特性:</p>\n<ul>\n<li>当仅有一个节点在发送数据时，节点应有 R bps 的吞吐量</li>\n<li>当有 M 个节点在发送数据时，每个节点应有 R/M bps 的吞吐量。不一定要求每个节点在每个时间点都有 R/M bps 的吞吐量，而是在一个时间段内有这要的平均速率。这也要求每个节点都能平等的使用信道</li>\n<li>协议不会因为单个节点的故障而崩溃</li>\n<li>协议应是简单的，实现不昂贵</li>\n</ul>\n<h3 id=\"信道划分协议\"><a href=\"#信道划分协议\" class=\"headerlink\" title=\"信道划分协议\"></a>信道划分协议</h3><p>信道划分协议有 3 种：</p>\n<ol>\n<li>时分多路复用（TDM）</li>\n<li>频分多路复用（FDM） </li>\n<li>码分多址（CDMA）</li>\n</ol>\n<ul>\n<li><p>时分多路复用是把时间划分 时间帧（time frame），而一个时间帧划分为为多个 时隙（slot）。时隙会被分配给各个节点，每个节点有数据要发送时，只能等待直到自己的时隙到来才能发送。TDM 非常公平，但是当只有一个节点要发送数据时，这个节点的吞吐量被限制在 R/M bps，不能到达信道的全速</p>\n</li>\n<li><p>频分多路复用把信道划分为不同的频段，频道的速率是 R/M bps，频段被分配给各个节点，各个节点可以同时发送数据而不会碰撞。FDM 与 TDM 一样公平但是当只有一个节点时不能全速发送</p>\n</li>\n<li><p>码分多址技术给每个节点分配不同的编码，精心选择编码可以使得当多个节点同时发送数据而不发生干扰，接收方能正确接收发送方编码的数据比特（<strong>假设接收方知道发送方的编码</strong>），而不再乎其他发送方的干扰传输。</p>\n</li>\n</ul>\n<h3 id=\"随机接入协议\"><a href=\"#随机接入协议\" class=\"headerlink\" title=\"随机接入协议\"></a>随机接入协议</h3><p>随机接入协议中，每个节点总是以最大的速率发送数据，当有碰撞发生时，节点等待一个随机的时间后再次尝试发送数据。随机接入协议中比较常见的有 <strong>ALOHA 协议</strong> 和 <strong>载波侦听多路访问协议（CSMA）</strong></p>\n<h4 id=\"时隙-ALOHA\"><a href=\"#时隙-ALOHA\" class=\"headerlink\" title=\"时隙 ALOHA\"></a>时隙 ALOHA</h4><p>对时隙 ALOHA，我们做出下面的假设：</p>\n<ul>\n<li>所有帧由 L 比特组成</li>\n<li>时间被划分为 L/R 的时隙，正好每一个时隙发送一帧</li>\n<li>节点只在时隙的开始发送帧</li>\n<li>节点是同步的，每个节点都知道时隙何时开始</li>\n<li>如果在一个时隙中有两个或多个帧发生碰撞，节点会在时隙结束之前得知碰撞事件</li>\n</ul>\n<p>对于 ALOHA 协议中的操作如下：</p>\n<ul>\n<li>当节点有数据要发送时，等到下一个时隙开始立即传送数据</li>\n<li>如果没有碰撞，数据的发送就成功了。如果有新帧到来，立即发送</li>\n<li>如果有碰撞，那么有 p 的概率在下一个时隙中发送数据，直到数据没有碰撞的发送出去</li>\n</ul>\n<blockquote>\n<p>相比较于 TDM 和 FDM，ALOHA 协议同样公正，而且在只有一个节点有数据发送时，它能以全速发送数据。当有大量的节点存在时，节点间会因为碰撞而造成一些时隙被浪费。我们定义一个成功的时隙就是无碰撞的成功发送了数据的时隙，而效率就是成功的时隙占所有时隙的份额。通过计算表明，当有大量的节点有发送大量的数据时，ALOHA 协议的效率大约是 1/e = 37%，有 26% 的时隙发生了碰撞</p>\n</blockquote>\n<h4 id=\"非时隙-ALOHA-协议\"><a href=\"#非时隙-ALOHA-协议\" class=\"headerlink\" title=\"非时隙 ALOHA 协议\"></a>非时隙 ALOHA 协议</h4><blockquote>\n<p>时隙 ALOHA 协议中有一个假设：节点之间是同步的。但第一版的 ALOHA 协议是一个非同步协议，即节点可以在任意时间点开始发送数据。去掉节点间的必须同步的假设后，我们可以得到非时隙 ALOHA 协议的效率是 1/(2e) ，比时隙 ALOHA 协议还要小一些</p>\n</blockquote>\n<h4 id=\"载波侦听多路访问协议\"><a href=\"#载波侦听多路访问协议\" class=\"headerlink\" title=\"载波侦听多路访问协议\"></a>载波侦听多路访问协议</h4><p>在 ALOHA 协议中，节点决定是否发送数据与其他节点无关，这就导致当其他节点在发送数据时，另一个节点也开始发送数据就必定使得碰撞发生。而如果节点如果能够侦听到另一个节点正在发送数据，那么它决定在另一个节点结束发送数据后才发送自己的数据，这将避免碰撞的发生。这就是 载波侦听 原理</p>\n<p>除此之外还有一个重要的原理叫做 碰撞检测（collision detection），即节点在发送数据时同时也在侦听网络，一些发生另一个节点发送的信号与自己发送的信号相互干扰后就立即停止发送</p>\n<p>这两个规则被包含在 载波侦听多路访问协议（Carrier Sense Multiple Access, CSMA） 和 具有碰撞检测的 CSMA（CSMA with Collision Detection, CSMA/CD） 协议族中</p>\n<p>如果说节点具有载波侦听功能，那么为什么还会发生碰撞呢？这是因为信号在信道中传播的速度是有限的，当一个节点 A 开始传送数据后，另一个节点 B 可能需要过一段时间才能侦听到信号，如果 B 在侦听到信号之前也开始传送数据，那么此时碰撞就发生了</p>\n<p>在检测到碰撞后，节点会等待一个随机的时间后再次尝试发送数据。这个随机的时间量选择也是有一个算法的，叫做 二进制指数后退（binary exponential backoff）。即当节点连续发生 n 次碰撞后，它会从 {0, 1, 2, 4, … , 2^n -1 } 的常数中随机选择一个值 K 。在以太网协议中，等待的时间是 K * 传送 512 比特所需要的时间，作为随机等待的时间。n 能取到的最大值一般是 10</p>\n<p>经过一系列复杂的计算，我们可以得到 CSMA/CD 的效率是 1 / (1 + 5 d1/d2) ，其中 d1 是信号在两个节点间传播所需要的最大时间，d2 是传递一个最大长度的以太网帧所需要的时间。当 d1 越小时，传播速率越接近于 1 ，即信号传播速度越快，碰撞越不可能发生</p>\n<h3 id=\"轮流协议\"><a href=\"#轮流协议\" class=\"headerlink\" title=\"轮流协议\"></a>轮流协议</h3><p>轮流协议（taking-turns protocol）也有很多种。</p>\n<p>第一种轮流协议是 轮询协议（polling protocol）。这个协议要求一个节点被指定为主节点，主节点轮询每个节点，告诉每个节点它能传送的帧的数量。比如主节点告诉节点 1 它能传送的帧的数量，当节点 1 传送完这些帧后，主节点告诉节点 2 能传送的帧的数量，依此类推。这个协议需要轮询每个节点，这就引入了轮询时延，导致效率有所降低。第二个缺点是当主节点出现故障，整个信道都不可用了。802.15 协议和蓝牙协议就使用了轮询协议</p>\n<p>第二种轮流协议是 令牌传递协议（token-passing protocol）。这个协议没有主节点，而是存在一个称为 令牌（token） 的特殊帧，令牌只有一个，在每个节点之间以固定的次序传输。如果一个节点有数据需要发送，它会尝试去获取令牌，只有当它拿到令牌后才会开始发送数据。如果节点拿到了令牌却没有数据需要发送，那么它会把令牌传递给下一个节点。下一个节点会根据自己有没有数据需要发送而决定是自己保留令牌还是传给另一个节点。令牌传送协议效率很高且分散，但是也有自己的缺点。如果一个节点发生故障，没有适时交出令牌，那么整个网络将会瘫痪，必须通过某种令牌恢复策略才能从瘫痪中恢复</p>\n<h2 id=\"交换局域网\"><a href=\"#交换局域网\" class=\"headerlink\" title=\"交换局域网\"></a>交换局域网</h2><blockquote>\n<ul>\n<li>主机除了具有英特网 IP 地址外，他们还有另外一种地址，即 MAC 地址。严格来说，是主机的网络适配器具有 MAC 地址。对于有多个接口的路由器，每一个接口都对应了一个 MAC 地址</li>\n<li>MAC 地址总长度是 6 字节，因此共有 2^48 个可能的地址，大约是 200 万亿个，数字这么大以至于目前世界上没有两个网卡具有相同的 MAC 地址</li>\n</ul>\n</blockquote>\n<h3 id=\"地址解析协议-ARP\"><a href=\"#地址解析协议-ARP\" class=\"headerlink\" title=\"地址解析协议 ARP\"></a>地址解析协议 ARP</h3><p>因为有网络层地址（IP 地址）和链路层地址（MAC 地址）的存在，就需要在两者之间进行转换，这个转换的协议就是 <strong>地址解析协议（Address Resolution Protocol，ARP）</strong></p>\n<p>ARP 实际上与 DNS 协议特别像，即 DNS 将域名解析成 IP 地址，而 ARP 将 IP 地址解析成 MAC 地址。不过 DNS 能解析网络上任意一个位置的主机的域名，而 ARP 只能解析同一个子网下的 IP 地址的 MAC 地址</p>\n<p>在一个主机上会有一个叫做 ARP 表 的数据解构，里面保存着子网内的 IP 地址到 MAC 地址的映射，其中的每一个项目的过期时间通常是 20 分钟。当主机需要向一个 IP 地址发送数据时，会现在自己的 ARP 表中搜索这个地址的 MAC 地址。如果表中不存在这个映射关系，那么就需要借助 ARP 协议了。主机回想子网内广播一个 ARP 分组（ARP Packet）。这个分组包含发送方和接收方的 IP 地址和 MAC 地址，ARP 的响应分组和请求分组具有相同的结构</p>\n<p>在请求分组中，发送方将分组发向 MAC 地址是 FF-FF-FF-FF-FF-FF 的接受主机，这个地址实际上是广播地址，因此所有的主机在收到这个分组后，都会选择接受它。接受后，主机会检测请求分组中请求解析的 IP 地址是不是自身，如果不是，主机会把这个请求分组丢弃；而如果是，那么主机会构造一个相同的响应分组，不过这个分组不会是一个广播帧，而是发向请求的主机。请求主机收到后也就知道了自己想要的结果</p>\n<p>MAC 地址只能在子网内部使用，如果主机需要把数据发向子网以外的主机，那么该如何构造分组呢？实际上，这个分组的 IP 地址是实际接受主机的地址（即子网外的地址），而 MAC 地址是网关路由器的 MAC 地址。因此这个分组会在子网内部被传递给网关，网关收到这个分组后，读取发送的 IP 地址，重新构造一个链路层分组，把其中的 MAC 地址修改成下一个接受这个分组的路由器的 MAC 地址</p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><p>以太网的帧结构</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jcjmr.png\" alt=\"链路层帧结构\"></p>\n<ul>\n<li><p>前同步码 （8 字节）：前同步码的存在是为了让接收方的适配器与发送方的适配器在时钟上进行同步，虽然以太网链路层具有一个确定的速率，但是发送适配器可能相对于这个速率有一定的偏移，因此接受适配器需要一定的时间去确定发送方的速率。前同步码的前 7 个字节都是 10101010 这样的循环，最后一个字节是 10101011，最后的 11 就告诉了接收方重要的数据要来了</p>\n</li>\n<li><p>目的地址（6 字节）：接受适配器的 MAC 地址。接受适配器收到了目的地址与自己的 MAC 地址相同的以太网帧、或者目的地址是广播地址的帧，就会把帧的数据部分传递给网络层，否则丢弃这个帧</p>\n</li>\n<li><p>源地址（6 字节）：即发送方的网络适配器地址</p>\n</li>\n<li><p>类型字段（2 字节）：这个字段指明了这个帧的网络层使用了什么协议，比如 0x8086 是 ARP 分组</p>\n</li>\n<li><p>数据字段（46 ~ 1500 字节）：数据字段承载了 IP 数据报，以太网的最大传输单元 MTU 是 1500 字节，对于超过 1500 字节的 IP 数据报，以太网必须把数据报拆开成两个以太网帧。以太网的最小传输单元是 46 字节，所以对于小于 46 字节的数据，以太网会把数据填充到 46 字节。被填充的数据传送到接收方后，接收方的适配器会把 46 字节的数据交付给网络层，网络层读取 IP 数据报首部中的数据长度字段，并去除填充数据</p>\n</li>\n<li><p>CRC：CRC 的目的是让适配器能够检测以太网帧在传输过程中是否发生了错误</p>\n</li>\n</ul>\n<p>以太网提供无连接、不可靠的服务</p>\n<blockquote>\n<p><strong>在以前，以太网的链路是总线拓扑结构或者基于集线器的星型拓扑结构，因此是一条广播链路（一个接口收到比特将从其所有接口进行转发，如果同时两个接口收到比特将发生碰撞，生成该帧的结点必须重新传输）。</strong></p>\n</blockquote>\n<p>但是现在，多数以太网是基于<strong>交换机</strong>的星型拓扑结构，这意味着一条链路上只有首尾两个交换机，交换机不会向一个接口上发送超过一个帧，而且首尾交换机是全双工的，表示两个交换机可以能够同时向链路上发送以太网帧而不会发生碰撞，因此现在没有必要使用 MAC 协议了</p>\n<h2 id=\"Web-页面请求的里程\"><a href=\"#Web-页面请求的里程\" class=\"headerlink\" title=\"Web 页面请求的里程\"></a>Web 页面请求的里程</h2><hr>\n<p>Bob 拿着他的笔记本电脑到了图书馆内，连上图书馆的以太网，打开浏览器访问 <a href=\"http://www.google.com/\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 。在这一过程中，他的电脑究竟发出了哪些请求呢？</p>\n<h3 id=\"DHCP\"><a href=\"#DHCP\" class=\"headerlink\" title=\"DHCP\"></a>DHCP</h3><p>DHCP 发生在电脑连上了网线与浏览器请求 Web 页面之间。刚插上网线的时候，电脑此时还没有一个 IP 地址，因此必须先获得一个地址，这是通过 DHCP 协议完成的：</p>\n<ol>\n<li><p>Bob 的电脑先要构造一个 DHCP 请求报文。这是一个 UDP 报文，目的端口是 67（DHCP 服务端口），源端口是 68（DHCP 客户端口）；目的地址是 255.255.255.255（广播地址），源地址是 0.0.0.0（本机地址）。因为电脑此时还不知道 DHCP 服务端的地址，而且自己也没有地址</p>\n</li>\n<li><p>DHCP 请求报文的 IP 数据报被放入以太网帧中。以太网帧的目的 MAC 地址是 FF:FF:FF:FF:FF:FF，使该帧将被广播到与交换机连接的所有设备（如果顺利也包括DHCP服务器），源 MAC 地址是 Bob 电脑的 MAC 地址（假设是 00:16:D3:23:68:8A）</p>\n</li>\n<li><p>这个包含DHCP请求的广播以太网帧是第一个由Bob设备发送到以太网交换机的帧，以太网帧被发送到交换机的一个接口上，交换机把这个帧广播到它所有的输出接口上，包括连接到路由器的端口；</p>\n</li>\n<li><p>运行着 DHCP （应用层，使用UDP协议）服务的路由器在它的一个接口拥有MAC地址 00:22:6B:45:1F:1B 收到了这个以太网帧，分解出 UDP 报文后向上传递到 67 端口的进程上</p>\n</li>\n<li><p>我们假设 DHCP 服务能够以 CIDR 块 68.85.2.0/24 分配 IP 地址，因此它分配了地址 68.86.2.101 给 Bob 的电脑。DHCP 服务生成一个 DHCP ACK 报文，报文中包含 68.86.2.101 地址、DNS 服务器的 IP 地址（68.87.71.226）、默认网关路由器的 IP 地址（65.85.2.1）、子网块（68.85.2.0/24），这个报文被放入一个 UDP 报文，UDP报文段被放入一个IP数据报中，IP数据报再被放入一个以太网帧中。以太网帧的源 MAC 地址是路由器接收到请求的接口的地址（00:22:6B:45:1F:1B），目的 MAC 地址是 Bob 的电脑的 MAC 地址（00:16:D3:23:68:8A）</p>\n</li>\n<li><p>以太网帧被路由器发送到交换机上。交换机是自学习的，它知道 Bob 的 DHCP 请求报文是从自己的哪个接口收到的，因此会把这个以太网帧也发送到这个接口上</p>\n</li>\n<li><p>Bob 接收到了 DHCP ACK 的以太网帧，从中抽取IP数据报，在从IP数据报中抽取UDP报文段，再从UDP报文段中抽取DCHP ACK报文，取出了分配的 IP 地址、DNS 服务器地址、默认网关地址、子网块等信息。Bob 的笔记本把所有目的地址是 68.85.2.0/24 之外的报文都发送给默认网关。到了这里，Bob 的电脑就算已经连上互联网了</p>\n</li>\n</ol>\n<h3 id=\"DNS-与-ARP\"><a href=\"#DNS-与-ARP\" class=\"headerlink\" title=\"DNS 与 ARP\"></a>DNS 与 ARP</h3><p>这时 Bob 的电脑已经能连上网了，当他键入 <a href=\"http://www.google.com/\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 时，并不知道这个域名对应的 IP 地址是什么，因此需要借助于 DNS 协议。但是在发送 DNS 请求之前，还需要解决一个问题：Bob 的电脑这时并不知道默认网关的 MAC 地址。在发送 DNS 请求之前，必须先发送 ARP 请求获得网关的 MAC 地址</p>\n<ol>\n<li><p>Bob 的电脑生成一个目的地址是 65.85.2.1 的 ARP 查询报文，目的 MAC 地址是 FF:FF:FF:FF:FF:FF 。这个以太网帧被发送给交换机后，交换机把这个帧发送给所有的设备，包括网关路由器</p>\n</li>\n<li><p>默认网关在收到 ARP 查询报文后，发现报文中的目的地址与自己的地址匹配，因此网关准备一个 ARP 回答，在其中包含了自己的 MAC 地址（00:22:6B:45:1F:1B），装入以太网帧中，目的地址是 00:16:D3:23:68:8A，交付给交换机，再由交换机交付给Bob</p>\n</li>\n<li><p>路由器接受到 ARP 回答报文后，交付给 Bob 的电脑，Bob 的电脑从中得知了网关的 MAC 地址</p>\n</li>\n<li><p>Bob 的电脑此时终于能构造 DNS 报文查询域名的 IP 地址了。它构造的 DNS 报文的目的 IP 地址是 68.87.71.226，目的 MAC 地址是 00:22:6B:45:1F:1B（网关），交换机收到这个帧后把它发送给网关路由器</p>\n</li>\n</ol>\n<h3 id=\"开始-DNS-查询\"><a href=\"#开始-DNS-查询\" class=\"headerlink\" title=\"开始 DNS 查询\"></a>开始 DNS 查询</h3><ol>\n<li>DNS 查询报文发送给了网关，网关根据 IP 数据包的目的地址，就这个报文重新封装，发送给了 DNS 服务器</li>\n<li>DNS 服务器收到了查询报文，在自己的 DNS 数据库中找到与 <a href=\"http://www.google.com/\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 匹配的记录，将这条记录变成 DNS 回答报文，使用 UDP 协议发送给 Bob 的电脑</li>\n<li>Bob 的电脑收到了 DNS 回答报文后，终于知道了 <a href=\"http://www.google.com/\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 的 IP 地址，可以开始发送 HTTP 请求了</li>\n</ol>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/my3om.png\" alt=\"\"></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/83ugo.png\" alt=\"\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>本章接着前一章学习的网络层，更加深入来到下一层数据链路层。</p>\n<h2 id=\"链路层概述\"><a href=\"#链路层概述\" class=\"headerlink\" title=\"链路层概述\"></a>链路层概述</h2><p>首先来一张数据报传输过程的例子，帮助理解数据报是如何从发送端到达目的端的，中间发生了怎样的过程，来看下面这张图：</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jvu78.png\" alt=\"公司网络\"></p>\n<p>如上图所示的公司网络中，思考从无线主机向服务器发送一个数据报，该数据报将实际通过6段链路：</p>\n<ol>\n<li>发送主机与WIFI接入点之间的Wifi链路；</li>\n<li>接入点与链路层交换机之间的以太网链路；</li>\n<li>链路层交换机与路由器之间的链路；</li>\n<li>两台路由器之间的链路；</li>\n<li>路由器和服务器链路层交换机之间的链路；</li>\n<li>交换机和服务器之间的以太网链路；</li>\n</ol>\n<p>在通过特定链路时，传输结点将数据报封装在链路层帧中，并将该帧传送到链路中。</p>\n<h3 id=\"链路层提供的服务\"><a href=\"#链路层提供的服务\" class=\"headerlink\" title=\"链路层提供的服务\"></a>链路层提供的服务</h3><ol>\n<li>成帧</li>\n<li>链路接入</li>\n<li>可靠交付，链路层的可靠交付通过是通过确认和重传取得，这里应该联想传输层的TCP协议提供的可靠传输服务。</li>\n<li>差错检测和纠正</li>\n</ol>\n<h3 id=\"链路层在何处实现\"><a href=\"#链路层在何处实现\" class=\"headerlink\" title=\"链路层在何处实现\"></a>链路层在何处实现</h3><p><strong>链路层的主体部分是在网络适配器</strong>中实现的，也就是我们说的网卡，它实现的服务有：成帧、链路接入、差错检测等。</p>\n<h2 id=\"差错校验和纠技术\"><a href=\"#差错校验和纠技术\" class=\"headerlink\" title=\"差错校验和纠技术\"></a>差错校验和纠技术</h2><p>链路层接到上层的应用数据后，加上自己的首部组成链路层数据报，放在链路中进行传播。传播中可能发生错误，因此需要有差错检测机制来发现链路层首部和应用数据的错误。差错检测可能并不能找到所有的错误，因此链路层可能向上层交付一个有差错的数据报，但是这种事情的发生概率比较低</p>\n<p>差错检测常用的 3 种技术分别是：<strong>奇偶校验、检验和方法、循环冗余检测</strong></p>\n<ol>\n<li><strong>奇偶校验</strong> 方法是其中最简单的一种。如果要发送 d 比特的数据，在这些数据的最后附加一个比特，共 d+1 比特，附加的比特使得所有的比特位中的 1 的个数是偶数。这样，当接收方收到数据后，只需要检查 d+1 比特的数据中的 1 的个数是不是偶数，如果不是则必定在传输过程中发生了错误；但是如果是，也并不意味着一定没有发生错误，因为有可能在两个地方发生了比特翻转使得 1 的个数仍为偶数，当然这样的事情发生的概率是比较低的</li>\n</ol>\n<blockquote>\n<p>上面这样的奇偶校验方法是一维奇偶校验，后来还出现了 二维奇偶校验 方法。将所有的数据分为 i 行 j 列，对每一行附加一个比特，对每一列也附加一个比特，这样总共就附加了 i+j+1 比特。每一行和每一列的附加比特都让行和列的数字 1 的数量是偶数。当某一个比特数据发生错误后，我们发现在第 n 行和第 m 列的数字 1 的个数不是偶数，那么发生错误的数据就是 n 行 m 列的数据，这样我们就能把该比特数据翻转到另一个值，我们就纠正了数据错误，这种能力叫做 前向纠错。二维奇偶校验同样能发现多于一个比特的数据错误，但这种情况下就不能纠正错误了</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>英特网检验和（Internet checksum）</strong> 是另一种差错监测方法。从它的英文名称就可以看出，它是把二进制数据当做整数进行求和来检测差错的。比如，将数据按 16 比特分为多个整数，将所有整数求和，把和取反码就得到了检验和。把检验和附加在报文中。接收方收到数据和检验和后，同样按照 16 比特的分组把所有整数求和并取反码，如果得到的数全是 1 说明数据传输没有发生错误；而如果有一位是 0 就说明错误发生了</li>\n</ol>\n<blockquote>\n<p>之前学习运输层时我们知道运输层的协议多是用检验和法，而链路层协议通常会用下面介绍的 CRC 方法。检验和方法相对于 CRC 来说偏弱一些，而因为运输层协议通常是由软件实现，因此运输层选择了偏弱但是计算更加快速的检验和方法。而链路层因为更加贴近底层硬件，而硬件专门对 CRC 提供支持，因此链路层选用了更强的 CRC</p>\n</blockquote>\n<ol start=\"3\">\n<li><strong>循环冗余检测（Cyclic redundancy Check, CRC）</strong> 是链路层使用的差错检测技术。这个方法国语复杂，我也并没有看懂，这里就不详细记录了</li>\n</ol>\n<h2 id=\"多路访问链路和协议\"><a href=\"#多路访问链路和协议\" class=\"headerlink\" title=\"多路访问链路和协议\"></a>多路访问链路和协议</h2><blockquote>\n<p>多路访问问题 研究如何协调多个发送和接受节点对同一个共享广播信道的访问。当两个或多个节点在信道上同时发送数据时，他们的信号会彼此 <strong>碰撞（collide）</strong>，发生碰撞后任何节点都不能从信道上接受数据。因此多路访问协议要决定谁在什么时候有发送数据的权力。目前有很多多路访问协议，可以分为以下三种:</p>\n</blockquote>\n<ol>\n<li><strong>信道划分协议</strong></li>\n<li><strong>随机接入协议</strong></li>\n<li><strong>轮流协议</strong></li>\n</ol>\n<p>对于一个速率是 R bps 的广播信道，多路访问协议最好有下面的特性:</p>\n<ul>\n<li>当仅有一个节点在发送数据时，节点应有 R bps 的吞吐量</li>\n<li>当有 M 个节点在发送数据时，每个节点应有 R/M bps 的吞吐量。不一定要求每个节点在每个时间点都有 R/M bps 的吞吐量，而是在一个时间段内有这要的平均速率。这也要求每个节点都能平等的使用信道</li>\n<li>协议不会因为单个节点的故障而崩溃</li>\n<li>协议应是简单的，实现不昂贵</li>\n</ul>\n<h3 id=\"信道划分协议\"><a href=\"#信道划分协议\" class=\"headerlink\" title=\"信道划分协议\"></a>信道划分协议</h3><p>信道划分协议有 3 种：</p>\n<ol>\n<li>时分多路复用（TDM）</li>\n<li>频分多路复用（FDM） </li>\n<li>码分多址（CDMA）</li>\n</ol>\n<ul>\n<li><p>时分多路复用是把时间划分 时间帧（time frame），而一个时间帧划分为为多个 时隙（slot）。时隙会被分配给各个节点，每个节点有数据要发送时，只能等待直到自己的时隙到来才能发送。TDM 非常公平，但是当只有一个节点要发送数据时，这个节点的吞吐量被限制在 R/M bps，不能到达信道的全速</p>\n</li>\n<li><p>频分多路复用把信道划分为不同的频段，频道的速率是 R/M bps，频段被分配给各个节点，各个节点可以同时发送数据而不会碰撞。FDM 与 TDM 一样公平但是当只有一个节点时不能全速发送</p>\n</li>\n<li><p>码分多址技术给每个节点分配不同的编码，精心选择编码可以使得当多个节点同时发送数据而不发生干扰，接收方能正确接收发送方编码的数据比特（<strong>假设接收方知道发送方的编码</strong>），而不再乎其他发送方的干扰传输。</p>\n</li>\n</ul>\n<h3 id=\"随机接入协议\"><a href=\"#随机接入协议\" class=\"headerlink\" title=\"随机接入协议\"></a>随机接入协议</h3><p>随机接入协议中，每个节点总是以最大的速率发送数据，当有碰撞发生时，节点等待一个随机的时间后再次尝试发送数据。随机接入协议中比较常见的有 <strong>ALOHA 协议</strong> 和 <strong>载波侦听多路访问协议（CSMA）</strong></p>\n<h4 id=\"时隙-ALOHA\"><a href=\"#时隙-ALOHA\" class=\"headerlink\" title=\"时隙 ALOHA\"></a>时隙 ALOHA</h4><p>对时隙 ALOHA，我们做出下面的假设：</p>\n<ul>\n<li>所有帧由 L 比特组成</li>\n<li>时间被划分为 L/R 的时隙，正好每一个时隙发送一帧</li>\n<li>节点只在时隙的开始发送帧</li>\n<li>节点是同步的，每个节点都知道时隙何时开始</li>\n<li>如果在一个时隙中有两个或多个帧发生碰撞，节点会在时隙结束之前得知碰撞事件</li>\n</ul>\n<p>对于 ALOHA 协议中的操作如下：</p>\n<ul>\n<li>当节点有数据要发送时，等到下一个时隙开始立即传送数据</li>\n<li>如果没有碰撞，数据的发送就成功了。如果有新帧到来，立即发送</li>\n<li>如果有碰撞，那么有 p 的概率在下一个时隙中发送数据，直到数据没有碰撞的发送出去</li>\n</ul>\n<blockquote>\n<p>相比较于 TDM 和 FDM，ALOHA 协议同样公正，而且在只有一个节点有数据发送时，它能以全速发送数据。当有大量的节点存在时，节点间会因为碰撞而造成一些时隙被浪费。我们定义一个成功的时隙就是无碰撞的成功发送了数据的时隙，而效率就是成功的时隙占所有时隙的份额。通过计算表明，当有大量的节点有发送大量的数据时，ALOHA 协议的效率大约是 1/e = 37%，有 26% 的时隙发生了碰撞</p>\n</blockquote>\n<h4 id=\"非时隙-ALOHA-协议\"><a href=\"#非时隙-ALOHA-协议\" class=\"headerlink\" title=\"非时隙 ALOHA 协议\"></a>非时隙 ALOHA 协议</h4><blockquote>\n<p>时隙 ALOHA 协议中有一个假设：节点之间是同步的。但第一版的 ALOHA 协议是一个非同步协议，即节点可以在任意时间点开始发送数据。去掉节点间的必须同步的假设后，我们可以得到非时隙 ALOHA 协议的效率是 1/(2e) ，比时隙 ALOHA 协议还要小一些</p>\n</blockquote>\n<h4 id=\"载波侦听多路访问协议\"><a href=\"#载波侦听多路访问协议\" class=\"headerlink\" title=\"载波侦听多路访问协议\"></a>载波侦听多路访问协议</h4><p>在 ALOHA 协议中，节点决定是否发送数据与其他节点无关，这就导致当其他节点在发送数据时，另一个节点也开始发送数据就必定使得碰撞发生。而如果节点如果能够侦听到另一个节点正在发送数据，那么它决定在另一个节点结束发送数据后才发送自己的数据，这将避免碰撞的发生。这就是 载波侦听 原理</p>\n<p>除此之外还有一个重要的原理叫做 碰撞检测（collision detection），即节点在发送数据时同时也在侦听网络，一些发生另一个节点发送的信号与自己发送的信号相互干扰后就立即停止发送</p>\n<p>这两个规则被包含在 载波侦听多路访问协议（Carrier Sense Multiple Access, CSMA） 和 具有碰撞检测的 CSMA（CSMA with Collision Detection, CSMA/CD） 协议族中</p>\n<p>如果说节点具有载波侦听功能，那么为什么还会发生碰撞呢？这是因为信号在信道中传播的速度是有限的，当一个节点 A 开始传送数据后，另一个节点 B 可能需要过一段时间才能侦听到信号，如果 B 在侦听到信号之前也开始传送数据，那么此时碰撞就发生了</p>\n<p>在检测到碰撞后，节点会等待一个随机的时间后再次尝试发送数据。这个随机的时间量选择也是有一个算法的，叫做 二进制指数后退（binary exponential backoff）。即当节点连续发生 n 次碰撞后，它会从 {0, 1, 2, 4, … , 2^n -1 } 的常数中随机选择一个值 K 。在以太网协议中，等待的时间是 K * 传送 512 比特所需要的时间，作为随机等待的时间。n 能取到的最大值一般是 10</p>\n<p>经过一系列复杂的计算，我们可以得到 CSMA/CD 的效率是 1 / (1 + 5 d1/d2) ，其中 d1 是信号在两个节点间传播所需要的最大时间，d2 是传递一个最大长度的以太网帧所需要的时间。当 d1 越小时，传播速率越接近于 1 ，即信号传播速度越快，碰撞越不可能发生</p>\n<h3 id=\"轮流协议\"><a href=\"#轮流协议\" class=\"headerlink\" title=\"轮流协议\"></a>轮流协议</h3><p>轮流协议（taking-turns protocol）也有很多种。</p>\n<p>第一种轮流协议是 轮询协议（polling protocol）。这个协议要求一个节点被指定为主节点，主节点轮询每个节点，告诉每个节点它能传送的帧的数量。比如主节点告诉节点 1 它能传送的帧的数量，当节点 1 传送完这些帧后，主节点告诉节点 2 能传送的帧的数量，依此类推。这个协议需要轮询每个节点，这就引入了轮询时延，导致效率有所降低。第二个缺点是当主节点出现故障，整个信道都不可用了。802.15 协议和蓝牙协议就使用了轮询协议</p>\n<p>第二种轮流协议是 令牌传递协议（token-passing protocol）。这个协议没有主节点，而是存在一个称为 令牌（token） 的特殊帧，令牌只有一个，在每个节点之间以固定的次序传输。如果一个节点有数据需要发送，它会尝试去获取令牌，只有当它拿到令牌后才会开始发送数据。如果节点拿到了令牌却没有数据需要发送，那么它会把令牌传递给下一个节点。下一个节点会根据自己有没有数据需要发送而决定是自己保留令牌还是传给另一个节点。令牌传送协议效率很高且分散，但是也有自己的缺点。如果一个节点发生故障，没有适时交出令牌，那么整个网络将会瘫痪，必须通过某种令牌恢复策略才能从瘫痪中恢复</p>\n<h2 id=\"交换局域网\"><a href=\"#交换局域网\" class=\"headerlink\" title=\"交换局域网\"></a>交换局域网</h2><blockquote>\n<ul>\n<li>主机除了具有英特网 IP 地址外，他们还有另外一种地址，即 MAC 地址。严格来说，是主机的网络适配器具有 MAC 地址。对于有多个接口的路由器，每一个接口都对应了一个 MAC 地址</li>\n<li>MAC 地址总长度是 6 字节，因此共有 2^48 个可能的地址，大约是 200 万亿个，数字这么大以至于目前世界上没有两个网卡具有相同的 MAC 地址</li>\n</ul>\n</blockquote>\n<h3 id=\"地址解析协议-ARP\"><a href=\"#地址解析协议-ARP\" class=\"headerlink\" title=\"地址解析协议 ARP\"></a>地址解析协议 ARP</h3><p>因为有网络层地址（IP 地址）和链路层地址（MAC 地址）的存在，就需要在两者之间进行转换，这个转换的协议就是 <strong>地址解析协议（Address Resolution Protocol，ARP）</strong></p>\n<p>ARP 实际上与 DNS 协议特别像，即 DNS 将域名解析成 IP 地址，而 ARP 将 IP 地址解析成 MAC 地址。不过 DNS 能解析网络上任意一个位置的主机的域名，而 ARP 只能解析同一个子网下的 IP 地址的 MAC 地址</p>\n<p>在一个主机上会有一个叫做 ARP 表 的数据解构，里面保存着子网内的 IP 地址到 MAC 地址的映射，其中的每一个项目的过期时间通常是 20 分钟。当主机需要向一个 IP 地址发送数据时，会现在自己的 ARP 表中搜索这个地址的 MAC 地址。如果表中不存在这个映射关系，那么就需要借助 ARP 协议了。主机回想子网内广播一个 ARP 分组（ARP Packet）。这个分组包含发送方和接收方的 IP 地址和 MAC 地址，ARP 的响应分组和请求分组具有相同的结构</p>\n<p>在请求分组中，发送方将分组发向 MAC 地址是 FF-FF-FF-FF-FF-FF 的接受主机，这个地址实际上是广播地址，因此所有的主机在收到这个分组后，都会选择接受它。接受后，主机会检测请求分组中请求解析的 IP 地址是不是自身，如果不是，主机会把这个请求分组丢弃；而如果是，那么主机会构造一个相同的响应分组，不过这个分组不会是一个广播帧，而是发向请求的主机。请求主机收到后也就知道了自己想要的结果</p>\n<p>MAC 地址只能在子网内部使用，如果主机需要把数据发向子网以外的主机，那么该如何构造分组呢？实际上，这个分组的 IP 地址是实际接受主机的地址（即子网外的地址），而 MAC 地址是网关路由器的 MAC 地址。因此这个分组会在子网内部被传递给网关，网关收到这个分组后，读取发送的 IP 地址，重新构造一个链路层分组，把其中的 MAC 地址修改成下一个接受这个分组的路由器的 MAC 地址</p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><p>以太网的帧结构</p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jcjmr.png\" alt=\"链路层帧结构\"></p>\n<ul>\n<li><p>前同步码 （8 字节）：前同步码的存在是为了让接收方的适配器与发送方的适配器在时钟上进行同步，虽然以太网链路层具有一个确定的速率，但是发送适配器可能相对于这个速率有一定的偏移，因此接受适配器需要一定的时间去确定发送方的速率。前同步码的前 7 个字节都是 10101010 这样的循环，最后一个字节是 10101011，最后的 11 就告诉了接收方重要的数据要来了</p>\n</li>\n<li><p>目的地址（6 字节）：接受适配器的 MAC 地址。接受适配器收到了目的地址与自己的 MAC 地址相同的以太网帧、或者目的地址是广播地址的帧，就会把帧的数据部分传递给网络层，否则丢弃这个帧</p>\n</li>\n<li><p>源地址（6 字节）：即发送方的网络适配器地址</p>\n</li>\n<li><p>类型字段（2 字节）：这个字段指明了这个帧的网络层使用了什么协议，比如 0x8086 是 ARP 分组</p>\n</li>\n<li><p>数据字段（46 ~ 1500 字节）：数据字段承载了 IP 数据报，以太网的最大传输单元 MTU 是 1500 字节，对于超过 1500 字节的 IP 数据报，以太网必须把数据报拆开成两个以太网帧。以太网的最小传输单元是 46 字节，所以对于小于 46 字节的数据，以太网会把数据填充到 46 字节。被填充的数据传送到接收方后，接收方的适配器会把 46 字节的数据交付给网络层，网络层读取 IP 数据报首部中的数据长度字段，并去除填充数据</p>\n</li>\n<li><p>CRC：CRC 的目的是让适配器能够检测以太网帧在传输过程中是否发生了错误</p>\n</li>\n</ul>\n<p>以太网提供无连接、不可靠的服务</p>\n<blockquote>\n<p><strong>在以前，以太网的链路是总线拓扑结构或者基于集线器的星型拓扑结构，因此是一条广播链路（一个接口收到比特将从其所有接口进行转发，如果同时两个接口收到比特将发生碰撞，生成该帧的结点必须重新传输）。</strong></p>\n</blockquote>\n<p>但是现在，多数以太网是基于<strong>交换机</strong>的星型拓扑结构，这意味着一条链路上只有首尾两个交换机，交换机不会向一个接口上发送超过一个帧，而且首尾交换机是全双工的，表示两个交换机可以能够同时向链路上发送以太网帧而不会发生碰撞，因此现在没有必要使用 MAC 协议了</p>\n<h2 id=\"Web-页面请求的里程\"><a href=\"#Web-页面请求的里程\" class=\"headerlink\" title=\"Web 页面请求的里程\"></a>Web 页面请求的里程</h2><hr>\n<p>Bob 拿着他的笔记本电脑到了图书馆内，连上图书馆的以太网，打开浏览器访问 <a href=\"http://www.google.com/\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 。在这一过程中，他的电脑究竟发出了哪些请求呢？</p>\n<h3 id=\"DHCP\"><a href=\"#DHCP\" class=\"headerlink\" title=\"DHCP\"></a>DHCP</h3><p>DHCP 发生在电脑连上了网线与浏览器请求 Web 页面之间。刚插上网线的时候，电脑此时还没有一个 IP 地址，因此必须先获得一个地址，这是通过 DHCP 协议完成的：</p>\n<ol>\n<li><p>Bob 的电脑先要构造一个 DHCP 请求报文。这是一个 UDP 报文，目的端口是 67（DHCP 服务端口），源端口是 68（DHCP 客户端口）；目的地址是 255.255.255.255（广播地址），源地址是 0.0.0.0（本机地址）。因为电脑此时还不知道 DHCP 服务端的地址，而且自己也没有地址</p>\n</li>\n<li><p>DHCP 请求报文的 IP 数据报被放入以太网帧中。以太网帧的目的 MAC 地址是 FF:FF:FF:FF:FF:FF，使该帧将被广播到与交换机连接的所有设备（如果顺利也包括DHCP服务器），源 MAC 地址是 Bob 电脑的 MAC 地址（假设是 00:16:D3:23:68:8A）</p>\n</li>\n<li><p>这个包含DHCP请求的广播以太网帧是第一个由Bob设备发送到以太网交换机的帧，以太网帧被发送到交换机的一个接口上，交换机把这个帧广播到它所有的输出接口上，包括连接到路由器的端口；</p>\n</li>\n<li><p>运行着 DHCP （应用层，使用UDP协议）服务的路由器在它的一个接口拥有MAC地址 00:22:6B:45:1F:1B 收到了这个以太网帧，分解出 UDP 报文后向上传递到 67 端口的进程上</p>\n</li>\n<li><p>我们假设 DHCP 服务能够以 CIDR 块 68.85.2.0/24 分配 IP 地址，因此它分配了地址 68.86.2.101 给 Bob 的电脑。DHCP 服务生成一个 DHCP ACK 报文，报文中包含 68.86.2.101 地址、DNS 服务器的 IP 地址（68.87.71.226）、默认网关路由器的 IP 地址（65.85.2.1）、子网块（68.85.2.0/24），这个报文被放入一个 UDP 报文，UDP报文段被放入一个IP数据报中，IP数据报再被放入一个以太网帧中。以太网帧的源 MAC 地址是路由器接收到请求的接口的地址（00:22:6B:45:1F:1B），目的 MAC 地址是 Bob 的电脑的 MAC 地址（00:16:D3:23:68:8A）</p>\n</li>\n<li><p>以太网帧被路由器发送到交换机上。交换机是自学习的，它知道 Bob 的 DHCP 请求报文是从自己的哪个接口收到的，因此会把这个以太网帧也发送到这个接口上</p>\n</li>\n<li><p>Bob 接收到了 DHCP ACK 的以太网帧，从中抽取IP数据报，在从IP数据报中抽取UDP报文段，再从UDP报文段中抽取DCHP ACK报文，取出了分配的 IP 地址、DNS 服务器地址、默认网关地址、子网块等信息。Bob 的笔记本把所有目的地址是 68.85.2.0/24 之外的报文都发送给默认网关。到了这里，Bob 的电脑就算已经连上互联网了</p>\n</li>\n</ol>\n<h3 id=\"DNS-与-ARP\"><a href=\"#DNS-与-ARP\" class=\"headerlink\" title=\"DNS 与 ARP\"></a>DNS 与 ARP</h3><p>这时 Bob 的电脑已经能连上网了，当他键入 <a href=\"http://www.google.com/\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 时，并不知道这个域名对应的 IP 地址是什么，因此需要借助于 DNS 协议。但是在发送 DNS 请求之前，还需要解决一个问题：Bob 的电脑这时并不知道默认网关的 MAC 地址。在发送 DNS 请求之前，必须先发送 ARP 请求获得网关的 MAC 地址</p>\n<ol>\n<li><p>Bob 的电脑生成一个目的地址是 65.85.2.1 的 ARP 查询报文，目的 MAC 地址是 FF:FF:FF:FF:FF:FF 。这个以太网帧被发送给交换机后，交换机把这个帧发送给所有的设备，包括网关路由器</p>\n</li>\n<li><p>默认网关在收到 ARP 查询报文后，发现报文中的目的地址与自己的地址匹配，因此网关准备一个 ARP 回答，在其中包含了自己的 MAC 地址（00:22:6B:45:1F:1B），装入以太网帧中，目的地址是 00:16:D3:23:68:8A，交付给交换机，再由交换机交付给Bob</p>\n</li>\n<li><p>路由器接受到 ARP 回答报文后，交付给 Bob 的电脑，Bob 的电脑从中得知了网关的 MAC 地址</p>\n</li>\n<li><p>Bob 的电脑此时终于能构造 DNS 报文查询域名的 IP 地址了。它构造的 DNS 报文的目的 IP 地址是 68.87.71.226，目的 MAC 地址是 00:22:6B:45:1F:1B（网关），交换机收到这个帧后把它发送给网关路由器</p>\n</li>\n</ol>\n<h3 id=\"开始-DNS-查询\"><a href=\"#开始-DNS-查询\" class=\"headerlink\" title=\"开始 DNS 查询\"></a>开始 DNS 查询</h3><ol>\n<li>DNS 查询报文发送给了网关，网关根据 IP 数据包的目的地址，就这个报文重新封装，发送给了 DNS 服务器</li>\n<li>DNS 服务器收到了查询报文，在自己的 DNS 数据库中找到与 <a href=\"http://www.google.com/\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 匹配的记录，将这条记录变成 DNS 回答报文，使用 UDP 协议发送给 Bob 的电脑</li>\n<li>Bob 的电脑收到了 DNS 回答报文后，终于知道了 <a href=\"http://www.google.com/\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 的 IP 地址，可以开始发送 HTTP 请求了</li>\n</ol>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/my3om.png\" alt></p>\n<p><img src=\"http://media.coderluo.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/83ugo.png\" alt></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck13pbo3i0005c3o6jdkazqaz","category_id":"ck13pbo3t0006c3o6aaurccdn","_id":"ck13pbo470009c3o6o9iputae"},{"post_id":"ck13pbo58000gc3o63vtkrs2v","category_id":"ck13pbo3t0006c3o6aaurccdn","_id":"ck13pbo5i000lc3o6fn7v38gc"},{"post_id":"ck13pbo5d000hc3o669j70yuh","category_id":"ck13pbo3t0006c3o6aaurccdn","_id":"ck13pbo5i000mc3o6lk2r7t5o"},{"post_id":"ck13pbo5x000wc3o6qkfathvj","category_id":"ck13pbo3t0006c3o6aaurccdn","_id":"ck13pbo60000yc3o6iki2exgk"},{"post_id":"ck13pf6tp0004cno6uvaum8qf","category_id":"ck13pezb80001cno6x09h69p6","_id":"ck13pf6tr0006cno6a81n9vfq"},{"post_id":"ck13pfjq30007cno6dz0gbokz","category_id":"ck13pbo57000ec3o6r5lyywa6","_id":"ck13pfjq40009cno67hbqseqm"},{"post_id":"ck13pfouq000acno6hczwoxmn","category_id":"ck13pbo57000ec3o6r5lyywa6","_id":"ck13pfour000ccno6kmbd9k8x"},{"post_id":"ck13pk9oc000dcno605soo0jd","category_id":"ck13pk9od000ecno6wdgidez0","_id":"ck13pk9of000icno67dstzgpf"},{"post_id":"ck13psdji000pcno6cbtymgxu","category_id":"ck13pvdbo000xcno657o3k6o4","_id":"ck13pvdbo000ycno6ixu0gi8q"},{"post_id":"ck13qknjf0000veo61mjj3qd2","category_id":"ck13qknjs0002veo6rzyszrdl","_id":"ck13qknk10007veo6n4gseg7r"},{"post_id":"ck13qknjo0001veo6zt6t86sz","category_id":"ck13qknjs0002veo6rzyszrdl","_id":"ck13qknk20009veo6kgsaewkv"},{"post_id":"ck13qknlb000aveo6z7o1oj02","category_id":"ck13qknjs0002veo6rzyszrdl","_id":"ck13qknlh000eveo69wz5c1ij"},{"post_id":"ck13qknle000cveo6kmcwbdk8","category_id":"ck13qknjs0002veo6rzyszrdl","_id":"ck13qknll000hveo6qqhnfe1c"},{"post_id":"ck13qknlg000dveo6za8uysk8","category_id":"ck13qknjs0002veo6rzyszrdl","_id":"ck13qknlm000iveo67y57t89p"},{"post_id":"ck13qknlw000mveo6g8po6xcu","category_id":"ck13qknjs0002veo6rzyszrdl","_id":"ck13qknm2000oveo6y90xs0mh"}],"PostTag":[{"post_id":"ck13pbo3i0005c3o6jdkazqaz","tag_id":"ck13pbo3v0007c3o6la5v2vgs","_id":"ck13pbo48000ac3o6qtwownxu"},{"post_id":"ck13pbo3i0005c3o6jdkazqaz","tag_id":"ck13pbo460008c3o6r1rgxm52","_id":"ck13pbo49000bc3o6xigr0mnp"},{"post_id":"ck13pbo58000gc3o63vtkrs2v","tag_id":"ck13pbo5i000nc3o6uk0ar9gb","_id":"ck13pbo5k000sc3o6k9boi50u"},{"post_id":"ck13pbo58000gc3o63vtkrs2v","tag_id":"ck13pbo3v0007c3o6la5v2vgs","_id":"ck13pbo5l000tc3o6r68in4bu"},{"post_id":"ck13pbo5d000hc3o669j70yuh","tag_id":"ck13pbo5k000rc3o6590f5ioi","_id":"ck13pbo5l000uc3o69jkappl2"},{"post_id":"ck13pbo5d000hc3o669j70yuh","tag_id":"ck13pbo3v0007c3o6la5v2vgs","_id":"ck13pbo5l000vc3o6iqrbqwmf"},{"post_id":"ck13pbo5x000wc3o6qkfathvj","tag_id":"ck13pbo5z000xc3o6f8tvsih5","_id":"ck13pbo60000zc3o65us2330k"},{"post_id":"ck13pbo5x000wc3o6qkfathvj","tag_id":"ck13pbo3v0007c3o6la5v2vgs","_id":"ck13pbo610010c3o6az911x9h"},{"post_id":"ck13pf6tp0004cno6uvaum8qf","tag_id":"ck13pbo460008c3o6r1rgxm52","_id":"ck13pf6tr0005cno6gu7zaipw"},{"post_id":"ck13pfjq30007cno6dz0gbokz","tag_id":"ck13pbo58000fc3o6765laqr0","_id":"ck13pfjq40008cno6vxjqsrrj"},{"post_id":"ck13pfouq000acno6hczwoxmn","tag_id":"ck13pbo58000fc3o6765laqr0","_id":"ck13pfour000bcno6h4oe8xdo"},{"post_id":"ck13pk9oc000dcno605soo0jd","tag_id":"ck13pk9oe000fcno6ub7ohrc4","_id":"ck13pk9oe000gcno6tc3og5g6"},{"post_id":"ck13psdji000pcno6cbtymgxu","tag_id":"ck13ps6nj000mcno61p97u6bb","_id":"ck13pv7n9000vcno64clez8jt"},{"post_id":"ck13qknjf0000veo61mjj3qd2","tag_id":"ck13qknjw0003veo6dwnxobij","_id":"ck13qknk00006veo6v703a3v2"},{"post_id":"ck13qknjo0001veo6zt6t86sz","tag_id":"ck13qknjy0005veo6e3a6uzwn","_id":"ck13qknk10008veo6kfm4wroi"},{"post_id":"ck13qknlb000aveo6z7o1oj02","tag_id":"ck13qknle000bveo6otew7qup","_id":"ck13qknlk000gveo6zbpaby5m"},{"post_id":"ck13qknle000cveo6kmcwbdk8","tag_id":"ck13qknlj000fveo69997atin","_id":"ck13qknlm000kveo61eznylmh"},{"post_id":"ck13qknlg000dveo6za8uysk8","tag_id":"ck13qknlm000jveo627c1fjfr","_id":"ck13qknln000lveo6cj87a8b7"},{"post_id":"ck13qknlw000mveo6g8po6xcu","tag_id":"ck13qknm1000nveo61qz8nm68","_id":"ck13qknm2000pveo68u9y0wej"}],"Tag":[{"name":"Zookeeper","_id":"ck13pbo3v0007c3o6la5v2vgs"},{"name":"Docker","_id":"ck13pbo460008c3o6r1rgxm52"},{"name":"CSAPP","_id":"ck13pbo58000fc3o6765laqr0"},{"name":"Paxos","_id":"ck13pbo5i000nc3o6uk0ar9gb"},{"name":"源码分析","_id":"ck13pbo5k000rc3o6590f5ioi"},{"name":"Zab","_id":"ck13pbo5z000xc3o6f8tvsih5"},{"name":"线程堆栈","_id":"ck13pk9oe000fcno6ub7ohrc4"},{"name":"Mybatis","_id":"ck13ps6nj000mcno61p97u6bb"},{"name":"源码","_id":"ck13puur2000scno6cq6u6t1g"},{"name":"网络层","_id":"ck13qknjw0003veo6dwnxobij"},{"name":"传输层","_id":"ck13qknjy0005veo6e3a6uzwn"},{"name":"应用层","_id":"ck13qknle000bveo6otew7qup"},{"name":"因特网","_id":"ck13qknlj000fveo69997atin"},{"name":"网络安全","_id":"ck13qknlm000jveo627c1fjfr"},{"name":"链路层","_id":"ck13qknm1000nveo61qz8nm68"}]}}